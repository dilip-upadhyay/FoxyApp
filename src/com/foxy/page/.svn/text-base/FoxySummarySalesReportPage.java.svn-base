/*
 * FoxySummarySalesReportPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;


import java.text.SimpleDateFormat;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import java.util.Calendar;
import org.hibernate.SQLQuery;


/**
 *
 * @author hcting
 */
public class FoxySummarySalesReportPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel custSalesListModel;
    private String displayUnit = null;
    private Integer year = null;
    
    private String title = new String("");
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat fmt3 =  new SimpleDateFormat("yyyy");
    
    
    public class ReportDataBean {
        
        private String country = null;
        private Double[] qtyPcs = new Double[12];
        private Double[] qtyDzn = new Double[12];
        private Double[] totVal = new Double[12];
        
        public String getCountry() {
            return country;
        }
        
        public void setCountry(String country) {
            this.country = country;
        }
        
        public Double[] getQtyPcsArray(){
            return  qtyPcs;
        }
        public Double[] getQtyDznArray(){
            return  qtyDzn;
        }
        public Double[] getTotValArray(){
            return  totVal;
        }
        
        public Double getQtyDznM01() {
            return qtyDzn[0];
        }
        public Double getQtyDznM02() {
            return qtyDzn[1];
        }
        public Double getQtyDznM03() {
            return qtyDzn[2];
        }
        public Double getQtyDznM04() {
            return qtyDzn[3];
        }
        public Double getQtyDznM05() {
            return qtyDzn[4];
        }
        public Double getQtyDznM06() {
            return qtyDzn[5];
        }
        public Double getQtyDznM07() {
            return qtyDzn[6];
        }
        public Double getQtyDznM08() {
            return qtyDzn[7];
        }
        public Double getQtyDznM09() {
            return qtyDzn[8];
        }
        public Double getQtyDznM10() {
            return qtyDzn[9];
        }
        public Double getQtyDznM11() {
            return qtyDzn[10];
        }
        public Double getQtyDznM12() {
            return qtyDzn[11];
        }
        public void setQtyDzn(Integer month, Double qtyDzn) {
            this.qtyDzn[month-1] = qtyDzn;
        }
        
        
        public Double getQtyPcsM01() {
            return qtyPcs[0];
        }
        public Double getQtyPcsM02() {
            return qtyPcs[1];
        }
        public Double getQtyPcsM03() {
            return qtyPcs[2];
        }
        public Double getQtyPcsM04() {
            return qtyPcs[3];
        }
        public Double getQtyPcsM05() {
            return qtyPcs[4];
        }
        public Double getQtyPcsM06() {
            return qtyPcs[5];
        }
        public Double getQtyPcsM07() {
            return qtyPcs[6];
        }
        public Double getQtyPcsM08() {
            return qtyPcs[7];
        }
        public Double getQtyPcsM09() {
            return qtyPcs[8];
        }
        public Double getQtyPcsM10() {
            return qtyPcs[9];
        }
        public Double getQtyPcsM11() {
            return qtyPcs[10];
        }
        public Double getQtyPcsM12() {
            return qtyPcs[11];
        }
        public void setQtyPcs(Integer month, Double qtyPcs) {
            this.qtyPcs[month-1] = qtyPcs;
        }
        
        
        public Double getTotValM01() {
            return totVal[0];
        }
        public Double getTotValM02() {
            return totVal[1];
        }
        public Double getTotValM03() {
            return totVal[2];
        }
        public Double getTotValM04() {
            return totVal[3];
        }
        public Double getTotValM05() {
            return totVal[4];
        }
        public Double getTotValM06() {
            return totVal[5];
        }
        public Double getTotValM07() {
            return totVal[6];
        }
        public Double getTotValM08() {
            return totVal[7];
        }
        public Double getTotValM09() {
            return totVal[8];
        }
        public Double getTotValM10() {
            return totVal[9];
        }
        public Double getTotValM11() {
            return totVal[10];
        }
        public Double getTotValM12() {
            return totVal[11];
        }
        public void setTotVal(Integer month, Double totVal) {
            this.totVal[month-1] = totVal;
        }
        
        public void AccumulateVal(Double[] pcs, Double[] dzn, Double[] totval){
            for ( int i = 0; i < 12; i++){
                if ( this.qtyPcs[i] == null ){
                    this.qtyPcs[i]  = pcs[i];
                }else{
                    if ( pcs[i] != null ) {
                    this.qtyPcs[i] += pcs[i];
                    }
                }
                
                if ( this.qtyDzn[i] == null ){
                    this.qtyDzn[i]  = dzn[i];
                }else{
                    if ( dzn[i] != null ) {
                    this.qtyDzn[i] += dzn[i];
                    }
                }
                
                if ( this.totVal[i] == null ){
                    this.totVal[i]  = totval[i];
                }else{
                    if ( totval[i] != null ) {
                    this.totVal[i] += totval[i];
                    }
                }
            }
        }
        
    }; //Inner class end
    
    
    public FoxySummarySalesReportPage() {
        super(new String("CustomerOrderReportForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getDisplayUnit() {
        return displayUnit;
    }

    public void setDisplayUnit(String displayUnit) {
        this.displayUnit = displayUnit;
    }
    
    public Integer getYear() {
        return year;
    }
    
    public void setYear(Integer year) {
        this.year = year;
    }
    
    
    public String getTitle() {
        
        if ( this.year != null ){
            title = "[" + fmt3.format(this.getFromDate()) + "] " + title;
        }else {
            
            if ( this.getFromDate() != null ) {
                title = title + "Delivery Date From [" + fmt1.format(this.getFromDate()) + "] ";
            }
            
            if ( this.getToDate() != null ) {
                title = title + "To [" + fmt1.format(this.getToDate()) + "] ";
            }
        }
        
        title = title + "  As At [" + fmt2.format(new Date()) + "] Unit [" + this.getDisplayUnit() + "]";
        
        
        return title;
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        
        if ( this.year != null ){
            Calendar cal = Calendar.getInstance();
            // This is the right way to set the month
            cal.set(Calendar.YEAR,   this.year );
            cal.set(Calendar.MONTH, Calendar.JANUARY);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
            
            //this.fromDate = cal.getTime();
            this.setFromDate(cal.getTime());
            
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
            //this.toDate = cal.getTime();
            this.setToDate(cal.getTime());
        }
        return (null);
    }
    
    public void getCountrySalesSummary(ReportDataBean rptdata, String country){
        try {
            //System.err.println("Search for records " +  this.country + "  " + this.custCode + " " + this.fromDate + " " + this.toDate);
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            String startdate = this.year + "0101";
            String enddate   = this.year + "1231";
            SimpleDateFormat fmt001 =  new SimpleDateFormat("MM");
            
            String qstr = " SELECT os.delivery as delivery,  sum(os.qtydzn) as qtydzn, sum(os.qtypcs) as qtypcs, sum(os.qtypcs * ord.unitprice) as totval ";
            qstr += " FROM ordsummary os ";
            qstr += " LEFT JOIN orders ord ON os.orderid = ord.orderid  ";
            qstr += " WHERE os.delivery >= :pstartdate AND os.delivery <= :penddate AND os.origin = :pcountry ";
            qstr += " Group by Month(os.delivery) ";
            qstr += " Order by os.delivery  ";
            SQLQuery q = session.createSQLQuery(qstr);
            
            q.setString("pstartdate", startdate);
            q.setString("penddate", enddate);
            q.setString("pcountry", country);
            
            //Specifically set column datatype
            q.addScalar("delivery", Hibernate.DATE);
            q.addScalar("qtydzn", Hibernate.DOUBLE);
            q.addScalar("qtypcs", Hibernate.DOUBLE);
            q.addScalar("totval", Hibernate.DOUBLE);
            
            //custOderList = q.list();
            Iterator it = q.list().iterator();
            Double d = null;
            Date date1 = null;
            Integer slot = null;
            while (it.hasNext()){
                Object[] tmpRow = (Object[])it.next();
                int i = 0;
                try {
                    date1 = (Date)tmpRow[i++];
                    //System.err.println("Date = " + date1);
                    
                    slot = Integer.parseInt(fmt001.format(date1));
                    //System.err.println("Slot = " + slot);
                    
                    d = (Double)tmpRow[i++]; //qtyDzn
                    rptdata.setQtyDzn(slot,d);
                    //System.err.println("qtyDzn = " + d);
                    
                    d = (Double)tmpRow[i++]; //qtyPcs
                    rptdata.setQtyPcs(slot, d);
                    //System.err.println("qtyPcs = " + d);
                    
                    d = (Double)tmpRow[i++]; //totval
                    rptdata.setTotVal(slot, d);
                    //System.err.println("totVal = " + d);
                    
                }catch (Exception e){
                    e.printStackTrace();
                }
            }
            
            tx.commit();
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } catch (Exception e){
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        }finally {
            HibernateUtil.closeSession();
        }
    }
    
////////////////////////////////////////////////////////
    public DataModel getCustSalesListModel(){
        List<ReportDataBean>  custOderList = null;
        if ( this.year != null){
            try {
                //System.err.println("Search for records " +  this.country + "  " + this.custCode + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                String qstr = " SELECT pm.code as code, pm.description as country ";
                qstr = qstr + " FROM  parameter pm WHERE pm.category = 'CNTY' ORDER BY pm.code ";
                
                SQLQuery q = session.createSQLQuery(qstr);
                
                
                //Specifically set column datatype
                q.addScalar("code", Hibernate.STRING);
                q.addScalar("country", Hibernate.STRING);
                
                //custOderList = q.list();
                Iterator it = q.list().iterator();
                if ( custOderList == null){
                    custOderList = new ArrayList();
                }
                
                String country = null;
                String code = null;
                tx.commit();
                ReportDataBean grandTotal = new  ReportDataBean();
                while (it.hasNext()){
                    Object[] tmpRow = (Object[])it.next();
                    int i = 0;
                    //System.err.println("Search for records 333");
                    ReportDataBean obj = new  ReportDataBean();
                    try {
                        code = (String)tmpRow[i++];
                        country = (String)tmpRow[i++];
                        obj.setCountry(country);
                        this.getCountrySalesSummary(obj, code);
                        grandTotal.AccumulateVal(obj.getQtyPcsArray(), obj.getQtyDznArray(), obj.getTotValArray());
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                    
                    custOderList.add(obj);
                }
                
                
                if ( custOderList.size() > 0 ){ //First item can not be total
                    //Add in grand total
                    custOderList.add(grandTotal);
                }
                
                
                //System.err.println("Search for records 111, size = " + custOderList.size());
                custSalesListModel = null;
                custSalesListModel = new ListDataModel();
                if (custOderList.size() == 0) {
                    ReportDataBean os = new ReportDataBean();
                    custOderList.add(os);
                }
                custSalesListModel.setWrappedData(custOderList);
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } catch (Exception e){
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            }finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        return custSalesListModel;
    }
    
}
