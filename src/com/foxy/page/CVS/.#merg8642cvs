/*
 * FoxyCustomerPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.util.HashMap;
import java.util.Set;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import com.foxy.db.ProdSchedule;
import com.foxy.db.ProdScheduleLots;
import com.foxy.db.Orders;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import java.util.ArrayList;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyProdSchedulePage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private String status = null;
    private ProdSchedule prodSchBean = null;
    private ProdScheduleLots prodLotBean = null;
    private HashMap<String,ProdScheduleLots> lotsMap = null;
    private List lotsListItems = null;
    private String[] selectedLots = null;
    
    
    /** Creates a new instance of FoxyCustomerPage */
    public FoxyProdSchedulePage() {
        super(new String("ProdScheduleForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        if ( this.prodSchBean == null ) {
            this.prodSchBean = new  ProdSchedule();
        }
        
    }
    
    public List getLotsListItems(){
        if ( this.lotsListItems == null) {
            this.lotsListItems =  new ArrayList();
        } else {
            this.lotsListItems.clear();
        }
        
        //System.out.println("get items");
        //lotsListItems.add(new SelectItem("testkey", "testval"));
        
        if ( lotsMap != null) {
            ProdScheduleLots lotobj = null;
            Set st = lotsMap.entrySet();
            Iterator it = st.iterator();
            try {
                while( it.hasNext()){
                    Map.Entry me = (Map.Entry)it.next();
                    lotobj = (ProdScheduleLots)me.getValue();
                    lotsListItems.add(new SelectItem(me.getKey(), lotobj.toString()));
                }
            } catch ( Exception e) {
                e.printStackTrace();
            }
        }
        return lotsListItems;
    }
    
    
    public HashMap<String, ProdScheduleLots> getLotsMap() {
        if ( this.lotsMap == null ) {
            this.lotsMap = new  HashMap();
        }
        return lotsMap;
    }
    
    public void setLotsMap(HashMap<String, ProdScheduleLots> lotsMap) {
        this.lotsMap = lotsMap;
    }
    
    
    public String[] getSelectedLots() {
        return selectedLots;
    }
    
    public void setSelectedLots(String[] selectedLots) {
        this.selectedLots = selectedLots;
    }
    
    
    public ProdSchedule getProdSchBean(){
        return this.prodSchBean;
    }
    
    public void setProdSchBean(ProdSchedule prodSchBean) {
        this.prodSchBean = prodSchBean;
    }
    
    public ProdScheduleLots getProdLotBean() {
        if ( this.prodLotBean == null){
            prodLotBean = new ProdScheduleLots();
        }
        return prodLotBean;
    }
    
    public void setProdLotBean(ProdScheduleLots prodLotBean) {
        this.prodLotBean = prodLotBean;
    }
    
    
    
    public String saveAdd() {
        System.out.println("Save Add");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            session.save(this.prodSchBean);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return ("success");
    }
    
    public String saveEdit() {
        System.out.println("Save Edit");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            session.update(this.prodSchBean);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return ("success");
    }
    
    public String delLotsListItem() {
        try {
            System.err.println("Calling delLotsListItem");
            System.err.println("Selected items Size = " + selectedLots.length);
            for ( int i = 0; i < selectedLots.length; i++) {
                System.err.println("Selected items[" + i + "] = [" + selectedLots[i]);
                lotsMap.remove(selectedLots[i]);
            }
        }catch ( Exception e){
            e.printStackTrace();
        }finally {
            
        }
        return null;
    }
    
    
    public String onAddSubRefNo() {
        System.err.println("Ajax lots id = " +  this.prodLotBean.getLot());
        lotsMap.put(new String("CNTY" + this.prodLotBean.getLot()),
                new  ProdScheduleLots("CNTY" + this.prodLotBean.getLot(), this.prodLotBean.getVesselDate()));
        return null;
    }
    
    
    public String onRefNoChange(){
        System.err.println("Ajax call onRefNoChange, refno = " + this.prodSchBean.getRefNo() + "]");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            Criteria crit = session.createCriteria(Orders.class);
            crit.add(Expression.eq("orderId", this.prodSchBean.getRefNo()));
            List result = crit.list();
            if ( result.size() == 0 ) {
                status = "Record [" + this.prodSchBean.getRefNo() + "] does not exist size[" + lotsMap.size() + "]!!!";
            } else {
                
                System.err.println("Ajax called ...");
                status = null;
            }
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        
        return (null); //Must return null, else Ajax would not work
    }
    
    public String getCheckStatus(){
        return this.status;
    }
    public void setCheckStatus(String str){
        this.status = str;
    }
    
    public boolean isStatusOk(){
        if ( status == null) {
            return true;
        } else {
            return false;
        }
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        foxyTable.setFirst(0);
        return (null);
    }
}
