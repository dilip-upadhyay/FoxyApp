/*
 * FoxyUserPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.db.HibernateUtil;
import com.foxy.db.Orders;
import com.foxy.db.User;
import com.foxy.db.MenuTreeList;
import com.foxy.db.UserRole;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import com.foxy.util.MD5;
import com.foxy.bean.FoxySessionData;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.faces.model.ListDataModel;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;



/**
 *
 * @author eric
 */
public class FoxyUserPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel userListModel;
    private DataModel menuTreeList;
    private String rePassword = null;
    private User dbUser = null;
    private List fullMenuList = null;
    
    
    
    /** Creates a new instance of FoxyUserPage */
    public FoxyUserPage() {
        super(new String("UserForm"));
        this.isAuthorize(MENU_CODE);
        
        String reqpath = ectx.getRequestContextPath();
        String spath = ectx.getRequestServletPath();
        String pathinfo = ectx.getRequestPathInfo();
        
        //String url = reqpath.equals(null)?"":reqpath;
        /**
         * String url = "";
         * if (reqpath != null)  url = reqpath;
         * if (spath != null)  url = url + spath;
         * if (pathinfo != null) url = url + pathinfo;
         * //url  =  reqpath;
         * //url  = url + spath;
         * //url = url + pathinfo;
         * System.err.println("Calling constructor");
         * System.err.println(reqpath);
         * System.err.println(spath);
         * System.err.println(pathinfo);
         * System.err.println(url);
         * System.err.println("Calling constructor --END");
         */
        
        
        
        try {
            if (this.action != null) {
                System.out.println("Action not null");
                if (this.action.equals(ENQ)) {
                    /*
                    if (this.ectx.getRequestParameterMap().containsKey("userid")) {
                        enquiry(this.ectx.getRequestParameterMap().get("userid").toString());
                    }*/
                } else if (this.action.equals("LIST")) {
                    /* Prepare data for listing */
                    //this.DataScrollerList();
                } else if (this.action.equals("ADD")){
                    System.out.println("ADD action, creating new user obj");
                    dbUser = new User();
                } else if (this.action.equals("UPDATE")){
                    System.out.println("Updating record been called");
                }
                
            } else {
                System.out.println("Action is null");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    //Using db obj to manipulate user profile (reuse)
    public User getDbUser() {
        return dbUser;
    }
    
    
    
    //PROPERTY: dbuser
    public User getDbUserUpd() {
        System.err.println("calling update");
        //Should only retrieve if object not yet retrieved !! else will be to heavy and unneccessary query !
        if ( this.dbUser == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria crit = session.createCriteria(User.class);
                System.err.println("userid = " + foxySessionData.getPageParameter());
                crit.add(Expression.eq("userId", foxySessionData.getPageParameter()));
                List result = crit.list();
                System.err.println("Result size = " + result.size());
                if ( result.size() > 0 ) {
                    this.dbUser = (User)result.get(0);
                    tx.commit();
                    this.dbUser.setPassword(null); //Reset password to null for display empty
                } else {
                    tx.commit();
                    System.err.println("No user with userid = " + foxySessionData.getPageParameter());
                }
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }
        return this.dbUser;
    }
    
    
    
    //PROPERTY: rePassword
    public String getRePassword(){
        return this.rePassword;
    }
    
    
    public void setRePassword(String newValue) {
        this.rePassword = newValue;
    }
    
    
    public String saveAdd() {
        if (this.dbUser.getPassword().equals(this.getRePassword()) && dbUser != null) {
            //Save into db new user record
            try {
                MD5 md5 = new MD5();
                this.dbUser.setPassword(md5.messageDigest(this.dbUser.getPassword()));
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                session.saveOrUpdate(this.dbUser);
                
                
                //Deleting User role from UserRole table if any
                String qstr = "DELETE UserRole ur ";
                qstr = qstr.concat("WHERE ur.userId = :puserId");
                Query q2 = session.createQuery(qstr);
                q2.setString("puserId", this.dbUser.getUserId());
                q2.executeUpdate();
                
                //Insert all mandatory default User ROLE
                UserRole ur = new UserRole(this.dbUser.getUserId(), "FOXY");
                session.saveOrUpdate(ur);
                tx.commit();
            } catch (Exception e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
                //Reset hash password back to text (taking from rePassword)
                this.dbUser.setPassword(this.getRePassword());
                return null;
            } finally {
                HibernateUtil.closeSession();
                //return ("success");
            }
            
            ListData ld = (ListData)this.getBean("listData");
            ld.resetMerchandiser(); //To force release data list for combo box listing
            this.action = new String("ENQUIRY");
            return ("success");
        } else {
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Password mismatch", "Please re-enter password correctly");
            ctx.addMessage(null, fmsg);
            return null;
        }
    }
    
    
    public String saveUpdate() {
        System.err.println("SAVE Update");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            //session.update("userId", this.dbUser.getUserId());
            String  qstr  = new String("UPDATE User u SET  ");
            qstr = qstr.concat("u.fullName = :pfullName, ");
            qstr = qstr.concat("u.location = :plocation, ");
            qstr = qstr.concat("u.status = :pstatus, ");
            qstr = qstr.concat("u.userGroup = :puserGroup ");
            qstr = qstr.concat("WHERE u.userId = :puserId ");
            
            Query q = session.createQuery(qstr);
            q.setString("pfullName", this.dbUser.getFullName());
            q.setString("plocation", this.dbUser.getLocation());
            q.setString("pstatus", this.dbUser.getStatus());
            q.setString("puserGroup", this.dbUser.getUserGroup());
            q.setString("puserId", this.dbUser.getUserId());
            q.executeUpdate();
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        } finally {
            HibernateUtil.closeSession();
        }
        this.action = new String("LIST");
        ListData ld = (ListData)this.getBean("listData");
        ld.resetMerchandiser(); //To force release data list for combo box listing
        return ("success");
    }
    
    
    
    public String savePassword() {
        System.err.println("SAVE password");
        
        
        if (this.dbUser.getPassword().equals(this.getRePassword()) && dbUser != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                //session.update("userId", this.dbUser.getUserId());
                MD5 md5 = new MD5();
                this.dbUser.setPassword(md5.messageDigest(this.dbUser.getPassword()));
                
                String  qstr  = new String("UPDATE User u SET  ");
                qstr = qstr.concat("u.password = :ppassword ");
                qstr = qstr.concat("WHERE u.userId = :puserId ");
                
                Query q = session.createQuery(qstr);
                q.setString("ppassword", this.dbUser.getPassword());
                q.setString("puserId", this.dbUser.getUserId());
                q.executeUpdate();
                tx.commit();
            } catch (Exception e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
                return null;
            } finally {
                HibernateUtil.closeSession();
            }
            //this.action = new String("LIST");
        } else {
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Password mismatch", "Please re-enter password correctly");
            ctx.addMessage(null, fmsg);
            return null;
        }
        
        return ("success");
    }
    
    
    public String saveUserRole(){
        //Save new user role matrix
        return ("success");
    }
    
    
    public String deleteUser(){
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            String  qstr  = new String("DELETE User u ");
            qstr = qstr.concat("WHERE u.userId = :puserId ");
            Query q = session.createQuery(qstr);
            q.setString("puserId", foxySessionData.getPageParameter());
            q.executeUpdate();
            
            //Deleting User role from UserRole table
            qstr = "DELETE UserRole ur ";
            qstr = qstr.concat("WHERE ur.userId = :puserId");
            Query q2 = session.createQuery(qstr);
            q2.setString("puserId", foxySessionData.getPageParameter());
            q2.executeUpdate();
            
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return (null);
        } finally {
            HibernateUtil.closeSession();
        }
        
        this.action = new String("LIST");
        ListData ld = (ListData)this.getBean("listData");
        
        return null;
    }
    
    
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        System.out.println("!!!!" + this.action);
        foxyTable.setFirst(0);
        //return ("success");
        return null;
    }
    
    
    
    public String updateDetail() {
        this.dbUser = null;
        return ("update");
    }
    
    
    public String resetPassword() {
        this.dbUser = null;
        return ("resetpassword");
    }
    
    public String editUserRole() {
        this.dbUser = null;
        return ("edituserrole");
    }
    
    
    public DataModel getUserListModel() {
        try {
            int firstrow = foxyTable.getFirst();
            int pagesize = foxyTable.getRows();
            Number numofRec = null;
            
            if (this.searchKey != null) {
                String likestr = "%" +  this.searchKey.replace('*', '%') + "%";
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria criteria = session.createCriteria(User.class);
                
                //Get Total row count
                criteria.setProjection(Projections.rowCount());
                criteria.add(Expression.like("userId", likestr));
                numofRec = ((Number) criteria.uniqueResult());
                tx.commit();
                
                //System.err.println("Total Number of records: [" + numofRec.intValue() + "]");
                numofRec = numofRec == null ? 0 : numofRec.intValue();
                
                
                //Retrieve subset of record base on foxyTable current view page
                tx = session.beginTransaction();
                criteria = session.createCriteria(User.class);
                criteria.add(Expression.like("userId", likestr));
                criteria.setFirstResult(firstrow);
                criteria.setMaxResults(pagesize);
                List result = criteria.list();
                tx.commit();
                session.clear();
                if (userListModel != null) {
                    userListModel = null;
                }
                //System.err.println("Query Results size = [" + result.size() + "] recs");
                userListModel = (DataModel)new FoxyPagedDataModel(result, numofRec.intValue(), pagesize);
            } else {
                System.err.println("Search key is null");
            }
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        return userListModel;
    }
    
}
