/*
 * FoxyOrderDetailPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.bean.FoxySessionData;
import com.foxy.data.FoxyOrderDetaiData;
import com.foxy.data.FoxyOrderList;
import com.foxy.db.Category;
import com.foxy.db.HibernateUtil;
import com.foxy.db.OrderConfirm;
import com.foxy.db.OrderSummary;
import com.foxy.db.Orders;
import com.foxy.db.User;
import com.foxy.util.ListData;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author eric
 */
public class FoxyOrderInstructionPage extends Page {
    private static String MENU_CODE = new String("FOXY");
    
    private String refId = null;
    private String orderId = null;
    private String month = null;
    private String location = null;
    private String origin = null;
    private String originD = null;
    private String subLocation = null;
    private String country = null;
    private String category = null;
    private String categoryD = null;
    private String importTax = null;
    
    private Date vesselDate = Calendar.getInstance(Locale.US).getTime();;
    private String make = null;
    private Double quantity = new Double(0.0);
    private Double qtyDzn = new Double(0.0);
    private Double qtyPcs = new Double(0.0);
    private String unit = null;
    private String unitc = null;
    private String remark = null;
    private String ship = null;
    private String destination = null;
    private String poNumber = null;
    private Date poDate = Calendar.getInstance(Locale.US).getTime();;
    private Date fabricDate = Calendar.getInstance(Locale.US).getTime();;
    private String status = null;
    private DataModel orderDetailModel;
    
    /** Creates a new instance of FoxyOrderDetailPage */
    public FoxyOrderInstructionPage() {
        super(new String("OrderInstructionForm"));
        //getOrder(this.orderId);
        this.isAuthorize(MENU_CODE);
        
        /* Get session data */
        if (this.foxySessionData == null) {
            this.foxySessionData = (FoxySessionData) getBean("foxySessionData");
        }
        
        /* Set default action */
        if (this.foxySessionData.getAction() == null) {
            this.foxySessionData.setAction("ADD");
        }
        
        if (this.foxySessionData.getAction() != null) {
            System.out.println("Action not null: " + this.action);
            
            if (this.foxySessionData.getPageParameter() != null) {
                this.setOrderId(this.foxySessionData.getPageParameter());
            }
        }
    }
    
    private void getOrderSum() {
        ListData ld = (ListData)getBean("listData");
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List ordSum = session.createQuery("from OrderSummary where orderid = '" +
                    this.orderId + "' and month = '" + this.month +
                    "' and location = '" + this.location + "' order by month").list();
            for (int i = 0; i < ordSum.size(); i ++ ){
                OrderSummary os = (OrderSummary) ordSum.get(i);
                Category cat = ld.getCategory(os.getCategory());
                this.setCategoryD(cat.getCategory() + " - " + cat.getDesc());
                this.setCategory(os.getCategory());
                this.setImportTax(os.getImportTax());
                this.setRefId(String.valueOf(os.getId()));
                this.setRemark(os.getRemark());
                this.setQtyDzn(os.getQtyDzn());
                this.setQtyPcs(os.getQtyPcs());
                if (os.getUnitc().equals("DZN")) {
                    this.setQuantity(os.getQtyDzn());
                } else if (os.getUnitc().equals("PCS")) {
                    this.setQuantity(os.getQtyPcs());
                }
                this.setUnit(os.getUnit());
                this.setUnitc(os.getUnitc());
                this.setOrigin(os.getOrigin());
                this.setOriginD(ld.getCountryDesc(os.getOrigin(), 0));
                this.setDestination(os.getDestination());
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public String save() {
        OrderSummary orders = new OrderSummary();
        if (this.location == null || this.location.length() < 1) {
            this.location = new String(" ");
        }
        
        try {
            if (this.getRefId() != null) {
                orders.setId(Integer.parseInt(this.getRefId()));
            }
            /* Get Location, destination, unit, based on category*/
            ListData ld = (ListData)getBean("listData");
            Category cat = ld.getCategory(this.getCategory());
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            orders.setOrderId(this.getOrderId());
            orders.setMonth(this.getMonth());
            orders.setLocation(this.getLocation());
            orders.setOrigin(this.getOrigin());
            orders.setDestination(cat.getCountry());
            orders.setCategory(this.getCategory());
            orders.setImportTax(this.getImportTax());
            /*orders.setQtyDzn(this.getQtyDzn());
            orders.setQtyPcs(this.getQtyPcs());*/
            orders.setUnit(cat.getUnit());
            orders.setUnitc(this.getUnitc());
            orders.setRemark(this.getRemark());
            orders.setStatus(new String("0"));
            
            if (this.getUnitc().equals("DZN")) {
                orders.setQtyDzn(this.getQuantity());
                orders.setQtyPcs(this.getQuantity() * 12);
                this.setQtyDzn(orders.getQtyDzn());
                this.setQtyPcs(orders.getQtyPcs());
            } else if (this.getUnitc().equals("PCS")) {
                orders.setQtyDzn(this.getQuantity() / 12);
                orders.setQtyPcs(this.getQuantity());
                this.setQtyDzn(orders.getQtyDzn());
                this.setQtyPcs(orders.getQtyPcs());
            }
            
            this.setCategoryD(cat.getCategory() + " - " + cat.getDesc());
            
            session.saveOrUpdate(orders);
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.foxySessionData.setAction(ADD);
        return ("success");
    }
    
    public String enquire() {
        if(this.ectx.getRequestParameterMap().containsKey("month")) {
            System.out.println(this.ectx.getRequestParameterMap().get("month"));
            this.month = this.ectx.getRequestParameterMap().get("month").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("location")) {
            System.out.println(this.ectx.getRequestParameterMap().get("location"));
            this.location = this.ectx.getRequestParameterMap().get("location").toString();
        }
        this.getOrderSum();
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    public String update() {
        System.out.println("&&&&&&&& " + this.getMonth());
        System.out.println("&&&&&&&& " + this.getLocation());
        //this.getOrderSumUpd();
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    public String edit() {
        this.foxySessionData.setAction(UPD);
        this.getOrderSum();
        return ("success");
    }
    
    public String add() {
        this.setMonth(null);
        this.setLocation(null);
        this.foxySessionData.setAction(ADD);
        return ("success");
    }
    
    public String search() {
        this.action = new String("LIST");
        this.DataScrollerList();
        System.out.println("!!!!" + this.action);
        return ("success");
    }
    
    public DataModel getOrderDetail() {
        Double totalDzn = new Double(0.0);
        Double totalPcs = new Double(0.0);
        ListData ld = (ListData)getBean("listData");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List ordSum = session.createQuery("from OrderSummary where orderid = '" +
                    this.orderId + "' order by month").list();
            if (ordSum.size() <= 0) {
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                this.tableList.add(odDs);
            }
            
            for (int i = 0; i < ordSum.size(); i ++ ){
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                OrderSummary os = (OrderSummary) ordSum.get(i);
                
                List result = session.createQuery("from Category where catId = '" + os.getCategory() +"'").list();
                Category cat = (Category) result.get(0);
                odDs.setCategory(cat.getCategory());
                
                odDs.setOrderId(os.getOrderId());
                odDs.setMonth(os.getMonth());
                odDs.setLocation(os.getLocation());
                odDs.setMake(ld.getCountryDesc(os.getOrigin(), 1));
                odDs.setRemark(os.getRemark());
                odDs.setQuantityDzn(os.getQtyDzn());
                odDs.setQuantityPcs(os.getQtyPcs());
                odDs.setUnit(os.getUnit());
                this.tableList.add(odDs);
                
                List ordCon = session.createQuery("from OrderConfirm where orderid = '" +
                        this.orderId + "' and srefid = " + os.getId()).list();
                
                totalDzn = 0.0;
                totalPcs = 0.0;
                
                if (ordCon.size() <= 0) {
                    FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                    tot.setMonth(os.getMonth());
                    tot.setLocation(os.getLocation());
                    this.tableList.add(tot);
                }
                
                for (int j = 0; j < ordCon.size(); j ++ ){
                    FoxyOrderDetaiData odDc = new FoxyOrderDetaiData();
                    OrderConfirm oc = (OrderConfirm) ordCon.get(j);
                    
                    /*result = session.createQuery("from Category where catId = '" + oc.getCategory() +"'").list();
                    cat = (Category) result.get(0);
                    odDc.setCategory(cat.getCategory());*/
                    
                    odDc.setOrderId(oc.getOrderId());
                    odDc.setMonth(oc.getMonth());
                    odDc.setPoNumber(oc.getPoNumber());
                    odDc.setPoDate(oc.getPoDate());
                    odDc.setLocation(oc.getLocation());
                    odDc.setSubLocation(oc.getSubLocation());
                    //odDc.setCategory(oc.getCategory());
                    odDc.setQuantityDzn(oc.getQtyDzn());
                    odDc.setQuantityPcs(oc.getQtyPcs());
                    odDc.setUnit(os.getUnit());
                    odDc.setVesselDate(oc.getVesselDate());
                    odDc.setFabricDate(oc.getFabricDate());
                    this.tableList.add(odDc);
                    totalDzn += oc.getQtyDzn();
                    totalPcs += oc.getQtyPcs();
                    if (j == (ordCon.size() - 1)){
                        FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                        tot.setMonth(oc.getMonth());
                        tot.setLocation(os.getLocation());
                        tot.setQuantityDzn(totalDzn);
                        tot.setQuantityPcs(totalPcs);
                        tot.setUnit(os.getUnit());
                        this.tableList.add(tot);
                    }
                }
            }
            if (orderDetailModel == null) {
                orderDetailModel = new ListDataModel();
            }
            orderDetailModel.setWrappedData(tableList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return orderDetailModel;
    }
    
    public void DataScrollerList() {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List result = session.createQuery("from Orders where orderid like '%'").list();
            HibernateUtil.closeSession();
            for (int i = 0; i < result.size(); i ++ ){
                Orders od = (Orders) result.get(i);
                FoxyOrderList ol = new FoxyOrderList();
                ol.setOrderId(od.getOrderId());
                ol.setCountryName(od.getCountryCode());
                ol.setOrderDate(od.getOrderDate());
                ol.setCustomerName(od.getCustCode());
                this.tableList.add(ol);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    //PROPERTY: refId
    public String getRefId(){
        return this.refId;
    }
    public void setRefId(String newValue) {
        this.refId = newValue;
    }
    
    //PROPERTY: orderId
    public String getOrderId(){
        return this.orderId;
    }
    public String getOrderIdD(){
        return this.orderId;
    }
    public void setOrderId(String newValue) {
        this.orderId = newValue;
    }
    //PROPERTY: lotID
    public String getLotId(){
        return (this.month + this.location);
    }
    
    //PROPERTY: month
    public String getMonth(){
        return this.month;
    }
    public void setMonth(String newValue) {
        this.month = newValue;
    }
    
    //PROPERTY: location
    public String getLocation(){
        return this.location;
    }
    public void setLocation(String newValue) {
        this.location = newValue;
    }

    //PROPERTY: origin
    public String getOrigin(){
        return this.origin;
    }
    public void setOrigin(String newValue) {
        this.origin = newValue;
    }    

    //PROPERTY: originD
    public String getOriginD(){
        return this.originD;
    }
    public void setOriginD(String newValue) {
        this.originD = newValue;
    }        
    
    //PROPERTY: category
    public String getCategory(){
        return this.category;
    }
    public void setCategory(String newValue) {
        this.category = newValue;
    }
    
    //PROPERTY: categoryD
    public String getCategoryD(){
        return this.categoryD;
    }
    public void setCategoryD(String newValue) {
        this.categoryD = newValue;
    }
    
    //PROPERTY: importTax
    public String getImportTax(){
        return this.importTax;
    }
    public void setImportTax(String newValue) {
        this.importTax = newValue;
    }
    
    //PROPERTY: quantity
    public Double getQuantity(){
        return this.quantity;
    }
    public void setQuantity(Double newValue) {
        this.quantity = newValue;
    }
    
    //PROPERTY: qtyDzn
    public Double getQtyDzn(){
        return this.qtyDzn;
    }
    public void setQtyDzn(Double newValue) {
        this.qtyDzn = newValue;
    }
    //PROPERTY: qtyPcs
    public Double getQtyPcs(){
        return this.qtyPcs;
    }
    public void setQtyPcs(Double newValue) {
        this.qtyPcs = newValue;
    }
    //PROPERTY: unit
    public String getUnit(){
        return this.unit;
    }
    public void setUnit(String newValue) {
        this.unit = newValue;
    }
    //PROPERTY: unitc
    public String getUnitc(){
        return this.unitc;
    }
    public void setUnitc(String newValue) {
        this.unitc = newValue;
    }
    //PROPERTY: destination
    public String getDestination(){
        return this.destination;
    }
    public void setDestination(String newValue) {
        this.destination = newValue;
    }
    //PROPERTY: remark
    public String getRemark(){
        return this.remark;
    }
    public void setRemark(String newValue) {
        this.remark = newValue;
    }
    //PROPERTY: status
    public String getStatus(){
        return this.status;
    }
    public void setStatus(String newValue) {
        this.status = newValue;
    }
}
