/*
 * FoxyInvMiscCostPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.db.OrderSummary;
import java.util.Calendar;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.faces.application.FacesMessage;
import com.foxy.db.InvMiscCost;
import com.foxy.db.Supplier;
import com.foxy.data.FoxyInventoryList;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Iterator;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import com.foxy.data.InvMovementTable01;



/**
 *
 * @author hcting
 */
public class FoxyInvMiscCostPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel ListModel;
    private InvMiscCost invMiscCostBean = null;
    private String currentMode = "VIEW";
    private String orderId = null;
    private String type = null;
    
    
    /** Creates a new instance of Page */
    public FoxyInvMiscCostPage() {
        super(new String("InvMiscCostForm"));
        //System.out.println("Calling constructor now!!!!!!!!!!!!!!");
        try {
            //this.getInvMovementBean();
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public String getOrderId() {
        return orderId;
    }
    
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }
    
    public InvMiscCost getInvMiscCostBean() {
        if ( invMiscCostBean == null ){
            //System.err.println("Create new bean .....");
            invMiscCostBean = new InvMiscCost();
        }
        return invMiscCostBean;
    }
    
    public void setInvMiscCostBean(InvMiscCost invMiscCostBean) {
        this.invMiscCostBean = invMiscCostBean;
    }
    
    public String getType() {
        return type;
    }
    
    public void setType(String type) {
        this.type = type;
    }
    
    
    public InvMiscCost getEditInvMiscCostBean() {
        
        if ( this.invMiscCostBean == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria crit = session.createCriteria(InvMiscCost.class);
                crit.add(Expression.eq("id", foxySessionData.getPageParameterLong()));
                List result = crit.list();
                //System.err.println("Result size = " + result.size());
                if ( result.size() > 0 ) {
                    this.invMiscCostBean = (InvMiscCost)result.get(0);
                } else {
                    System.err.println("No Inv Misc Cost  with miscCostId = " + foxySessionData.getPageParameterLong());
                }
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }
        return invMiscCostBean;
    }
    
    
    public void setEditInvMiscCostBean(InvMiscCost invMiscCostBean) {
        this.invMiscCostBean = invMiscCostBean;
    }
    
    
    public DataModel getMiscCostList() {
        //Added in to get total row count
        Number numofRec = null;
        int firstrow = this.foxyTable.getFirst();
        int pagesize = this.foxyTable.getRows();
        ListData ld = (ListData)getBean("listData");
        
        
        if (this.searchKey != null) {
            String likestr = "%" +  this.searchKey.replace('*', '%') + "%";
            try {
                List result = null;
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                Criteria criteria = session.createCriteria(InvMiscCost.class);
                //Get Total row count
                criteria.setProjection(Projections.rowCount());
                criteria.add(Expression.like("invno", likestr));
                criteria.add(Expression.eq("type", this.type));
                numofRec = ((Number) criteria.uniqueResult());
                tx.commit();
            } catch (HibernateException e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
            
            numofRec = numofRec == null ? 0 : numofRec.intValue();
            
            
            try {
                List result = null;
                if (this.searchKey != null) {
                    Session session = (Session) HibernateUtil.currentSession();
                    Transaction tx= session.beginTransaction();
                    Criteria criteria = session.createCriteria(InvMiscCost.class);
                    criteria.add(Expression.like("invno", likestr));
                    criteria.add(Expression.eq("type", this.type));
                    criteria.addOrder(Order.asc("invdate"));
                    criteria.setFirstResult(firstrow);
                    criteria.setMaxResults(pagesize);
                    
                    result = criteria.list();
                    tx.commit();
                    for (int i = 0; i < result.size(); i ++ ){
                        InvMiscCost invmisc = (InvMiscCost) result.get(i);
                        this.tableList.add(invmisc);
                    }
                    
                    if ( ListModel != null ){
                        ListModel = null;
                    }
                    
                    ListModel = (DataModel)new FoxyPagedDataModel(this.tableList, numofRec.intValue(), pagesize);
                }
            } catch (HibernateException e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }
        return ListModel;
    }
    
    public String search() {
        this.foxySessionData.setAction(LST);
        foxyTable.setFirst(0);
        return (null);
    }
    
    
    //action for ajax call
    public String onCurCodeChange() {
        //force to reset the supplier list
        Double tmpforexrate = super.getForexRate(this.invMiscCostBean.getCurrency(), this.invMiscCostBean.getInvdate());
        
        try {
            super.resetForexRate();
            
            if ( tmpforexrate == null || this.invMiscCostBean.getValue() == null){
                this.invMiscCostBean.setBasevalue(null);
            }else{
                this.invMiscCostBean.setBasevalue(super.roundDouble(this.invMiscCostBean.getValue() * tmpforexrate,2));
            }
        } catch ( Exception e){
            e.printStackTrace();
            
        } finally {
        }
        
        return null; //Need to return null to disable page flow to take effect
    }
    
    
    public String editInvMiscCost(){
        return ("editinvmisccost");
    }
    
    
    public String editInvMiscCostDetail(){  //Refresh this bean and retrieve bean in getEditBean method
        this.foxySessionData.setPageParameterLong2(null);
        this.foxySessionData.setSessObject1(null);
        return ("editinvmisccostdetail");
    }
    
    public String saveAdd() {
        //System.out.println("Save Add ssRefId11   = [" + this.invMovementBean.getSsRefId() +"]" );
        //System.out.println("Save Add ssRefId2222 = [" + this.getSumRefId() +"]" );
        //System.out.println("Save Add ssRefI333 = [" + this.invMovementBean.getQuantity() +"]" );
        try {
            //this.invMovementBean.setSsRefId(Integer.parseInt(this.getSumRefId()));
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            this.invMiscCostBean.setForexrate((Double)(invMiscCostBean.getBasevalue()/invMiscCostBean.getValue()));
            session.save(this.invMiscCostBean);
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            e.printStackTrace();
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        //clear all recordssFs
        this.invMiscCostBean = null;
        super.setSessionObject1(null);
        this.orderId = null;
        
        return ("success");
    }
    
    
    public String saveUpd() {
        //System.err.println("!!!!!!!!!!!!!!!!!!!Save Upd");
        //System.err.println("Current Mode = " + this.currentMode);
        try {
            //System.err.println("!!!!!!!!!!! -Current SumRefId = " + this.sumRefId);
            //this.invMovementBean.setSsRefId(Integer.parseInt(this.sumRefId));
            Session session = (Session) HibernateUtil.currentSession();
            //System.err.println("Save upde11 = [" +  this.invMovementBean.getInvRefId() + "]");
            //System.err.println("Save upde22 = [" +  this.invMovementBean.getId() + "]");
            //System.err.println("Save upde33 = [" +  this.invMovementBean.getSsRefId() + "]");
            //System.err.println("Session invRefId = " + foxySessionData.getPageParameterLong2());
            Transaction tx= session.beginTransaction();
            this.invMiscCostBean.setForexrate((Double)(invMiscCostBean.getBasevalue()/invMiscCostBean.getValue()));
            session.update(this.invMiscCostBean);
            
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            e.printStackTrace();
        }finally {
            HibernateUtil.closeSession();
        }
        //clear all recordssFs
        this.invMiscCostBean = null;
        super.setSessionObject1(null);
        this.orderId = null;
        
        return ("success");
    }
    
    
    public String delete(){
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            String  qstr  = new String("DELETE InvMiscCost t ");
            qstr = qstr.concat("WHERE t.mcostid  = :pmcostid ");
            Query q = session.createQuery(qstr);
            q.setLong("pmcostid", foxySessionData.getPageParameterLong());
            q.executeUpdate();
            
            qstr  = new String("DELETE InvMiscCostDetail t ");
            qstr = qstr.concat("WHERE t.mcostid  = :pmcostid ");
            q = session.createQuery(qstr);
            q.setLong("pmcostid", foxySessionData.getPageParameterLong());
            q.executeUpdate();
            
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return (null);
        } finally {
            HibernateUtil.closeSession();
        }
        
        return null;
    }
    
}
