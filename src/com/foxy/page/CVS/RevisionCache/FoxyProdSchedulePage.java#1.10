/*
 * FoxyCustomerPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;


import java.util.LinkedHashSet;
import java.util.TreeMap;
import java.util.Set;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import com.foxy.db.ProdSchedule;
import com.foxy.db.ProdScheduleLots;
import com.foxy.db.ProdScheduleJoinLots;
import com.foxy.db.Orders;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import java.util.ArrayList;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.faces.component.UIData;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;
import org.hibernate.transform.AliasToBeanResultTransformer;


/**
 *
 * @author hcting
 */
public class FoxyProdSchedulePage extends Page implements Serializable{
    
    private static String MENU_CODE = new String("FOXY");
    
    private final Integer OUTERCOLCOUNT = 6;
    private String status = null;
    private String addLotStat = null;
    private ProdSchedule prodSchBean = null;
    private ProdScheduleLots prodLotBean = null;
    private TreeMap<String,ProdScheduleLots> lotsMap = null;
    private List lotsListItems = null;
    private String[] selectedLots = null;
    
//User for listing in tables
    private UIData outerTable = null;
    private DataModel  outerRowBeanModel = null;
    private DataModel  prodschJoinLotsBeanModel = null;
    
    private List<OuterTblRowBean>  outerRowBeanList = null;
    private List<ProdScheduleJoinLots> prodschJoinLotsBeanList = null;
    
    
    
    /**
     *
     * @author hcting
     */
    //Inner class start
    public class OuterTblRowBean {
        private String atest = "testing data";
        private DataModel col0 = null;
        private DataModel col1 = null;
        private DataModel col2 = null;
        private DataModel col3 = null;
        private DataModel col4 = null;
        private DataModel col5 = null;
        
        public OuterTblRowBean() {
        }
        
        
        
        public String getAtest(){
            return atest;
        }
        
        public DataModel getCol0(){
            return this.col0;
        }
        public void setCol0(DataModel  col){
            this.col0 = col;
        }
        
        
        public DataModel getCol1(){
            return this.col1;
        }
        
        public void setCol1(DataModel  col){
            this.col1 = col;
        }
        
        
        public DataModel getCol2(){
            return this.col2;
        }
        public void setCol2(DataModel  col){
            this.col2 = col;
        }
        
        
        public DataModel getCol3(){
            return this.col3;
        }
        public void setCol3(DataModel  col){
            this.col3 = col;
        }
        
        
        public DataModel getCol4(){
            return this.col4;
        }
        public void setCol4(DataModel  col){
            this.col4 = col;
        }
        
        
        public DataModel getCol5(){
            return this.col5;
        }
        public void setCol5(DataModel  col){
            this.col5 = col;
        }
    };
//Inner class End
    
    
    
    
    
    /** Creates a new instance of FoxyCustomerPage */
    public FoxyProdSchedulePage() {
        super(new String("ProdScheduleForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        if ( this.prodSchBean == null ) {
            this.prodSchBean = new  ProdSchedule();
        }
        
    }
    
    public List getLotsListItems(){
        if ( this.lotsListItems == null) {
            this.lotsListItems =  new ArrayList();
        } else {
            this.lotsListItems.clear();
        }
        
        if ( lotsMap != null) {
            ProdScheduleLots lotobj = null;
            Set st = lotsMap.entrySet();
            Iterator it = st.iterator();
            try {
                while( it.hasNext()){
                    Map.Entry me = (Map.Entry)it.next();
                    lotobj = (ProdScheduleLots)me.getValue();
                    lotsListItems.add(new SelectItem(me.getKey(), lotobj.listDisplayFormat()));
                }
            } catch ( Exception e) {
                e.printStackTrace();
            }
        }
        return lotsListItems;
    }
    
    
    public TreeMap<String, ProdScheduleLots> getLotsMap() {
        if ( this.lotsMap == null ) {
            this.lotsMap = new  TreeMap();
        }
        return lotsMap;
    }
    
    public void setLotsMap(TreeMap<String, ProdScheduleLots> lotsMap) {
        this.lotsMap = lotsMap;
    }
    
    
    public String[] getSelectedLots() {
        return selectedLots;
    }
    
    public void setSelectedLots(String[] selectedLots) {
        this.selectedLots = selectedLots;
    }
    
    public String getAddLotStat() {
        return addLotStat;
    }
    
    public void setAddLotStat(String addLotStat) {
        this.addLotStat = addLotStat;
    }
    
    
    public ProdSchedule getProdSchBean(){
        return this.prodSchBean;
    }
    
    public void setProdSchBean(ProdSchedule prodSchBean) {
        this.prodSchBean = prodSchBean;
    }
    
    public ProdScheduleLots getProdLotBean() {
        if ( this.prodLotBean == null){
            prodLotBean = new ProdScheduleLots();
        }
        return prodLotBean;
    }
    
    public void setProdLotBean(ProdScheduleLots prodLotBean) {
        this.prodLotBean = prodLotBean;
    }
    
    
    public DataModel getOuterRowBeanModel() {
        System.err.println("Calling get  Outer Row Bean list ...");
        if ( this.outerRowBeanList == null){
            this.outerRowBeanList = new ArrayList();
            //For every 6 cols need to create a additional row bean
            
            //this.outerRowBeanList.add(new OuterTblRowBean());
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                //Get all line no selected --START
                String  qstr  = new String("Select Distinct lineNo from ProdSchedule ");
                qstr = qstr.concat("Where ccode = :pccode ");
                if ( this.prodSchBean.getSewStart() != null) {
                    qstr = qstr.concat("AND sewStart >= :psewStart ");
                }
                
                if ( this.prodSchBean.getSewEnd() != null) {
                    qstr = qstr.concat("AND sewEnd <= :psewEnd ");
                }
                qstr = qstr.concat("Order by lineNo ");
                Query q = session.createQuery(qstr);
                
                q.setString("pccode",this.prodSchBean.getCcode());
                if ( this.prodSchBean.getSewStart() != null) {
                    q.setDate("psewStart", this.prodSchBean.getSewStart());
                }
                if ( this.prodSchBean.getSewEnd() != null) {
                    q.setDate("psewEnd", this.prodSchBean.getSewEnd());
                }
                
                Set result = new LinkedHashSet(q.list());
                Iterator it = result.iterator();
                Long lineNo = null;
                Integer linecount = 0;
                Integer colcount = 0;
                OuterTblRowBean orb = null;
                try {
                    while( it.hasNext()){
                        //Proccess curren line no
                        lineNo = (Long)it.next();
                        
                        //Select all data based on use condition
                        Criteria crit = session.createCriteria(ProdScheduleJoinLots.class);
                        crit.add(Expression.eq("ccode", this.prodSchBean.getCcode()));
                        
                        if ( this.prodSchBean.getSewStart() != null) {
                            crit.add(Expression.ge("sewStart", this.prodSchBean.getSewStart()));
                        }
                        
                        if ( this.prodSchBean.getSewEnd() != null) {
                            crit.add(Expression.le("sewEnd", this.prodSchBean.getSewEnd()));
                        }
                        
                        crit.add(Expression.eq("lineNo", lineNo));//Only select specific lineNo only
                        
                        List ret = crit.list();
                        
                        //wrap list in datamodel
                        DataModel dm = new ListDataModel();
                        dm.setWrappedData(ret);
                        
                        //Logic to decide which column to put
                        colcount = linecount % OUTERCOLCOUNT; //Decide which column to build
                        switch (colcount) {
                            case 0:
                                //New Row bean when encounter colcount = 0
                                if ( orb != null ){ //add to Outer table row list b4 create a new one
                                    outerRowBeanList.add(orb);
                                }
                                orb = new OuterTblRowBean();
                                orb.setCol0(dm);
                                break;
                            case 1:
                                orb.setCol1(dm);
                                break;
                            case 2:
                                orb.setCol2(dm);
                                break;
                            case 3:
                                orb.setCol3(dm);
                                break;
                            case 4:
                                orb.setCol4(dm);
                                break;
                            case 5:
                                orb.setCol5(dm);
                                break;
                            default:
                                break;
                        } //End switch
                        System.err.println("====>Line no selected = [" + lineNo + "]");
                        
                        linecount++; //Keep a total of lineno selected
                    }//end while
                    
                    if ( orb != null ){ //add to outer table row list if not null (can be half filled)
                        outerRowBeanList.add(orb);
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }finally {
                    
                }//End try
                //Get all line no selected --END
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                //HibernateUtil.closeSession();  Can't close for lazy join tables
            }
        }
        
        if ( outerRowBeanModel == null){
            outerRowBeanModel = new ListDataModel();
            outerRowBeanModel.setWrappedData(outerRowBeanList);
        }
        return outerRowBeanModel;
    }
    
    
    
    public UIData getOuterTable() {
        return outerTable;
    }
    
    public void setOuterTable(UIData outerTable) {
        this.outerTable = outerTable;
    }
    
    
    
    
    
    
    
    public String saveAdd() {
        System.out.println("Save Add");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            session.save(this.prodSchBean);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            Criteria crit = session.createCriteria(ProdSchedule.class);
            crit.add(Expression.eq("ccode", this.prodSchBean.getCcode()));
            crit.add(Expression.eq("lineNo", this.prodSchBean.getLineNo()));
            crit.add(Expression.eq("refNo", this.prodSchBean.getRefNo()));
            crit.add(Expression.eq("sewStart", this.prodSchBean.getSewStart()));
            crit.add(Expression.eq("sewEnd", this.prodSchBean.getSewEnd()));
            List result = crit.list();
            if ( result.size() > 0 ) {
                this.prodSchBean  = (ProdSchedule)result.get(0);
            } else {
                System.err.println("Failed to save prod schedule bean previously, add lot aborted");
            }
            
            
            if ( lotsMap != null) {
                ProdScheduleLots lotobj = null;
                Set st = lotsMap.entrySet();
                Iterator it = st.iterator();
                while( it.hasNext()){
                    Map.Entry me = (Map.Entry)it.next();
                    lotobj = (ProdScheduleLots)me.getValue();
                    lotobj.setProdSchId(this.prodSchBean.getProdSchId());
                    session.save(lotobj);
                }
            }
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return ("success");
    }
    
    public String saveEdit() {
        System.out.println("Save Edit");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            session.update(this.prodSchBean);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return ("success");
    }
    
    
    
    //Delete selected sub ref number from list
    public String delLotsListItem() {
        try {
            for ( int i = 0; i < selectedLots.length; i++) {
                lotsMap.remove(selectedLots[i]);
            }
        }catch ( Exception e){
            e.printStackTrace();
        }finally {
            
        }
        return null;
    }
    
    
    //add sub ref no into list
    public String onAddSubRefNo() {
        if ( this.prodLotBean.getLot() == null || this.prodLotBean.getLot().length() == 0){
            this.addLotStat = "Failed to add lot into list, Lot can not Empty";
        } else if (this.prodLotBean.getVesselDate() == null ){
            this.addLotStat = "Failed to add lot into list, Vessel date  required";
        } else {
            lotsMap.put(new String(this.prodLotBean.getLot()),
                    new  ProdScheduleLots(this.prodLotBean.getLot(), this.prodLotBean.getVesselDate()));
            this.addLotStat = null;
        }
        return null;
    }
    
    
    //Validate ref no to ensure it exist in database
    public String onRefNoChange(){
        System.err.println("Ajax call onRefNoChange, refno = " + this.prodSchBean.getRefNo() + "]");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            Criteria crit = session.createCriteria(Orders.class);
            crit.add(Expression.eq("orderId", this.prodSchBean.getRefNo()));
            List result = crit.list();
            if ( result.size() == 0 ) {
                status = "Record [" + this.prodSchBean.getRefNo() + "] does not exist!!!";
            } else {
                
                System.err.println("Ajax called ...");
                status = null;
            }
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return (null); //Must return null, else Ajax would not work
    }
    
    public String getCheckStatus(){
        return this.status;
    }
    public void setCheckStatus(String str){
        this.status = str;
    }
    
    public boolean isStatusOk(){
        if ( status == null) {
            return true;
        } else {
            return false;
        }
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        foxyTable.setFirst(0);
        return (null);
    }
    
    
    public DataModel getProdschJoinLotsBeanModel() {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            Criteria crit = session.createCriteria(ProdScheduleJoinLots.class);
            crit.add(Expression.eq("ccode", this.prodSchBean.getCcode()));
            
            if ( this.prodSchBean.getSewStart() != null) {
                crit.add(Expression.ge("sewStart", this.prodSchBean.getSewStart()));
            }
            
            if ( this.prodSchBean.getSewEnd() != null) {
                crit.add(Expression.le("sewEnd", this.prodSchBean.getSewEnd()));
            }
            
            prodschJoinLotsBeanList = crit.list();
            tx.commit();
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            //HibernateUtil.closeSession();  Can't close for lazy join tables
        }
        
        if ( prodschJoinLotsBeanList.size() > 0){
            if ( prodschJoinLotsBeanModel == null){
                prodschJoinLotsBeanModel = new ListDataModel();
            }
            prodschJoinLotsBeanModel.setWrappedData(prodschJoinLotsBeanList);
        }
        return prodschJoinLotsBeanModel;
    }
    
}
