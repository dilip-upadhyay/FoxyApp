/*
 * FoxyFactoryYearlyReportPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import javax.faces.application.FacesMessage;
import com.foxy.db.Orders;
import com.foxy.db.OrderSummary;
import com.foxy.db.CustDivision;
import com.foxy.db.Parameter;
import com.foxy.db.Customer;
import com.foxy.db.CustBrand;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;
import java.util.Calendar;
import org.hibernate.SQLQuery;


/**
 *
 * @author hcting
 */
public class FoxyCustomerSalesReportPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel custSalesListModel;
    private List  divisionList = null;
    private String country = null;
    private String custCode = null;
    private String custDivision = null;
    private String brand = null;
    private String season = null;
    private Integer year = null;
    private Integer month = null;
    
    private String title = new String("");
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat fmt3 =  new SimpleDateFormat("MMMM yyyy");
    private List resultList = null;  //List of brand for current custcode
    private List brandList = null;
    
    
    public class ReportDataBean {
        
        private String country = null;
        private String refNo = null;
        private String month = null;
        private String location = null;
        private String customer = null;
        private String brand = null;
        private String division = null;
        private Date orderDate = null;
        private Date deliveryDate = null;
        private Date fabricDate = null;
        private String updatedBy = null;
        private String style = null;
        private Double unitPrice = null;
        private Double qtyd = null;
        private Double qtyp = null;
        private Double totalValue = null;
        private String qunit = null;
        private String season = null;
        private String desc = null;
        
        public String getCountry() {
            return country;
        }
        
        public void setCountry(String country) {
            this.country = country;
        }
        
        public String getCustomer() {
            return customer;
        }
        
        public void setCustomer(String customer) {
            this.customer = customer;
        }
        
        public String getBrand() {
            return brand;
        }
        
        public void setBrand(String brand) {
            this.brand = brand;
        }
        
        
        public String getDivision() {
            return division;
        }
        
        public void setDivision(String division) {
            this.division = division;
        }
        
        public String getLocation() {
            return location;
        }
        
        public void setLocation(String location) {
            this.location = location;
        }
        
        public String getMonth() {
            return month;
        }
        
        public void setMonth(String month) {
            this.month = month;
        }
        
        public Date getOrderDate() {
            return orderDate;
        }
        
        public void setOrderDate(Date orderDate) {
            this.orderDate = orderDate;
        }
        
        public Date getDeliveryDate() {
            return deliveryDate;
        }
        
        public void setDeliveryDate(Date deliveryDate) {
            this.deliveryDate = deliveryDate;
        }
        
        public void setFabricDate(Date fabricDate) {
            this.fabricDate = fabricDate;
        }
        
        public Date getFabricDate() {
            return fabricDate;
        }
        
        public void setUpdatedBy(String updatedBy) {
            this.updatedBy = updatedBy;
        }
        
        public String getUpdatedBy() {
            return updatedBy;
        }
        
        
        public Double getQtyd() {
            return qtyd;
        }
        
        public void setQtyd(Double qtyd) {
            this.qtyd = qtyd;
        }
        
        public void accumulateQtyD(Double qty){
            if ( qty != null){
                if ( this.qtyd == null){
                    this.qtyd = qty;
                }else
                    this.qtyd +=  qty;
            }
        }
        
        public Double getQtyp() {
            return qtyp;
        }
        
        public void setQtyp(Double qtyp) {
            this.qtyp = qtyp;
        }
        
        public void accumulateQtyP(Double qty){
            if ( qty != null){
                if ( this.qtyp == null){
                    this.qtyp = qty;
                }else{
                    this.qtyp += qty;
                }
            }
        }
        
        public String getQunit() {
            return qunit;
        }
        
        public void setQunit(String qunit) {
            this.qunit = qunit;
        }
        
        public String getRefNo() {
            return refNo;
        }
        
        public void setRefNo(String refNo) {
            this.refNo = refNo;
        }
        
        public String getSeason() {
            return season;
        }
        
        public void setSeason(String season) {
            this.season = season;
        }
        
        public String getStyle() {
            return style;
        }
        
        public void setStyle(String style) {
            this.style = style;
        }
        
        public Double getUnitPrice() {
            return unitPrice;
        }
        
        public void setUnitPrice(Double unitPrice) {
            this.unitPrice = unitPrice;
        }
        
        public Double getTotalValue() {
            return totalValue;
        }
        
        public void setTotalValue(Double totalValue) {
            this.totalValue = totalValue;
        }
        
        public void setTotalValue(Double unitprc, Double qtypcs) {
            if ( unitprc != null  && qtypcs != null){
                this.totalValue = unitprc * qtypcs;
            }
        }
        
        public void accumulateTotalValue(Double val){
            if ( val  !=  null){
                if ( this.totalValue == null){
                    this.totalValue = val;
                }else{
                    this.totalValue += val;
                }
            }
        }
        
        //Additional method for logic build in
        public Double  getDisplayQty(){
            if ( "PCS".equals(this.qunit) ){ //If pieces then take pcs quantity
                return this.qtyp;
            }else {
                return this.qtyd;
            }
        }
        
        public String getDesc() {
            return desc;
        }
        
        public void setDesc(String desc) {
            this.desc = desc;
        }
        
        
    }; //Inner class end
    
    
    
    
    public FoxyCustomerSalesReportPage() {
        super(new String("CustomerOrderReportForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public String getCustCode() {
        return custCode;
    }
    
    public void setCustCode(String custCode) {
        this.custCode = custCode;
    }
    
    public String getCustDivision() {
        return custDivision;
    }
    
    public void setCustDivision(String custDivision) {
        this.custDivision = custDivision;
    }
    
    public String getBrand() {
        return brand;
    }
    
    public void setBrand(String brand) {
        this.brand = brand;
    }
    
    public String getSeason() {
        return season;
    }
    
    public void setSeason(String season) {
        this.season = season;
    }
    
    
    public Integer getYear() {
        return year;
    }
    
    public void setYear(Integer year) {
        this.year = year;
    }
    
    public Integer getMonth() {
        return month;
    }
    
    public void setMonth(Integer month) {
        this.month = month;
    }
    
    
    
//PROPERTY: country
    public String getCountryName(){
        ListData ld = (ListData)getBean("listData");
        return(ld.getCountryDesc(this.getCountry(), 0));
        //return this.country;
    }
    
    public String getTitle() {
        
        if (  this.country != null){
            title = title + "For [" + this.getCountryName() + "] ";
        }
        
        if ( this.custCode != null  && this.custCode.length() > 0 ) {
            title = title + "CustCode [" + this.custCode + "] ";
        }
        
        if ( this.custDivision != null  && this.custDivision.length() > 0) {
            title = title + "Division [" + this.custDivision + "] ";
        }
        
        if ( this.year != null && this.month != null){
            title = "[" + fmt3.format(this.getFromDate()) + "] " + title;
        }else {
            
            if ( this.getFromDate() != null ) {
                title = title + "Delivery Date From [" + fmt1.format(this.getFromDate()) + "] ";
            }
            
            if ( this.getToDate() != null ) {
                title = title + "To [" + fmt1.format(this.getToDate()) + "] ";
            }
        }
        
        title = title + "  As At [" + fmt2.format(new Date()) + "]";
        
        
        return title;
    }
    
    
    
    
//Ajax used to get list of devision of current customer code.
    public  List getDivisionItemsList() {
        if ( divisionList == null){
            divisionList = new ArrayList();
            
            if ( this.custCode != null && this.brand != null ) { //customer code
                List resultList = null;
                try {
                    Session session = (Session) HibernateUtil.currentSession();
                    Transaction tx= session.beginTransaction();
                    Criteria crit = session.createCriteria(CustDivision.class);
                    crit.add(Expression.eq("custCode", this.custCode));
                    crit.add(Expression.eq("brandCode", this.brand));
                    resultList = crit.list();
                    tx.commit();
                } catch (HibernateException e) {
                    //do something here with the exception
                    e.printStackTrace();
                    FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                    ctx.addMessage(null, fmsg);
                } finally {
                    HibernateUtil.closeSession();
                }
                
                if ( resultList.size() > 0){
                    divisionList.add(new SelectItem(new String(""), new String("Pls select one"))); //Always add a null items, event no records
                }else {
                    divisionList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
                }
                
                for (int i = 0; i < resultList.size(); i ++) {
                    CustDivision cdivision = (CustDivision)resultList.get(i);
                    divisionList.add(new SelectItem(cdivision.getDivCode(), cdivision.getDivCode() + " - " + cdivision.getDivDesc()));
                }
            }else {
                divisionList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
            }
        }
        return divisionList;
    }
    
    public List getBrandItemsList(){
        return getBrandItemsListGeneric(this.getCustCode());
    }
    
    public List getBrandItemsListGeneric(String currentcustcode){
        
        //System.err.println("===>get bean list now");
        brandList = null;
        brandList = new ArrayList();
        brandList.add(new SelectItem(new String(""), new String(""))); //Always add a null items, event no records
        
        
        if ( currentcustcode != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria crit = session.createCriteria(CustBrand.class);
                //System.err.println("custCode = " + currentcustcode);
                crit.add(Expression.eq("custCode", currentcustcode));
                resultList = crit.list();
                //System.err.println("Result size = " + resultList.size());
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
            
            
            for (int i = 0; i < this.resultList.size(); i ++) {
                CustBrand cbrand = (CustBrand) this.resultList.get(i);
                brandList.add(new SelectItem(cbrand.getBrandCode(), cbrand.getBrandCode() + " - " + cbrand.getBrandDesc()));
            }
        }
        
        return brandList;
    }
    
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        
        if ( this.year != null && this.month != null){
            Calendar cal = Calendar.getInstance();
            // This is the right way to set the month
            cal.set(Calendar.YEAR,   this.year );
            cal.set(Calendar.MONTH, (this.month - 1) );
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
            
            //this.fromDate = cal.getTime();
            this.setFromDate(cal.getTime());
            
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
            //this.toDate = cal.getTime();
            this.setToDate(cal.getTime());
        }
        return (null);
    }
    
    
////////////////////////////////////////////////////////
    public DataModel getCustSalesListModel(){
        List<ReportDataBean>  custOderList = null;
        if ( this.country != null){
            try {
                //System.err.println("Search for records " +  this.country + "  " + this.custCode + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                String qstr = "Select ord.custcode as custcode, ord.custbrand as custbrand, ord.custdivision as custdiv, ";
                qstr = qstr + " pm.description as cntry, os.orderid as orderid,  os.month as month, os.location as location, ";
                qstr = qstr + " os.qtydzn as qtydzn, os.qtypcs as qtypcs, ord.stylecode as stylecode, pm2.description as season , ";
                qstr = qstr + " ord.orderdate as orddate, os.delivery as delivery, ";
                qstr = qstr + " os.fabricdate as fabricdate, os.updusrid as updatedby, ";
                qstr = qstr + " ord.unitprice  as unitprice, SUBSTRING(ord.descf,1,20) as descf ";
                qstr = qstr + " from  ordsummary os ";
                qstr = qstr + " LEFT JOIN orders ord ON os.orderid = ord.orderid ";
                qstr = qstr + " LEFT JOIN parameter  pm ON os.origin = pm.code AND pm.category = 'CNTY' ";
                qstr = qstr + " LEFT JOIN parameter  pm2 ON pm2.category = 'SEA' AND pm2.code = ord.season ";
                qstr = qstr + " where 1 = 1 ";
                
                if (  this.country != null){
                    qstr = qstr + " AND  os.origin = :porigin ";
                }
                
                if ( this.custCode != null  && this.custCode.length() > 0 ) {
                    qstr = qstr + " AND ord.custCode = :pcustCode ";
                }
                
                if ( this.custDivision != null  && this.custDivision.length() > 0) {
                    qstr = qstr + " AND ord.custDivision = :pcustDivision ";
                }
                
                if ( this.brand != null  && this.brand.length() > 0) {
                    qstr = qstr + " AND ord.custBrand = :pcustBrand ";
                }
                
                if ( this.season != null  && this.season.length() > 0) {
                    qstr = qstr + " AND ord.season = :pseason ";
                }
                
                
                if ( this.getFromDate() != null ) {
                    qstr = qstr + " AND os.delivery >= :pdeliveryDateFrom ";
                }
                
                if ( this.getToDate() != null ) {
                    qstr = qstr + " AND os.delivery <= :pdeliveryDateTo ";
                }
                
                qstr = qstr + " Order by ord.custCode, ord.custBrand, ord.custDivision, os.orderId,  os.month, os.location ";
                
                
                //System.err.println("Search qstr  = " + qstr);
                
                
                SQLQuery q = session.createSQLQuery(qstr);
                
                
                //Set all parameter value if applicable
                if (  this.country != null){
                    q.setString("porigin", this.country);
                }
                
                if ( this.custCode != null && this.custCode.length() > 0) {
                    q.setString("pcustCode", this.custCode);
                }
                
                if ( this.custDivision != null && this.custDivision.length() > 0) {
                    q.setString("pcustDivision", this.custDivision);
                }
                
                if ( this.brand != null  && this.brand.length() > 0) {
                    q.setString("pcustBrand", this.brand);
                }
                
                if ( this.season != null  && this.season.length() > 0) {
                    q.setString("pseason", this.season);
                }
                
                if ( this.getFromDate() != null ) {
                    q.setDate("pdeliveryDateFrom", this.getFromDate());
                }
                
                if ( this.getToDate() != null ) {
                    q.setDate("pdeliveryDateTo", this.getToDate());
                }
                
                
                q.addScalar("custcode", Hibernate.STRING);
                q.addScalar("custbrand", Hibernate.STRING);
                q.addScalar("custdiv", Hibernate.STRING);
                q.addScalar("cntry", Hibernate.STRING);
                q.addScalar("orderid", Hibernate.STRING);
                q.addScalar("month", Hibernate.STRING);
                q.addScalar("location", Hibernate.STRING);
                q.addScalar("qtydzn", Hibernate.DOUBLE);
                q.addScalar("qtypcs", Hibernate.DOUBLE);
                q.addScalar("stylecode", Hibernate.STRING);
                q.addScalar("season", Hibernate.STRING);
                q.addScalar("orddate", Hibernate.DATE);
                q.addScalar("delivery", Hibernate.DATE);
                q.addScalar("fabricdate", Hibernate.DATE);
                q.addScalar("updatedby", Hibernate.STRING);
                q.addScalar("unitprice", Hibernate.DOUBLE);
                q.addScalar("descf", Hibernate.STRING);
                
                
                //custOderList = q.list();
                Iterator it = q.list().iterator();
                if ( custOderList == null){
                    custOderList = new ArrayList();
                }
                
                //System.err.println("Search for records 2222");
                
                ReportDataBean subTotal = new  ReportDataBean();
                ReportDataBean grandTotal = new  ReportDataBean();
                grandTotal.setQtyd(new  Double(0));
                grandTotal.setQtyp(new  Double(0));
                Double d1 = null;
                Double d2 = null;
                
                while (it.hasNext()){
                    Object[] tmpRow = (Object[])it.next();
                    int i = 0;
                    //System.err.println("Search for records 333");
                    ReportDataBean obj = new  ReportDataBean();
                    try {
                        obj.setCustomer((String)tmpRow[i++]);
                        obj.setBrand((String)tmpRow[i++]);
                        obj.setDivision((String)tmpRow[i++]);
                        obj.setCountry((String)tmpRow[i++]);
                        obj.setRefNo((String)tmpRow[i++]);
                        obj.setMonth((String)tmpRow[i++]);
                        obj.setLocation((String)tmpRow[i++]);
                        obj.setQtyd((Double)tmpRow[i++]);
                        d1 = (Double)tmpRow[i++];
                        obj.setQtyp(d1);
                        obj.setStyle((String)tmpRow[i++]);
                        obj.setSeason((String)tmpRow[i++]);
                        obj.setOrderDate((Date)tmpRow[i++]);
                        obj.setDeliveryDate((Date)tmpRow[i++]);
                        obj.setFabricDate((Date)tmpRow[i++]);
                        obj.setUpdatedBy((String)tmpRow[i++]);
                        d2 = (Double)tmpRow[i++];
                        obj.setUnitPrice(d2);
                        obj.setDesc((String)tmpRow[i++]);
                        obj.setTotalValue(d2, d1);
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                    
                    
                    
                    //System.err.println("Search for records3332222");
                    try {
                        if (   !obj.getCustomer().equals(subTotal.getCustomer())  ||
                                !obj.getBrand().equals(subTotal.getBrand())       ||
                                !obj.getDivision().equals(subTotal.getDivision()) ) {
                            subTotal.setCustomer(new String("Sub Total"));
                            subTotal.setBrand(null);
                            subTotal.setDivision(null);
                            if ( custOderList.size() > 0 ){ //First item can not be total
                                custOderList.add(subTotal);
                                grandTotal.accumulateQtyD(subTotal.getQtyd());
                                grandTotal.accumulateQtyP(subTotal.getQtyp());
                                grandTotal.accumulateTotalValue(subTotal.getTotalValue());
                            }
                            subTotal = new  ReportDataBean();
                        }
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                    
                    //System.err.println("Search for records33344444");
                    
                    
                    if ( subTotal.getCustomer() == null){
                        subTotal.setCustomer(obj.getCustomer());
                        subTotal.setBrand(obj.getBrand());
                        subTotal.setDivision(obj.getDivision());
                    }
                    
                    
                    custOderList.add(obj);
                    
                    //System.err.println("Search for records 555555");
                    //Accumulate sub total
                    if (subTotal.getQtyp() == null) {
                        subTotal.setQtyp(obj.getQtyp());
                        subTotal.setQtyd(obj.getQtyd());
                        subTotal.setTotalValue(d2, d1 );
                    } else {
                        subTotal.accumulateQtyP(obj.getQtyp());
                        subTotal.accumulateQtyD(obj.getQtyd());
                        if ( d1 != null && d2 != null ){
                            subTotal.accumulateTotalValue(d1 * d2);
                        }
                    }
                    
                }
                
                if ( custOderList.size() > 0 ){ //First item can not be total
                    
                    //Add in subtotal for last group
                    subTotal.setCustomer(new String("Sub Total"));
                    subTotal.setBrand(null);
                    subTotal.setDivision(null);
                    custOderList.add(subTotal);
                    
                    //Add in grand total
                    grandTotal.accumulateQtyD(subTotal.getQtyd());
                    grandTotal.accumulateQtyP(subTotal.getQtyp());
                    grandTotal.accumulateTotalValue(subTotal.getTotalValue());
                    grandTotal.setCustomer(new String("Grand Total"));
                    grandTotal.setBrand(null);
                    grandTotal.setDivision(null);
                    custOderList.add(grandTotal);
                }
                
                
                //System.err.println("Search for records 111, size = " + custOderList.size());
                custSalesListModel = null;
                custSalesListModel = new ListDataModel();
                if (custOderList.size() == 0) {
                    ReportDataBean os = new ReportDataBean();
                    custOderList.add(os);
                }
                
                custSalesListModel.setWrappedData(custOderList);
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        return custSalesListModel;
    }
    
}



