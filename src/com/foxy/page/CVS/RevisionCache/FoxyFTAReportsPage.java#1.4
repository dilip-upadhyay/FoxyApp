/*
 * FoxyFTAReportsPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.faces.application.FacesMessage;
import com.foxy.db.Shipping;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyFTAReportsPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel dataListModel;
    private String country = null;
    private String shipStat = null;
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private SimpleDateFormat fmt3 =  new SimpleDateFormat("MMMM yyyy");
    
    
    public class ReportDataBean {
        private String refNo = null;
        private String cat = null;
        private String dest = null;
        private Date etd = null;
        private Date closedate = null;
        private Double qtyDzn = null;
        private Double qtyPcs = null;
        private String po = null;
        private String styleCode = null;
        private String custCode = null;
        private String custBrand = null;
        private String custDiv = null;
        
        public String getRefNo() {
            return refNo;
        }
        
        public void setRefNo(String refNo) {
            this.refNo = refNo;
        }
        
        public String getCat() {
            return cat;
        }
        
        public void setCat(String cat) {
            this.cat = cat;
        }
        
        public Date getClosedate() {
            return closedate;
        }
        
        public void setClosedate(Date closedate) {
            this.closedate = closedate;
        }
        
        public String getDest() {
            return dest;
        }
        
        public void setDest(String dest) {
            this.dest = dest;
        }
        
        public Date getEtd() {
            return etd;
        }
        
        public void setEtd(Date etd) {
            this.etd = etd;
        }
        
        public Double getQtyDzn() {
            return qtyDzn;
        }
        
        public void accumulateQtyDzn(Double qty){
            if ( qty != null ){
                if ( this.qtyDzn != null){
                    this.qtyDzn += qty;
                } else {
                    this.qtyDzn = qty;
                }
            }
        }
        
        
        public void setQtyDzn(Double qtyDzn) {
            this.qtyDzn = qtyDzn;
        }
        
        public Double getQtyPcs() {
            return qtyPcs;
        }
        
        public void accumulateQtyPcs(Double  qty){
            if ( qty != null ){
                if ( this.qtyPcs != null){
                    this.qtyPcs += qty;
                } else {
                    this.qtyPcs = qty;
                }
            }
        }
        
        public void setQtyPcs(Double qtyPcs) {
            this.qtyPcs = qtyPcs;
        }
        
        public String getCustCode() {
            return custCode;
        }
        
        public void setCustCode(String custCode) {
            this.custCode = custCode;
        }
        
        public String getCustBrand() {
            return custBrand;
        }
        
        public void setCustBrand(String custBrand) {
            this.custBrand = custBrand;
        }
        
        public String getCustDiv() {
            return custDiv;
        }
        
        public void setCustDiv(String custDiv) {
            this.custDiv = custDiv;
        }
        
        public String getPo() {
            return po;
        }
        
        public void setPo(String po) {
            this.po = po;
        }
        
        public String getStyleCode() {
            return styleCode;
        }
        
        public void setStyleCode(String styleCode) {
            this.styleCode = styleCode;
        }
    }; //Inner class end
    
    
    public FoxyFTAReportsPage() {
        super(new String("FTAReportForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public String getTitle(){
        String str = " ";
        str +=  "(" + this.getCountryName() + ") ";
        str +=  "Close Date From [" +  fmt1.format(this.getFromDate()) + "] ";
        str +=  "To [" +  fmt1.format(this.getToDate()) + "] ";
        str +=  "Ship status [" +  this.getShipStat() + "] ";
        str +=  "As At [" +  fmt2.format(new Date()) + "] ";
        return str;
    }
    
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public String getCountryName(){
        ListData ld = (ListData)getBean("listData");
        return(ld.getCountryDesc(this.getCountry(), 0));
        //return this.country;
    }
    
    public String getShipStat() {
        return shipStat;
    }
    
    public void setShipStat(String shipStat) {
        this.shipStat = shipStat;
    }
    
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        return (null);
    }
    
    public DataModel getFtaReportData(){
        List<ReportDataBean>  recordList = null;
        if ( this.country != null){
            try {
                //System.err.println("Search for records " +  this.country + "  " + this.quota + " " + this.getFromDate() + " " + this.getToDate());
                SQLQuery q = null;
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                
                String qstr = " SELECT CONCAT(oc.orderid, oc.month, oc.location, oc.sublocation) as refno, ";
                qstr += "  oc.closedate as closedate, oc.ponumber as po, ";
                qstr += "  pr.shortdesc as destination,  ";
                qstr += "  od.custcode as custcode, od.custbrand as custbrand, od.custdivision as custdiv, ";
                qstr += "  od.stylecode as stylecode, ";
                qstr += "  cat.category as category,  ";
                qstr += "  sh.etd as etd, sh.qtypcs as qpcs, sh.qtydzn as qdzn ";
                qstr += "  FROM ordconfirm oc ";
                qstr += "  LEFT JOIN ordsummary os ON os.srefid = oc.srefid ";
                qstr += "  LEFT JOIN orders od ON od.orderid = oc.orderid ";
                qstr += "  LEFT JOIN category cat ON cat.catid = os.catid ";
                qstr += "  LEFT JOIN shipping sh ON sh.crefid = oc.crefid ";
                qstr += "  LEFT JoIN parameter pr ON pr.category = 'DEST' AND pr.code = os.destination ";
                qstr += "  WHERE oc.closedate >= :pdateStart AND oc.closedate <= :pdateEnd  " ;
                qstr += "  AND sh.shipstat = :shipstat ";
                qstr += "  AND oc.make = :porigin ";
                qstr += "  AND os.importtax = 'FTA' ";
                qstr += "  AND oc.status != 'D' ";
                qstr += "  ORDER BY refno, closedate ";
                
                //System.err.println("Test 1111111122222");
                q = session.createSQLQuery(qstr);
                //System.err.println("Test 1111111122222333333");
                q.setString("porigin", this.country);
                q.setDate("pdateStart", this.getFromDate());
                q.setDate("pdateEnd",this.getToDate());
                q.setString("shipstat",this.getShipStat());
                
                
                //add scalar
                //line 1
                q.addScalar("refno", Hibernate.STRING);
                //line 2
                q.addScalar("closedate", Hibernate.DATE);
                q.addScalar("po", Hibernate.STRING);
                //line 3
                q.addScalar("destination", Hibernate.STRING);
                //line 4
                q.addScalar("custcode", Hibernate.STRING);
                q.addScalar("custbrand", Hibernate.STRING);
                q.addScalar("custdiv", Hibernate.STRING);
                //line 5
                q.addScalar("stylecode", Hibernate.STRING);
                //line 6
                q.addScalar("category", Hibernate.STRING);
                //line 7
                q.addScalar("etd", Hibernate.DATE);
                q.addScalar("qpcs", Hibernate.DOUBLE);
                q.addScalar("qdzn", Hibernate.DOUBLE);
                
                //System.err.println("Test 111111112222233333344444444");
                Iterator it = q.list().iterator();
                
                //System.err.println("Total records = " + q.list().size());
                
                if ( recordList == null){
                    recordList = new ArrayList();
                }
                
                //System.err.println("Test 11111");
                ReportDataBean grandTotal = new  ReportDataBean();
                try {
                    grandTotal.setRefNo(new String("Grand Total:"));
                    grandTotal.setClosedate(null);
                    Double tmp = null;
                    while (it.hasNext()){
                        int idx = 0;
                        Object[] tmpRow = (Object[])it.next();
                        ReportDataBean obj = new  ReportDataBean();
                        obj.setRefNo((String)tmpRow[idx++]);
                        obj.setClosedate((Date)tmpRow[idx++]);
                        obj.setPo((String)tmpRow[idx++]);
                        obj.setDest((String)tmpRow[idx++]);
                        obj.setCustCode((String)tmpRow[idx++]);
                        obj.setCustBrand((String)tmpRow[idx++]);
                        obj.setCustDiv((String)tmpRow[idx++]);
                        obj.setStyleCode((String)tmpRow[idx++]);
                        obj.setCat((String)tmpRow[idx++]);
                        obj.setEtd((Date)tmpRow[idx++]);
                        
                        tmp = (Double)tmpRow[idx++];
                        obj.setQtyPcs(tmp);
                        grandTotal.accumulateQtyPcs(tmp);
                        
                        tmp = (Double)tmpRow[idx++];
                        obj.setQtyDzn(tmp);
                        grandTotal.accumulateQtyDzn(tmp);
                        
                        recordList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                recordList.add(grandTotal);
                
                //System.err.println("Test 1111144444");
                if (dataListModel == null) {
                    //System.err.println("Search for records 333");
                    dataListModel = new ListDataModel();
                }
                
                //System.err.println("Test 111115555");
                dataListModel.setWrappedData(recordList);
                //System.err.println("Test 11111666");
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (dataListModel == null) {
            System.err.println("No records ....!!!");
            dataListModel = new ListDataModel();
        }
        
        return dataListModel;
    }
}
