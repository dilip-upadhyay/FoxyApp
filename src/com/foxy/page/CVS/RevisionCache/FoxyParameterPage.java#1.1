/*
 * FoxyParameterPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.bean.FoxySessionData;
import com.foxy.db.HibernateUtil;
import com.foxy.db.Orders;
import com.foxy.db.Parameter;
import com.foxy.db.User;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.MD5;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIData;
import javax.faces.model.DataModel;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author eric
 */
public class FoxyParameterPage extends Page {
    private static String MENU_CODE = new String("1001");
    private String code = null;
    private String category = null;
    private String shortDesc = null;
    private String description = null;
    private String status;

    
    /** Creates a new instance of FoxyParameterPage */
    public FoxyParameterPage() {
        super(MENU_CODE);
        this.isAuthorize(MENU_CODE);

        /* Get session data */
        if (this.foxySessionData == null) {
            this.foxySessionData = (FoxySessionData) getBean("foxySessionData");
        }
        
        /* Set default action */
        if (this.foxySessionData.getAction() == null) {
            this.foxySessionData.setAction("ADD");
        }
        
        /* Retrive data from database if action is enq */
        if (this.foxySessionData.getAction().equals(ENQ)) {
            this.getParameter(this.foxySessionData.getPageParameter());
        }
    }
    
    /**
     *  Retrive data from database based on recordid
     */
    public void getParameter(String recordid) {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            List result = session.createQuery("from Parameter where id = '" +
                    recordid + "'").list();
            tx.commit();
            session.clear();
            for (int i = 0; i < result.size(); i ++) {
                Parameter param = (Parameter) result.get(i);
                this.setCode(param.getCode());
                this.setCategory(param.getCategory());
                this.setShortDesc(param.getShortDesc());
                this.setDescription(param.getDescription());
            }
            System.out.println("getting data from database");
        } catch (Exception e) {
            e.printStackTrace();
        }     
    }

    /**
     *  Prepare data for parameter listing 
     */
    public DataModel getParameterList() {
        Number numofRec = null;        
        int firstrow = foxyTable.getFirst();
        int pagesize = foxyTable.getRows();
        
        /*System.out.println("###$$$$$ " + this.foxySessionData.getAction());
        if (!this.foxySessionData.getAction().equals(ENQ)) {
            this.foxySessionData.setAction(LST);
        }        
        System.out.println("###$$$$$ " + this.getSearchKey());
        System.out.println("###$$$$$ " + firstrow);
        System.out.println("###$$$$$ " + this.foxySessionData.getAction());
        */
        if (this.getSearchKey() != null) {
            //this.foxySessionData.setAction(LST);
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                List result = session.createQuery("select count(*) as num from Parameter as parameter where " +
                        "parameter.description like '"+ this.getSearchKey().replace('*', '%') + "' ").list();                
                numofRec = Integer.parseInt(result.get(0).toString());
                tx.commit();
            } catch (HibernateException e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
            
            System.err.println("Total Number of records: [" + numofRec.intValue() + "]");
            numofRec = numofRec == null ? 0 : numofRec.intValue();
        }
        
        try {
            if (this.getSearchKey() != null) {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                List result = session.createQuery("from Parameter as parameter where " +
                        "parameter.description like '"+ this.getSearchKey().replace('*', '%') + "' order by category, code").setFirstResult(firstrow).setMaxResults(pagesize).list();
                if (this.foxyListModel != null ) {
                    this.foxyListModel = null;
                }
                System.err.println("Query Results size = [" + result.size() + "] recs");
                foxyListModel = new FoxyPagedDataModel(result, numofRec.intValue(), pagesize);
                tx.commit();
            }
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        return this.foxyListModel;
    }
    
    /**
     *  Save data into database
     */        
    public String save() {
        Parameter param = new Parameter();
        System.out.println("Save Parameter");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            param.setCode(this.getCode());
            param.setCategory(this.getCategory());
            param.setShortDesc(this.getShortDesc());
            param.setDescription(this.getDescription());
            param.setStatus("N");
            session.saveOrUpdate(param);
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }

    /**
     *  Retrive data from database
     */    
    public String enquire() {
        this.foxySessionData.setAction(ENQ);
        if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
            this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            this.getParameter(this.foxySessionData.getPageParameter());
        }
        return ("success");
    }

    /**
     *  Update database
     */    
    public String update() {
        this.foxySessionData.setAction(ENQ);
        System.out.println("Updating ....");
        return ("success");
    }

    /**
     *  Prepare for update action
     */    
    public String edit() {
        this.foxySessionData.setAction(UPD);
        return ("success");
    }

    /**
     *  Delete from database
     */    
    public String delete() {
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }

    /**
     *  Prepare for listing 
     */    
    public String search() {
        this.foxySessionData.setAction(LST);
        this.foxyTable.setFirst(0);
        return ("success");
    }
    
    /**
     *  Below are geter and seter for foxy parameter
     */    
           
    //PROPERTY: category
    public String getCategory(){
        return this.category;
    }
    public void setCategory(String newValue) {
        this.category = newValue;
    }
    
    //PROPERTY: code
    public String getCode(){
        return this.code;
    }
    public void setCode(String newValue) {
        this.code = newValue;
    }
    
    //PROPERTY: shortDesc
    public String getShortDesc(){
        return this.shortDesc;
    }
    public void setShortDesc(String newValue) {
        this.shortDesc = newValue;
    }
    
    //PROPERTY: description
    public String getDescription(){
        return this.description;
    }
    public void setDescription(String newValue) {
        this.description = newValue;
    }
    
    //PROPERTY: status
    public String getStatus(){
        return this.status;
    }
    public void setStatus(String newValue) {
        this.status = newValue;
    }
}
