/*
 * FoxyOrderPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.bean.FoxySessionData;
import com.foxy.data.FoxyOrderDetaiData;
import com.foxy.data.FoxyOrderList;
import com.foxy.db.Category;
import com.foxy.db.HibernateUtil;
import com.foxy.db.OrderConfirm;
import com.foxy.db.OrderSummary;
import com.foxy.db.Orders;
import com.foxy.util.DataPage;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import com.foxy.util.OrderNumber;
import com.foxy.util.PagedListDataModel;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.faces.application.FacesMessage;
import javax.faces.event.ActionEvent;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import org.apache.myfaces.custom.datascroller.ScrollerActionEvent;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Projections;
import javax.faces.component.UIData;

/**
 *
 * @author eric
 */
public class FoxyOrderPage extends Page implements Serializable{
    private static String MENU_CODE = new String("2001");
    
    private DataModel orderDetailModel;
    private DataModel orderListModel;
    private DataModel dataModel;
    
    //private List orderList = new ArrayList();
        
    private String orderId = null;
    private String countryCode = null;
    private Date orderDate = Calendar.getInstance(Locale.US).getTime();
    private String customer = null;
    private String style = null;
    private String season = null;
    private String type = null;
    private Double unitPrice = null;
    private Double qtyDzn = null;
    private Double qtyPcs = null;
    private String merchandiser = null;
    private String description = null;
    private String fabric = null;
    private Double horizontal = null;
    private Double vertical = null;
    private String remark = null;

    private int rowPerPage = 0;

    
    /** Creates a new instance of FoxyMainPage */
    public FoxyOrderPage() {
        super(new String("OrderForm"));
        //getOrder(this.orderId);
        this.isAuthorize(MENU_CODE);
        
        /* Get session data */
        if (this.foxySessionData == null) {
            this.foxySessionData = (FoxySessionData) getBean("foxySessionData");
        }
        
        /* Set default action */
        if (this.foxySessionData.getAction() == null) {
            this.foxySessionData.setAction("ADD");
        }
        
        /* Retrive data from database if action is enq */
        if (this.foxySessionData.getAction().equals(ENQ)) {            
            System.out.println("!!!! " + this.foxySessionData.getAction());
            if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
                this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            }
            this.getOrderEnq(this.foxySessionData.getPageParameter());
        }
    }
    
    private void getOrderEnq(String orderid) {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            List result = session.createQuery("from Orders where orderid = '" +
                    orderid + "'").list();
            tx.commit();
            session.clear();
            ListData ld = (ListData)getBean("listData");
            for (int i = 0; i < result.size(); i ++) {
                Orders od = (Orders) result.get(i);
                this.orderId = od.getOrderId();
                this.orderDate = od.getOrderDate();
                this.customer = ld.getCustomer(od.getCustCode()).getCustName();
                this.style = od.getStyleCode();
                this.season = ld.getSeasonDesc(od.getSeason());
                this.type = od.getType();
                this.unitPrice = od.getUnitPrice();
                this.merchandiser = ld.getMerchandiser(od.getMerchandiser()).getFullName();
                this.description = od.getDescription();
                this.fabric = od.getFabric();
                this.remark = od.getRemark();
                this.horizontal = od.getHorizontal();
                this.vertical = od.getVertical();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getOrderUpd(String orderid) {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            List result = session.createQuery("from Orders where orderid = '" +
                    orderid + "'").list();
            tx.commit();
            session.clear();
            for (int i = 0; i < result.size(); i ++) {
                Orders od = (Orders) result.get(i);
                this.orderId = od.getOrderId();
                this.orderDate = od.getOrderDate();
                this.customer = od.getCustCode();
                System.out.println(this.customer);
                this.style = od.getStyleCode();
                this.season = od.getSeason();
                this.type = od.getType();
                this.unitPrice = od.getUnitPrice();
                this.merchandiser = od.getMerchandiser();
                this.description = od.getDescription();
                this.fabric = od.getFabric();                
                this.remark = od.getRemark();
                this.horizontal = od.getHorizontal();
                this.vertical = od.getVertical();                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String save() {
        Orders order = new Orders();
        
        if (ectx.getRequestParameterMap().containsKey("UpdAddForm:OrderIdD")) {
            this.orderId = ectx.getRequestParameterMap().get("UpdAddForm:OrderIdD").toString();
            order.setOrderId(this.orderId);
        } else {
            OrderNumber ordNo = new OrderNumber();
            System.out.println("******&&&& ***" + this.getCountryCode());
            this.setOrderId(ordNo.getOrderNumber(Integer.parseInt(this.getCountryCode())));
            order.setOrderId(this.getOrderId());
        }        
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            order.setCustCode(this.getCustomer());
            order.setStyleCode(this.getStyle());
            order.setSeason(this.getSeason());
            order.setMerchandiser(this.getMerchandiser());
            order.setOrderDate(this.getDate());
            order.setUnitPrice(new Double(2.0));
            order.setQtyDzn(this.getQtyDzn());
            order.setQtyPcs(this.getQtyPcs());
            order.setType(this.getType());
            order.setDescription(this.getDescription());
            order.setFabric(this.getFabric());
            order.setRemark(this.getRemark());
            order.setHorizontal(new Double(5.0));
            order.setVertical(new Double(6.0));
            order.setStatus("S");
            
            session.saveOrUpdate(order);
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.getOrderEnq(this.orderId);
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
        
    public DataModel getOrderDetail() {
        Double totalDzn = new Double(0.0);
        Double totalPcs = new Double(0.0);
        ListData ld = (ListData)getBean("listData");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List ordSum = session.createQuery("from OrderSummary where orderid = '" +
                    this.orderId + "' order by month").list();
            if (ordSum.size() <= 0) {
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                this.tableList.add(odDs);
            }
            for (int i = 0; i < ordSum.size(); i ++ ){
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                OrderSummary os = (OrderSummary) ordSum.get(i);
                
                List result = session.createQuery("from Category where catId = '" + os.getCategory() +"'").list();                
                Category cat = (Category) result.get(0);
                odDs.setCategory(cat.getCategory());
                
                odDs.setMonth(os.getMonth());
                odDs.setDestName(ld.getDestinationDesc(os.getLocation(), 1));
                odDs.setDestShortName(ld.getDestinationShortDesc(os.getLocation(), 1));
                odDs.setLocation(os.getLocation());
                odDs.setRemark(os.getRemark());
                odDs.setQuantityDzn(os.getQtyDzn());
                odDs.setQuantityPcs(os.getQtyPcs());
                odDs.setUnit(os.getUnit());
                this.tableList.add(odDs);
                
                List ordCon = session.createQuery("from OrderConfirm where orderid = '" +
                        this.orderId + "' and srefid = " + os.getId()).list();
                
                totalDzn = 0.0;
                totalPcs = 0.0;
                
                if (ordCon.size() <= 0) {
                    FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                    tot.setMonth(os.getMonth());
                    tot.setLocation(os.getLocation());
                    this.tableList.add(tot);
                }
                
                for (int j = 0; j < ordCon.size(); j ++ ){
                    FoxyOrderDetaiData odDc = new FoxyOrderDetaiData();
                    OrderConfirm oc = (OrderConfirm) ordCon.get(j);
                    
                    /*result = session.createQuery("from Category where catId = '" + oc.getCategory() +"'").list();
                    cat = (Category) result.get(0);
                    odDc.setCategory(cat.getCategory());*/
                    
                    odDc.setMonth(oc.getMonth());
                    odDc.setPoNumber(oc.getPoNumber());
                    odDc.setPoDate(oc.getPoDate());
                    odDc.setLocation(oc.getLocation());
                    odDc.setSubLocation(oc.getSubLocation());
                    //odDc.setCategory(oc.getCategory());
                    odDc.setQuantityDzn(oc.getQtyDzn());
                    odDc.setQuantityPcs(oc.getQtyPcs());
                    odDc.setUnit(os.getUnit());
                    odDc.setVesselDate(oc.getVesselDate());
                    odDc.setFabricDate(oc.getFabricDate());
                    this.tableList.add(odDc);
                    totalDzn += oc.getQtyDzn();
                    totalPcs += oc.getQtyPcs();
                    if (j == (ordCon.size() - 1)){
                        FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                        tot.setMonth(oc.getMonth());
                        tot.setLocation(os.getLocation());
                        tot.setQuantityDzn(totalDzn);
                        tot.setQuantityPcs(totalPcs);
                        tot.setUnit(os.getUnit());
                        this.tableList.add(tot);
                    }
                }
            }
            if (orderDetailModel == null) {
                orderDetailModel = new ListDataModel();
            }
            orderDetailModel.setWrappedData(tableList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return orderDetailModel;
    }
        
    public DataModel getOrderList() {
        //this.action = new String("LIST");
        //this.foxySessionData.setAction(LST);
        
        //Added in to get total row count
        Number numofRec = null;
        int firstrow = this.foxyTable.getFirst();
        int pagesize = this.foxyTable.getRows();
        
        System.err.println("Start requesting OrderListDataModel with firstrow = [" + firstrow + "] pasgesize = [" + pagesize + "]");
        
        if (this.searchKey != null) {
            System.err.println("Start requesting OrderListDataModel with firstrow = [" + firstrow + "] pasgesize = [" + pagesize + "] searchkey = [" + this.searchKey.replace('*', '%') + "]");
            
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                List result = session.createQuery("select count(*) as num from Orders as orders where " +
                        "orders.orderId like '"+ this.searchKey.replace('*', '%') + "' ").list();
                System.out.println("5555" + result.get(0).toString());
                
                numofRec = Integer.parseInt(result.get(0).toString());
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
            
            System.err.println("Total Number of records: [" + numofRec.intValue() + "]");
            numofRec = numofRec == null ? 0 : numofRec.intValue();
        }
        
        
        try {
            if (this.searchKey != null) {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                List result = session.createQuery("from Orders as orders where " +
                        "orders.orderId like '"+ this.searchKey.replace('*', '%') + "' ").setFirstResult(firstrow).setMaxResults(pagesize).list();
                
                if (orderListModel != null ) {
                    orderListModel = null;
                }
                System.err.println("Query Results size = [" + result.size() + "] recs");
                orderListModel = new FoxyPagedDataModel(result, numofRec.intValue(), pagesize);
                tx.commit();
            }
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        return orderListModel;
    }
        
    /**
     *  Retrive data from database
     */
    public String enquire() {
        this.foxySessionData.setAction(ENQ);
        System.out.println("!!!! " + this.foxySessionData.getAction());
        if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
            this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            this.getOrderEnq(this.foxySessionData.getPageParameter());
        }
        System.out.println("!!!! " + this.foxySessionData.getPageParameter());
        return ("success");
    }
    
    /**
     *  Update database
     */
    public String update() {
        this.foxySessionData.setAction(ENQ);
        System.out.println("Updating ....");
        return ("success");
    }
    
    /**
     *  Prepare for update action
     */
    public String edit() {
        this.foxySessionData.setAction(UPD);
        this.getOrderUpd(this.getOrderIdD());
        return ("success");
    }
    
    /**
     *  Delete from database
     */
    public String delete() {
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    /**
     *  Prepare for listing
     */
    public String search() {
        this.foxySessionData.setAction(LST);
        this.foxyTable.setFirst(0);
        System.out.println("!!!! " + this.foxySessionData.getAction());
        return ("success");
    }

    public String orderInstruction() {
        this.foxySessionData.setAction(ADD);
        this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("ADD_DETAIL");
    }    
    
    public String poEntry() {
        this.foxySessionData.setAction(ENQ);
        this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("ADD_PO");
    }
    
    public String shipEntry() {
        this.foxySessionData.setAction(new String(ENQ));
        this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("ADD_SHIP");
    }    
    
    /**
     *  Below are geter and seter for foxy parameter
     */
    
    //PROPERTY: orderId
    public String getOrderId(){
        return this.orderId;
    }
    public String getOrderIdD(){
        return this.orderId;
    }
    public void setOrderId(String newValue) {
        this.orderId = newValue;
    }
    public void setOrderIdD(String newValue){
        this.orderId = newValue;        
    }
    
    //PROPERTY: countryCode
    public String getCountryCode(){
        return this.countryCode;
    }
    public void setCountryCode(String newValue) {
        this.countryCode = newValue;
    }
    
    //PROPERTY: orderDate
    public Date getDate(){
        return this.orderDate;
    }
    public void setDate(Date newValue) {
        this.orderDate = newValue;
    }
    
    //PROPERTY: customer
    public String getCustomer(){
        return this.customer;
    }
    public void setCustomer(String newValue) {
        this.customer = newValue;
    }
    
    //PROPERTY: style
    public String getStyle(){
        return this.style;
    }
    public void setStyle(String newValue) {
        this.style = newValue;
    }
    
    //PROPERTY: season
    public String getSeason(){
        return this.season;
    }
    public void setSeason(String newValue) {
        this.season = newValue;
    }
    
    //PROPERTY: type
    public String getType(){
        return this.type;
    }
    public void setType(String newValue) {
        this.type = newValue;
    }
    
    //PROPERTY: unitPrice
    public Double getUnitPrice(){
        return this.unitPrice;
    }
    public void setUnitPrice(Double newValue) {
        this.unitPrice = newValue;
    }
    //PROPERTY: qtyDzn
    public Double getQtyDzn(){
        return this.qtyDzn;
    }
    public void setQtyDzn(Double newValue) {
        this.qtyDzn = newValue;
    }    
    //PROPERTY: qtyPcs
    public Double getQtyPcs(){
        return this.qtyPcs;
    }
    public void setQtyPcs(Double newValue) {
        this.qtyPcs = newValue;
    }    
    //PROPERTY: merchandiser
    public String getMerchandiser(){
        return this.merchandiser;
    }
    public void setMerchandiser(String newValue) {
        this.merchandiser = newValue;
    }
    
    //PROPERTY: description
    public String getDescription(){
        return this.description;
    }
    public void setDescription(String newValue) {
        this.description = newValue;
    }
    //PROPERTY: horizontal
    public Double getHorizontal(){
        return this.horizontal;
    }
    public void setHorizontal(Double newValue) {
        this.horizontal = newValue;
    }    
    //PROPERTY: qtyPcs
    public Double getVertical(){
        return this.vertical;
    }
    public void setVertical(Double newValue) {
        this.vertical = newValue;
    }        
    //PROPERTY: fabric
    public String getFabric(){
        return this.fabric;
    }
    public void setFabric(String newValue) {
        this.fabric = newValue;
    }
    
    //PROPERTY: remark
    public String getRemark(){
        return this.remark;
    }
    public void setRemark(String newValue) {
        this.remark = newValue;
    }
}
