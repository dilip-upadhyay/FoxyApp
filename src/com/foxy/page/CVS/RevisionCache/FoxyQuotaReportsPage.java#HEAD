/*
 * FoxyQuotaReportsPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.faces.application.FacesMessage;
import com.foxy.db.QuotaEntry;
import com.foxy.db.QuotaMast;
import com.foxy.db.OrderSummary;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyQuotaReportsPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel quotaOutstandingListModel;
    private List quotaForCountry = null;
    private String country = null;
    private String quota = null;
    private Date Jan01 = null;
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    
    public class ReportDataBean {
        private String orderId = null;
        private String month = null;
        private String location = null;
        private String subLocation = null;
        private String quota = null;
        private String category = null;
        private String destination = null;
        private Double qtyPcs = null;
        private Double multiplier = null;
        private Double qused = null;
        private Date  delivery = null;
        private String poNumber = null;
        
        
        public String getOrderId() {
            return orderId;
        }
        
        public void setOrderId(String orderId) {
            this.orderId = orderId;
        }
        
        public String getMonth() {
            return month;
        }
        
        public void setMonth(String month) {
            this.month = month;
        }
        
        public String getLocation() {
            return location;
        }
        
        public void setLocation(String location) {
            this.location = location;
        }
        
        public String getSubLocation() {
            return subLocation;
        }
        
        public void setSubLocation(String subLocation) {
            this.subLocation = subLocation;
        }
        
        public String getQuota() {
            return quota;
        }
        
        public void setQuota(String quota) {
            this.quota = quota;
        }
        
        public String getCategory() {
            return category;
        }
        
        public void setCategory(String category) {
            this.category = category;
        }
        
        public String getDestination() {
            return destination;
        }
        
        public void setDestination(String destination) {
            this.destination = destination;
        }
        
        public Double getMultiplier() {
            return multiplier;
        }
        
        public void setMultiplier(Double multiplier) {
            this.multiplier = multiplier;
        }
        
        public Double getQtyPcs() {
            return qtyPcs;
        }
        
        public void setQtyPcs(Double qty) {
            this.qtyPcs = qty;
        }
        
        public void setQtyPcsAccumulate(Double qty) {
            if ( qty != null ){
                this.qtyPcs += qty;
            }
        }
        
        
        public Date getDelivery() {
            return delivery;
        }
        
        public void setDelivery(Date delivery) {
            this.delivery = delivery;
        }
        
        public Double getQused() {
            return qused;
        }
        
        public void setQused(Double qused) {
            this.qused = qused;
        }
        
        public void setQusedAccumulate(Double qused) {
            if ( qused != null ){
                this.qused += qused;
            }
        }
        
        
        public String getPoNumber() {
            return poNumber;
        }
        
        public void setPoNumber(String poNumber) {
            this.poNumber = poNumber;
        }
        
    }; //Inner class end
    
    
    public FoxyQuotaReportsPage() {
        super(new String("QuotaReportsForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public String getTitle(){
        String str = " ";
        str +=  "(" + this.getCountryName() + ") ";
        str +=  "Quota [" + this.getQuota() + "] ";
        str +=  "From [" +  fmt1.format(this.getFromDate()) + "] ";
        str +=  "To [" +  fmt1.format(this.getToDate()) + "] ";
        str +=  "As At [" +  fmt2.format(new Date()) + "] ";
        return str;
    }
    
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public String getCountryName(){
        ListData ld = (ListData)getBean("listData");
        return(ld.getCountryDesc(this.getCountry(), 0));
        //return this.country;
    }
    
    public String getQuota() {
        return quota;
    }
    
    public void setQuota(String quota) {
        this.quota = quota;
    }
    
    public void setJan01(Date Jan01) {
        this.Jan01 = Jan01;
    }
    
    public Date getJan01() {
        return Jan01;
    }
    
    
    //Ajax used to get latest Quota list based on country submitted
    public List getQtaByCountryList(){
        System.out.println("Get quota list for country " + this.country);
        if (quotaForCountry == null )
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria criteria = session.createCriteria(QuotaMast.class);
                criteria.add(Expression.eq("country", this.country));
                criteria.addOrder(Order.asc("quota"));
                List resultlist = criteria.list();
                tx.commit();
                HibernateUtil.closeSession();
                
                //Use LinkedHashMap to supress duplicate entry, bcoz list can have duplicate if join table used!!!! and hibernate do return duplicate
                Map resultMap = new LinkedHashMap();
                QuotaMast qtam = null;
                for ( int i = 0; i < resultlist.size(); i++ ){
                    qtam = (QuotaMast)resultlist.get(i);
                    resultMap.put(qtam.getQtaId(), qtam);
                }
                //System.err.println("result size = " +  resultMap.size());
                
                quotaForCountry = new ArrayList();
                quotaForCountry.add(new SelectItem(new String(""),
                        new String((resultMap.size() == 0)?"No Quota Applicable":"Please Select One")));
                
                QuotaMast qm = null;
                Set st = resultMap.entrySet();
                Iterator it = st.iterator();
                while( it.hasNext()){
                    Map.Entry me = (Map.Entry)it.next();
                    qm = (QuotaMast)me.getValue();
                    quotaForCountry.add(new SelectItem(qm.getQuota(), qm.getListDisplayString()));
                    //System.err.println("=====>>>" + qm.getQtaId() + " - " + qm.getListDisplayString());
                }
            } catch (Exception e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
                return null;
            } finally {
                HibernateUtil.closeSession();
            }
            return (quotaForCountry);
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        
        Calendar cal = Calendar.getInstance();
        // This is the right way to set the month
        cal.setTime(this.getFromDate());
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
        
        this.Jan01 = cal.getTime();
        
        return (null);
    }
    
    public DataModel getQuotaOutstandingReport(){
        List<ReportDataBean>  quotaUsagesList = null;
        if ( this.country != null){
            try {
                //System.err.println("Search for records " +  this.country + "  " + this.quota + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                String qstr = "SELECT os.orderId as orderid, os.month as month, os.location as location, os.quota as quota, ";
                qstr += "  os.qtyPcs as qtypcs, os.multiplier as multiplier, ";
                qstr += "  os.delivery as delivery, ";
                qstr += "  cat.category as category, par.shortdesc as destination ";
                qstr += "  FROM  ordsummary as os  ";
                qstr += "  LEFT JOIN category   as cat on cat.catid = os.catid  ";
                qstr += "  LEFT JOIN parameter  as par on par.code  = os.destination AND par.category = 'DEST' ";
                qstr += "  WHERE os.origin = :porigin AND os.quota = :pquota AND ";
                qstr += "  os.delivery >= :pdeliveryStart AND os.delivery <= :pdeliveryEnd ";
                qstr += "  AND os.status = :pstatus ORDER BY category, orderid, month, location ;";
                
                //System.err.println("Test 1111111122222");
                SQLQuery q = session.createSQLQuery(qstr);
                //System.err.println("Test 1111111122222333333");
                q.setString("porigin", this.country);
                q.setString("pquota", this.quota);
                q.setString("pstatus", "A");
                q.setDate("pdeliveryStart", this.getFromDate());
                q.setDate("pdeliveryEnd",this.getToDate());
                
                
                q.addScalar("orderid", Hibernate.STRING);
                q.addScalar("month", Hibernate.STRING);
                q.addScalar("location", Hibernate.STRING);
                q.addScalar("quota", Hibernate.STRING);
                q.addScalar("qtypcs", Hibernate.DOUBLE);
                q.addScalar("multiplier", Hibernate.DOUBLE);
                q.addScalar("delivery", Hibernate.DATE);
                q.addScalar("category", Hibernate.STRING);
                q.addScalar("destination", Hibernate.STRING);
                
                
                //quotaUsagesList = q.list();
                //System.err.println("Test 111111112222233333344444444");
                
                Iterator it = q.list().iterator();
                
                //System.err.println("Total records = " + q.list().size());
                
                if ( quotaUsagesList == null){
                    quotaUsagesList = new ArrayList();
                }
                
                //System.err.println("Test 11111");
                ReportDataBean grandTotal = new  ReportDataBean();
                ReportDataBean subTotal = new  ReportDataBean();
                String tmpstr = null;
                try {
                    grandTotal.setOrderId(new String("Grand Total:"));
                    grandTotal.setQused(new Double(0));
                    grandTotal.setQtyPcs(new Double(0));
                    subTotal.setQused(new Double(0));
                    subTotal.setQtyPcs(new Double(0));
                    subTotal.setCategory(null);
                    while (it.hasNext()){
                        int idx = 0;
                        Object[] tmpRow = (Object[])it.next();
                        ReportDataBean obj = new  ReportDataBean();
                        obj.setOrderId((String)tmpRow[idx++]);
                        obj.setMonth((String)tmpRow[idx++]);
                        obj.setLocation((String)tmpRow[idx++]);
                        obj.setQuota((String)tmpRow[idx++]);
                        obj.setQtyPcs((Double)tmpRow[idx++]);
                        obj.setMultiplier((Double)tmpRow[idx++]);
                        obj.setDelivery((Date)tmpRow[idx++]);
                        tmpstr = (String)tmpRow[idx++];
                        obj.setCategory(tmpstr);
                        obj.setDestination((String)tmpRow[idx++]);
                        obj.setQused((Double)obj.getQtyPcs() / obj.getMultiplier());
                        
                        if ( !tmpstr.equals(subTotal.getCategory())) {
                            if ( subTotal.getCategory() == null ) {
                                subTotal.setCategory(tmpstr);
                                subTotal.setQused(obj.getQused());
                                subTotal.setQtyPcs(obj.getQtyPcs());
                            }else {
                                //Category change, add subtotal before accumulate
                                grandTotal.setQusedAccumulate(subTotal.getQused());
                                grandTotal.setQtyPcsAccumulate(subTotal.getQtyPcs());
                                subTotal.setCategory(null);
                                subTotal.setOrderId("Sub Total:");
                                quotaUsagesList.add(subTotal); //Add into list becom subtotal
                                
                                //create a new subTotal object
                                subTotal = new  ReportDataBean();
                                subTotal.setQused(obj.getQused());
                                subTotal.setQtyPcs(obj.getQtyPcs());
                            }
                        } else {
                            subTotal.setQusedAccumulate(obj.getQused());
                            subTotal.setQtyPcsAccumulate(obj.getQtyPcs());
                        }
                        quotaUsagesList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                subTotal.setOrderId("Sub Total");
                quotaUsagesList.add(subTotal);
                
                grandTotal.setQusedAccumulate(subTotal.getQused());
                grandTotal.setQtyPcsAccumulate(subTotal.getQtyPcs());
                quotaUsagesList.add(grandTotal);
                
                
                ReportDataBean quotaLeft = new  ReportDataBean();
                quotaLeft.setOrderId("Quota Balance:");
                //--------------------------------------------
                //Query to get quota used
                //--------------------------------------------
                qstr =  " Select sum(qtypcs/multiplier) as quotaused, 'dummy' from ordsummary  ";
                qstr += " Where quota = :pquota And delivery >= :pfrom And delivery <= :pto ";
                qstr += " And status = 'A' and  origin = :porigin ";
                q = session.createSQLQuery(qstr);
                q.setString("porigin", this.country);
                q.setString("pquota", this.quota);
                q.setDate("pfrom", this.Jan01);
                q.setDate("pto",this.getToDate());
                
                q.addScalar("quotaused", Hibernate.DOUBLE);
                q.addScalar("dummy", Hibernate.STRING);
                
                it = q.list().iterator();
                try {
                    while (it.hasNext()){
                        int idx = 0;
                        Object[] tmpRow = (Object[])it.next();
                        ReportDataBean obj = new  ReportDataBean();
                        obj.setOrderId("Quota Used:");
                        obj.setQused((Double)tmpRow[idx++]);
                        quotaLeft.setQused(obj.getQused() * -1 );
                        //quotaUsagesList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                
                //--------------------------------------------
                //Query to get quota available
                //--------------------------------------------
                qstr =  " Select sum(quotaqty) as quotahas, 'dummy' From quotaentry  ";
                qstr += " Where effdate >= :pfrom and effdate <= :pto and country = :porigin ";
                qstr += " And quota = :pquota ";
                
                q = session.createSQLQuery(qstr);
                q.setString("porigin", this.country);
                q.setString("pquota", this.quota);
                q.setDate("pfrom", this.Jan01);
                q.setDate("pto",this.getToDate());
                
                q.addScalar("quotahas", Hibernate.DOUBLE);
                q.addScalar("dummy", Hibernate.STRING);
                
                it = q.list().iterator();
                try {
                    while (it.hasNext()){
                        int idx = 0;
                        Object[] tmpRow = (Object[])it.next();
                        ReportDataBean obj = new  ReportDataBean();
                        obj.setOrderId("Quota Available:");
                        obj.setQused((Double)tmpRow[idx++]);
                        quotaLeft.setQused(quotaLeft.getQused() + obj.getQused());
                        quotaUsagesList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                quotaUsagesList.add(quotaLeft);
                
                //System.err.println("Quota range from "  + this.Jan01 + " to " + this.getToDate());
                
                if (quotaOutstandingListModel == null) {
                    //System.err.println("Search for records 333");
                    quotaOutstandingListModel = new ListDataModel();
                }
                
                quotaOutstandingListModel.setWrappedData(quotaUsagesList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (quotaOutstandingListModel == null) {
            System.err.println("No records ....!!!");
            quotaOutstandingListModel = new ListDataModel();
        }
        
        return quotaOutstandingListModel;
    }
    
    
    ////////////////////////////////////////////////////////
    public DataModel getQuotaUsagesReport(){
        List<ReportDataBean>  quotaUsagesList = null;
        if ( this.country != null){
            try {
                //System.err.println("Search for records " +  this.country + "  " + this.quota + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                String qstr = "SELECT os.orderId as orderid, os.month as month, os.location as location, oc.sublocation as sublocation, ";
                qstr += " os.quota as quota, sh.qtyPcs as qtypcs, os.multiplier as multiplier,  ";
                qstr += " sh.etd as delivery,  ";
                qstr += " cat.category as category, par.shortdesc as destination  ";
                qstr += " FROM shipping as  sh  ";
                qstr += " LEFT JOIN ordconfirm as oc  on oc.crefid = sh.crefid  ";
                qstr += " LEFT JOIN ordsummary as os  on os.srefid = oc.srefid  ";
                qstr += " LEFT JOIN category   as cat on cat.catid = os.catid   ";
                qstr += " LEFT JOIN parameter  as par on par.code  = os.destination AND par.category = 'DEST'  ";
                qstr += " WHERE os.origin = :porigin AND os.quota = :pquota ";
                qstr += " AND sh.etd >= :pDateStart AND  sh.etd <= :pDateEnd ";
                qstr += " AND os.status = :pstatus ";
                qstr += " ORDER BY category, orderid, month, location, sublocation  ";
                
                
                //System.err.println("Test 1111111122222");
                SQLQuery q = session.createSQLQuery(qstr);
                //System.err.println("Test 1111111122222333333");
                q.setString("porigin", this.country);
                q.setString("pquota", this.quota);
                q.setString("pstatus", "A");
                q.setDate("pDateStart", this.getFromDate());
                q.setDate("pDateEnd",this.getToDate());
                
                
                q.addScalar("orderid", Hibernate.STRING);
                q.addScalar("month", Hibernate.STRING);
                q.addScalar("location", Hibernate.STRING);
                q.addScalar("sublocation", Hibernate.STRING);
                q.addScalar("quota", Hibernate.STRING);
                q.addScalar("qtypcs", Hibernate.DOUBLE);
                q.addScalar("multiplier", Hibernate.DOUBLE);
                q.addScalar("delivery", Hibernate.DATE);
                q.addScalar("category", Hibernate.STRING);
                q.addScalar("destination", Hibernate.STRING);
                
                
                //quotaUsagesList = q.list();
                //System.err.println("Test 111111112222233333344444444");
                
                Iterator it = q.list().iterator();
                
                //System.err.println("Total records = " + q.list().size());
                
                if ( quotaUsagesList == null){
                    quotaUsagesList = new ArrayList();
                }
                
                //System.err.println("Test 11111");
                ReportDataBean grandTotal = new  ReportDataBean();
                ReportDataBean subTotal = new  ReportDataBean();
                String tmpstr = null;
                try {
                    grandTotal.setOrderId(new String("Grand Total:"));
                    grandTotal.setQused(new Double(0));
                    grandTotal.setQtyPcs(new Double(0));
                    subTotal.setQused(new Double(0));
                    subTotal.setQtyPcs(new Double(0));
                    subTotal.setCategory(null);
                    while (it.hasNext()){
                        int idx = 0;
                        Object[] tmpRow = (Object[])it.next();
                        ReportDataBean obj = new  ReportDataBean();
                        obj.setOrderId((String)tmpRow[idx++]);
                        obj.setMonth((String)tmpRow[idx++]);
                        obj.setLocation((String)tmpRow[idx++]);
                        obj.setSubLocation((String)tmpRow[idx++]);
                        obj.setQuota((String)tmpRow[idx++]);
                        obj.setQtyPcs((Double)tmpRow[idx++]);
                        obj.setMultiplier((Double)tmpRow[idx++]);
                        obj.setDelivery((Date)tmpRow[idx++]);
                        tmpstr = (String)tmpRow[idx++];
                        obj.setCategory(tmpstr);
                        obj.setDestination((String)tmpRow[idx++]);
                        obj.setQused((Double)obj.getQtyPcs() / obj.getMultiplier());
                        
                        if ( !tmpstr.equals(subTotal.getCategory())) {
                            if ( subTotal.getCategory() == null ) {
                                subTotal.setCategory(tmpstr);
                                subTotal.setQused(obj.getQused());
                                subTotal.setQtyPcs(obj.getQtyPcs());
                            }else {
                                //Category change, add subtotal before accumulate
                                grandTotal.setQusedAccumulate(subTotal.getQused());
                                grandTotal.setQtyPcsAccumulate(subTotal.getQtyPcs());
                                subTotal.setCategory(null);
                                subTotal.setOrderId("Sub Total:");
                                quotaUsagesList.add(subTotal); //Add into list becom subtotal
                                
                                //create a new subTotal object
                                subTotal = new  ReportDataBean();
                                subTotal.setQused(obj.getQused());
                                subTotal.setQtyPcs(obj.getQtyPcs());
                            }
                        } else {
                            subTotal.setQusedAccumulate(obj.getQused());
                            subTotal.setQtyPcsAccumulate(obj.getQtyPcs());
                        }
                        quotaUsagesList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                subTotal.setOrderId("Sub Total");
                quotaUsagesList.add(subTotal);
                
                grandTotal.setQusedAccumulate(subTotal.getQused());
                grandTotal.setQtyPcsAccumulate(subTotal.getQtyPcs());
                quotaUsagesList.add(grandTotal);
                
                if (quotaOutstandingListModel == null) {
                    //System.err.println("Search for records 333");
                    quotaOutstandingListModel = new ListDataModel();
                }
                
                quotaOutstandingListModel.setWrappedData(quotaUsagesList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (quotaOutstandingListModel == null) {
            System.err.println("No records ....!!!");
            quotaOutstandingListModel = new ListDataModel();
        }
        return quotaOutstandingListModel;
    }
}
