/*
 * FoxyOrderPOPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.data.FoxyInventoryData;
import com.foxy.data.FoxyOrderDetaiData;
import com.foxy.data.FoxyOrderList;
import com.foxy.db.Category;
import com.foxy.db.HibernateUtil;
import com.foxy.db.InvMovement;
import com.foxy.db.User;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIData;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author eric
 */
public class FoxyInvMovementPage extends Page {
    private static String MENU_CODE = new String("FOXY");
    
    private Integer invmRefId = null;   
    private Integer invRefId = null;
    private Integer ssRefId = null;
    private Double quantity = new Double(0.0);
    private Double unitCost = new Double(0.0);
    
    private String orderId = null;
    private String lot = null;
    private String invoiceNumber = null;
    private String supplirt = null;
    
    private DataModel orderDetailModel;
    private DataModel orderListModel;
    private int rowPerPage = 0;
    
    /** Creates a new instance of FoxyOrderDetailPage */
    public FoxyInvMovementPage() {
        super(new String("OrderPOForm"));
        //getOrder(this.orderId);
        this.isAuthorize(getMENU_CODE());
        
        if (this.action != null) {
            /* Action submited from jsp, perform action initialization */
            
            if (this.foxySessionData.getOrderId() != null) {
                this.foxySessionData.setPageParameter(this.foxySessionData.getOrderId());
            }
        }
    }
    
    private void getInvMovement() {
        ListData ld = (ListData)getBean("listData");
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List invMv = session.createQuery("from InvMovement where invmrefid = " +
                    this.getInvmRefId()).list();
            
            for (int i = 0; i < invMv.size(); i ++ ){
                InvMovement im = (InvMovement) invMv.get(i);
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
    }
    
    public String save() {
        ListData ld = (ListData)getBean("listData");
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            InvMovement im = new InvMovement();
            
            im.setId(this.getInvmRefId());
            im.setInvRefId(this.getInvRefId());
            im.setSsRefId(this.getSsRefId());
            im.setQuantity(this.getQuantity());
            im.setUnitCost(this.getUnitCost());
            
            session.saveOrUpdate(im);
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Duplicate Key", "!!");
            ctx.addMessage(null, fmsg);
            e.printStackTrace();
            //return ("success");
        } finally {
            HibernateUtil.closeSession();
        }
        this.foxySessionData.setAction(ADD);
        return ("success");
    }
    
    public String add() {
        /*if(this.ectx.getRequestParameterMap().containsKey("month")) {
            this.month = this.ectx.getRequestParameterMap().get("month").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("location")) {
            this.location = this.ectx.getRequestParameterMap().get("location").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("refIdS")) {
            this.refIdS = this.ectx.getRequestParameterMap().get("refIdS").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("refIdC")) {
            if (this.ectx.getRequestParameterMap().get("refIdC").toString() != null &&
                    this.ectx.getRequestParameterMap().get("refIdC").toString().length() > 0) {
                this.refIdC = this.ectx.getRequestParameterMap().get("refIdC").toString();
            } else {
                this.refIdC = null;
            }
        }*/
        //this.refIdC = null;
        this.foxySessionData.setAction(ADD);
        return ("success");
    }
    
    /**
     *  Delete from database
     */
    public String delete() {
        this.foxySessionData.setAction(ENQ);
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            int resultoc = session.createQuery("delete from InvMovement where invmrefid = " +
                    this.getInvmRefId()).executeUpdate();
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return ("success");
    }
    
    public String enquire() {
        /*if(this.ectx.getRequestParameterMap().containsKey("month")) {
            this.month = this.ectx.getRequestParameterMap().get("month").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("location")) {
            this.location = this.ectx.getRequestParameterMap().get("location").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("subLocation")) {
            this.subLocation = this.ectx.getRequestParameterMap().get("subLocation").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("refIdS")) {
            this.refIdS = this.ectx.getRequestParameterMap().get("refIdS").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("refIdC")) {
            this.refIdC = this.ectx.getRequestParameterMap().get("refIdC").toString();
        }*/
        
        this.getInvMovement();
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    public String edit() {
        this.foxySessionData.setAction(UPD);
        this.getInvMovement();
        return ("success");
    }
    
    public DataModel getInventoryDetail() {
        Double totalDzn = new Double(0.0);
        Double totalPcs = new Double(0.0);
        ListData ld = (ListData)getBean("listData");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List imList = session.createQuery("from InvMovement where invrefid = '" +
                    this.invRefId + "'").list();
            if (imList.size() <= 0) {
                FoxyInventoryData invData = new FoxyInventoryData();
                this.tableList.add(invData);
            }
            for (int i = 0; i < imList.size(); i ++ ){
                FoxyInventoryData invData = new FoxyInventoryData();
                InvMovement im = (InvMovement) imList.get(i);
                
                invData.setRefIdInvM(im.getId());
                this.tableList.add(invData);
            }
            
            if (getOrderDetailModel() == null) {
                setOrderDetailModel(new ListDataModel());
            }
            getOrderDetailModel().setWrappedData(tableList);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return getOrderDetailModel();
    }
    
    public String order() {
        this.foxySessionData.setAction(ENQ);
        //this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("UPD_ORDER");
    }
    
    public String shortCut() {
        //this.foxySessionData.setAction(ENQ);
        //this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("go_enqInvMovement");
    }
    
    public String orderInstruction() {
        this.foxySessionData.setAction(ADD);
        //this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("ADD_DETAIL");
    }
    
    //PROPERTY: quantity
    public Double getQuantity(){
        return this.quantity;
    }
    public void setQuantity(Double newValue) {
        this.quantity = newValue;
    }
    
    public static String getMENU_CODE() {
        return MENU_CODE;
    }
    
    public static void setMENU_CODE(String aMENU_CODE) {
        MENU_CODE = aMENU_CODE;
    }
    
    public Double getUnitCost() {
        return unitCost;
    }
    
    public void setUnitCost(Double unitCost) {
        this.unitCost = unitCost;
    }
    
    public DataModel getOrderDetailModel() {
        return orderDetailModel;
    }
    
    public void setOrderDetailModel(DataModel orderDetailModel) {
        this.orderDetailModel = orderDetailModel;
    }
    
    public DataModel getOrderListModel() {
        return orderListModel;
    }
    
    public void setOrderListModel(DataModel orderListModel) {
        this.orderListModel = orderListModel;
    }
    
    public int getRowPerPage() {
        return rowPerPage;
    }
    
    public void setRowPerPage(int rowPerPage) {
        this.rowPerPage = rowPerPage;
    }
    
    public Integer getInvmRefId() {
        return invmRefId;
    }
    
    public void setInvmRefId(Integer invmRefId) {
        this.invmRefId = invmRefId;
    }
    
    public Integer getInvRefId() {
        return invRefId;
    }
    
    public void setInvRefId(Integer invRefId) {
        this.invRefId = invRefId;
    }
    
    public Integer getSsRefId() {
        return ssRefId;
    }
    
    public void setSsRefId(Integer ssRefId) {
        this.ssRefId = ssRefId;
    }
}
