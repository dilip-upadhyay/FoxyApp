/*
 * FoxyCRptsFabricAccsPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyCRptsFabricAccsPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel dataListModel;
    private String invType = null;
    
    private Date Jan01 = null;
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    
    public class ReportDataBean {
        private String invoice = null;
        private Date invdate = null;
        private Double qty = null;
        private String unit = null;
        private String supplier = null;
        private String type = null;
        private Double value = null;
        private String currency = null;
        private Double basevalue = null;
        private Double unitcost = null;
        private String itemdesc = null;
        private String remarks = null;
        private Double forexrate = null;
        
        public String getInvoice() {
            return invoice;
        }
        
        public void setInvoice(String invoice) {
            this.invoice = invoice;
        }
        
        public Date getInvdate() {
            return invdate;
        }
        
        public void setInvdate(Date invdate) {
            this.invdate = invdate;
        }
        
        public Double getQty() {
            return qty;
        }
        
        public void setQty(Double qty) {
            this.qty = qty;
        }
        
        public String getUnit() {
            return unit;
        }
        
        public void setUnit(String unit) {
            this.unit = unit;
        }
        
        public String getSupplier() {
            return supplier;
        }
        
        public void setSupplier(String supplier) {
            this.supplier = supplier;
        }
        
        public String getType() {
            return type;
        }
        
        public void setType(String type) {
            this.type = type;
        }
        
        public Double getValue() {
            return value;
        }
        
        public void setValue(Double value) {
            this.value = value;
        }
        
        public String getCurrency() {
            return currency;
        }
        
        public void setCurrency(String currency) {
            this.currency = currency;
        }
        
        public Double getBasevalue() {
            return basevalue;
        }
        
        public void setBasevalue(Double basevalue) {
            this.basevalue = basevalue;
        }
        
        public Double getUnitcost() {
            return unitcost;
        }
        
        public void setUnitcost(Double unitcost) {
            this.unitcost = unitcost;
        }
        
        public String getItemdesc() {
            return itemdesc;
        }
        
        public void setItemdesc(String itemdesc) {
            this.itemdesc = itemdesc;
        }
        
        public String getRemarks() {
            return remarks;
        }
        
        public void setRemarks(String remarks) {
            this.remarks = remarks;
        }
        
        public Double getForexrate() {
            return forexrate;
        }
        
        public void setForexrate(Double forexrate) {
            this.forexrate = forexrate;
        }
        
    }; //Inner class end
    
    
    
    
    public FoxyCRptsFabricAccsPage() {
        super(new String("FabricAccsReportsForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getInvType() {
        return invType;
    }
    
    public void setInvType(String invType) {
        this.invType = invType;
    }
    
    public String getTitle(){
        String str = " ";
        
        if ( this.getFromDate() != null && this.getToDate() != null) {
            str +=  " From [" +  fmt1.format(this.getFromDate()) + "] ";
            str +=  " To [" +  fmt1.format(this.getToDate()) + "] ";
        }
        str +=  " As At [" +  fmt2.format(new Date()) + "] ";
        
        return str;
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        return (null);
    }
    
    
    public String searchByRefNo() {
        this.foxySessionData.setAction(LST);
        this.setFromDate(null);
        return (null);
    }
    
    /*********************************************************************************************************************************
     **/
    
    public DataModel getReportData(){
        List<ReportDataBean>  dataList = null;
        if ( this.getFromDate() != null && this.getToDate() != null ){
            try {
                //System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                String qstr = " SELECT a.invoice as invoice, a.invdate as invdate, a.quantity as qty, a.unit as unit, a.supplier as supplier, ";
                qstr += " a.type as type, a.value as value, a.currency as currency, a.basevalue as basevalue, a.unitcost as unitcost, ";
                qstr += " a.itemdesc as itemdesc, a.remarks as remarks, a.forexrate as forexrate ";
                qstr += " FROM inventory a ";
                qstr += " WHERE a.type = :ptype AND a.invdate >= :pstartDate AND a.invdate <= :pendDate ";
                qstr += " ORDER BY a.invoice ";
                
                
                SQLQuery q = session.createSQLQuery(qstr);
                //Set filters
                q.setDate("pstartDate", this.getFromDate());
                q.setDate("pendDate", this.getToDate());
                q.setString("ptype", this.invType);
                
                //set data binding
                q.addScalar("invoice", Hibernate.STRING);
                q.addScalar("invdate", Hibernate.DATE);
                q.addScalar("qty", Hibernate.DOUBLE);
                q.addScalar("unit", Hibernate.STRING);
                q.addScalar("supplier", Hibernate.STRING);
                q.addScalar("type", Hibernate.STRING);
                q.addScalar("value", Hibernate.DOUBLE);
                q.addScalar("currency", Hibernate.STRING);
                q.addScalar("basevalue", Hibernate.DOUBLE);
                q.addScalar("unitcost", Hibernate.DOUBLE);
                q.addScalar("itemdesc", Hibernate.STRING);
                q.addScalar("remarks", Hibernate.STRING);
                q.addScalar("forexrate", Hibernate.DOUBLE);
                
                
                Iterator it = q.list().iterator();
                tx.commit();
                
                if ( dataList == null){
                    dataList = new ArrayList();
                }
                
                String tmporderid = null;
                Double d1 = null;
                ReportDataBean grandTotal = new ReportDataBean();
                
                try { //loop of all applicable order id
                    while (it.hasNext()){
                        Object[] tmpRow = (Object[])it.next();
                        int i = 0;
                        ReportDataBean obj = new  ReportDataBean();
                        
                        obj.setInvoice((String)tmpRow[i++]);
                        obj.setInvdate((Date)tmpRow[i++]);
                        obj.setQty((Double)tmpRow[i++]);
                        obj.setUnit((String)tmpRow[i++]);
                        obj.setSupplier((String)tmpRow[i++]);
                        obj.setType((String)tmpRow[i++]);
                        obj.setValue((Double)tmpRow[i++]);
                        obj.setCurrency((String)tmpRow[i++]);
                        obj.setBasevalue((Double)tmpRow[i++]);
                        obj.setUnitcost((Double)tmpRow[i++]);
                        obj.setItemdesc((String)tmpRow[i++]);
                        obj.setRemarks((String)tmpRow[i++]);
                        obj.setForexrate((Double)tmpRow[i++]);
                        
                        dataList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                //dataList.add(grandTotal);
                
                if (dataListModel == null) {
                    //System.err.println("Search for records 333");
                    dataListModel = new ListDataModel();
                }
                
                dataListModel.setWrappedData(dataList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (dataListModel == null) {
            System.err.println("No records ....!!!");
            dataListModel = new ListDataModel();
        }
        
        return dataListModel;
    }
}
