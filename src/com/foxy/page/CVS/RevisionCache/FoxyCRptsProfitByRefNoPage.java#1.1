/*
 * FoxyCRptsProfitByRefNoPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyCRptsProfitByRefNoPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel dataListModel;
    private List quotaForCountry = null;
    private String country = null;
    private boolean federated = false;
    private String refno = null;
    
    private Date Jan01 = null;
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    
    public class ReportDataBean {
        private String refno = null;
        private String customer = null;
        private Double fabric = null;
        private Double accs = null;
        private Double revenue = null;
        private Date etd = null;
        private Date delivery = null;
        private boolean federated = false;
        
        public String getRefno() {
            return refno;
        }
        
        public void setRefno(String refno) {
            this.refno = refno;
        }
        
        public String getCustomer() {
            return customer;
        }
        
        public void setCustomer(String customer) {
            this.customer = customer;
        }
        
        public Double getFabric() {
            return fabric;
        }
        
        public void setFabric(Double fabric) {
            this.fabric = fabric;
        }
        
        public Double getAccs() {
            return accs;
        }
        
        public void setAccs(Double accs) {
            this.accs = accs;
        }
        
        public Double getRevenue() {
            return revenue;
        }
        
        public void setRevenue(Double revenue) {
            this.revenue = revenue;
        }
        
        public Date getEtd() {
            return etd;
        }
        
        public void setEtd(Date etd) {
            this.etd = etd;
        }
        
        public Date getDelivery() {
            return delivery;
        }
        
        public void setDelivery(Date delivery) {
            this.delivery = delivery;
        }
        
        public void setFederated(boolean federated) {
            this.federated = federated;
        }
        
        
        public boolean isFederated() {
            return federated;
        }
        
        public Double getProfit(){
            return (Double)(revenue - fabric - accs);
        }
        
        
    }; //Inner class end
    
    
    public FoxyCRptsProfitByRefNoPage() {
        super(new String("ProfitReportsForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public String getTitle(){
        String str = " ";
        str +=  "(" + this.getCountryName() + ") ";
        str +=  "From [" +  fmt1.format(this.getFromDate()) + "] ";
        if ( this.getToDate() != null) {
            str +=  "To [" +  fmt1.format(this.getToDate()) + "] ";
        }
        str +=  "As At [" +  fmt2.format(new Date()) + "] ";
        return str;
    }
    
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public boolean isFederated() {
        return federated;
    }
    
    public void setFederated(boolean federated) {
        this.federated = federated;
    }
    
    public String getRefno() {
        return refno;
    }
    
    public void setRefno(String refno) {
        this.refno = refno;
    }
    
    
    
    
    public String getCountryName(){
        ListData ld = (ListData)getBean("listData");
        return(ld.getCountryDesc(this.getCountry(), 0));
        //return this.country;
    }
    
    public void setJan01(Date Jan01) {
        this.Jan01 = Jan01;
    }
    
    public Date getJan01() {
        return Jan01;
    }
    
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        
        Calendar cal = Calendar.getInstance();
        // This is the right way to set the month
        cal.setTime(this.getFromDate());
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
        
        this.Jan01 = cal.getTime();
        
        return (null);
    }
    
    
    
    public Double getFabricCost(String refNo){
        Double fabriccost = null;
        
        try {
            //System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            String qstr = "SELECT sum(ivm.quantity*ivm.unitcost*iv.forexrate) AS fabricbcost ";
            qstr += " FROM invmovement AS ivm ";
            qstr += " LEFT JOIN inventory AS iv ON iv.invrefid = ivm.invrefid ";
            qstr += " WHERE iv.type = 'FABRIC' AND ivm.srefid in (SELECT srefid FROM ordsummary WHERE orderid = :porderid) ";
            
            
            //System.err.println(qstr);
            //System.err.println("from date " + this.getFromDate() + " To date " + this.getToDate() +  "origin = " + this.country);
            SQLQuery q = session.createSQLQuery(qstr);
            //System.err.println("Test 1111111122222333333");
            
            q.setString("porderid", refNo);
            
            q.addScalar("fabricbcost", Hibernate.DOUBLE);
            
            //System.err.println("Test 111111112222233333344444444");
            
            if ( q.list().size() > 0){
                fabriccost = (Double)q.list().get(0);
            }
            tx.commit();
            
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        
        if ( fabriccost != null){
            fabriccost = this.roundDouble(fabriccost,2);
        }
        
        return fabriccost;
    }
    
    
    public Double getAccsCost(String refNo){
        Double accsCost = null;
        
        try {
            //System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            String qstr = "SELECT sum(ivm.quantity*ivm.unitcost*iv.forexrate) AS accscost ";
            qstr += " FROM invmovement AS ivm ";
            qstr += " LEFT JOIN inventory AS iv ON iv.invrefid = ivm.invrefid ";
            qstr += " WHERE iv.type = 'ACCS' AND ivm.srefid in (SELECT srefid FROM ordsummary WHERE orderid = :porderid) ";
            
            
            //System.err.println(qstr);
            //System.err.println("from date " + this.getFromDate() + " To date " + this.getToDate() +  "origin = " + this.country);
            SQLQuery q = session.createSQLQuery(qstr);
            //System.err.println("Test 1111111122222333333");
            
            q.setString("porderid", refNo);
            
            q.addScalar("accscost", Hibernate.DOUBLE);
            
            //System.err.println("Test 111111112222233333344444444");
            
            if ( q.list().size() > 0){
                accsCost = (Double)q.list().get(0);
            }
            tx.commit();
            
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        
        if ( accsCost != null){
            accsCost = this.roundDouble(accsCost,2);
        }
        
        return accsCost;
    }
    
    
    public Double getRevenue(String refNo){
        Double revenue = null;
        
        try {
            //System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            String qstr = "SELECT sum(sd.revenue*s.forexrate) AS revenue ";
            qstr += " FROM salesinvoicedetail sd ";
            qstr += " LEFT JOIN salesinvoice s ON s.saleinvid = sd.saleinvid ";
            qstr += " WHERE sd.srefid IN (SELECT srefid FROM ordsummary WHERE orderid = :porderid) ";
            
            //System.err.println("from date " + this.getFromDate() + " To date " + this.getToDate() +  "origin = " + this.country);
            SQLQuery q = session.createSQLQuery(qstr);
            //System.err.println("Test 1111111122222333333");
            
            q.setString("porderid", refNo);
            
            q.addScalar("revenue", Hibernate.DOUBLE);
            
            //System.err.println("Test 111111112222233333344444444");
            
            if ( q.list().size() > 0){
                revenue = (Double)q.list().get(0);
            }
            tx.commit();
            
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        
        if ( revenue != null){
            revenue = this.roundDouble(revenue,2);
        }
        
        return revenue;
    }
    
    
    
    public DataModel getReportData(){
        List<ReportDataBean>  dataList = null;
        if ( this.country != null){
            try {
                System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                
                String qstr = "SELECT DISTINCT orderid ";
                qstr += " FROM ordsummary ";
                qstr += " WHERE srefid IN (SELECT srefid FROM invmovement) ";
                qstr += " ORDER BY orderid";
                
                //System.err.println(qstr);
                //System.err.println("from date " + this.getFromDate() + " To date " + this.getToDate() +  "origin = " + this.country);
                SQLQuery q = session.createSQLQuery(qstr);
                //System.err.println("Test 1111111122222333333");
                
                q.addScalar("orderid", Hibernate.STRING);
                
                //System.err.println("Test 111111112222233333344444444");
                
                Iterator it = q.list().iterator();
                //System.err.println("Total records = " + q.list().size());
                tx.commit();
                
                if ( dataList == null){
                    dataList = new ArrayList();
                }
                
                String tmporderid = null;
                try { //loop of all applicable order id
                    while (it.hasNext()){
                        ReportDataBean obj = new  ReportDataBean();
                        
                        tmporderid = (String)it.next();
                        obj.setRefno(tmporderid);
                        obj.setFabric(this.getFabricCost(tmporderid));
                        obj.setAccs(this.getAccsCost(tmporderid));
                        obj.setRevenue(this.getRevenue(tmporderid));
                        //obj.set(String)tmpRow[idx++]);
                        dataList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                
                
                if (dataListModel == null) {
                    //System.err.println("Search for records 333");
                    dataListModel = new ListDataModel();
                }
                
                dataListModel.setWrappedData(dataList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (dataListModel == null) {
            System.err.println("No records ....!!!");
            dataListModel = new ListDataModel();
        }
        
        return dataListModel;
    }
}
