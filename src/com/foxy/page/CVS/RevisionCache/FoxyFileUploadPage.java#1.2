/*
 * FoxyCategoryPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;


import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ResourceBundle;
import java.util.Locale;
import java.util.regex.Pattern;
import org.apache.commons.codec.binary.Hex;
import org.apache.myfaces.custom.fileupload.UploadedFile;
import javax.faces.context.FacesContext;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.application.FacesMessage;
import javax.faces.validator.ValidatorException;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpServletRequest;
import java.security.MessageDigest;
import com.foxy.bean.FoxySessionData;
import com.foxy.db.HibernateUtil;
import com.foxy.db.Orders;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;



public class FoxyFileUploadPage extends Page implements Serializable{
    private static String MENU_CODE = new String("1001");
    private UploadedFile upFiledObj;
    private ResourceBundle foxyParam = null;
    private String ordId = null;
    
    //Class constructor
    public  FoxyFileUploadPage(){
        super(new String("FileUploadForm"));
        this.isAuthorize(MENU_CODE);
        Locale defaultEng = new Locale("en");
        //Always fixed to Eng, else path may have problems
        foxyParam = ResourceBundle.getBundle("Foxy", defaultEng);
        //ordId = foxySessionData.getPageParameter();
        ordId = "061001"; //testing
    }
    
    
    
    public UploadedFile getUpFile() {
        return upFiledObj;
    }
    
    public void setUpFile(UploadedFile upFile) {
        upFiledObj = upFile;
    }
    
    
    public String upload() throws IOException {
        int BUFFER_SIZE = 128;
        BufferedOutputStream os = null;
        InputStream in = null;
        String filename = null;
        String filepath = foxyParam.getString("FileUploadPath");
        
        FacesContext facesContext = FacesContext.getCurrentInstance();
        facesContext.getExternalContext().getApplicationMap().put("fileupload_bytes", upFiledObj.getBytes());
        facesContext.getExternalContext().getApplicationMap().put("fileupload_type", upFiledObj.getContentType());
        facesContext.getExternalContext().getApplicationMap().put("fileupload_name", upFiledObj.getName());
        
        String srcname = upFiledObj.getName();
        
        if ( this.ordId == null ) {
            System.err.println("Error uploading file, Order Id = Null");
            return "failed";
        }
        
        try {
            File dir = new File(filepath);
            
            /****
             * File nd = new File("c:\temp\100");
             * if ( ! nd.exists() ) {
             * System.err.println("==>Creating dir" + nd.mkdirs());
             * nd.mkdirs();
             * }
             **/
            // This filter only returns directories
            FileFilter fileFilter = new FileFilter() {
                public boolean accept(File file) {
                    if ( file.isFile()) {
                        //Expecting refno from session PageParameter
                        return Pattern.matches(ordId + ".*", file.getName());
                    } else {
                        return  false;
                    }
                }
            };
            
            File[] files =  dir.listFiles(fileFilter);
            
            if (files == null) {
                // Either dir does not exist or is not a directory
            } else {
                for (int i=0; i < files.length; i++) {
                    // Get filename of file or directory
                    System.err.println("==>File found [" + i + "] = "  + files[i]);
                    files[i].delete();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return "failed";
        } finally {
            
        }
        
        // Here we save the uploaded file
        try {
            in = new BufferedInputStream(upFiledObj.getInputStream());
            filename = this.ordId;
            
            
            int idx = srcname.lastIndexOf(".");
            if ( idx > 0) {
                //File extension is srcname.substring(idx+1)
                filename  = filename + srcname.substring(idx).toLowerCase();
            }
            
            String fullfilename = filepath + File.separatorChar + filename;
            
            System.err.println("Path config from properties = " + fullfilename );
            os = new BufferedOutputStream(new FileOutputStream(fullfilename));
            
            byte[] data = new byte[BUFFER_SIZE];
            int readSize;
            while ((readSize = in.read(data, 0, BUFFER_SIZE)) != -1) {
                os.write(data, 0, readSize);
            }
            
        } catch (IOException e) {
            e.printStackTrace();
            return "faield";
        } finally {
            in.close();
            os.close();
        }
        
        // Here we have saved the uploaded file, now update filename into database
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            String  qstr  = new String("UPDATE Orders ord SET  ");
            qstr = qstr.concat("ord.imgFile = :pimgFile ");
            qstr = qstr.concat("WHERE ord.orderId = :pordId ");
            
            Query q = session.createQuery(qstr);
            q.setString("pimgFile", filename);
            q.setString("pordId", this.ordId);
            q.executeUpdate();
            tx.commit();
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        
        return "SUCCESS";
    }
    
}
