/*
 * FoxyMainPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.db.HibernateUtil;
import com.foxy.db.OrderSummary;
import com.foxy.db.Orders;
import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;

import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.pdf.PdfCell;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.net.URL;
import java.util.List;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.hibernate.classic.Session;

/**
 *
 * @author eric
 */
public class FoxyReportPage {
    private static String MENU_CODE = new String("FOXY");
    FacesContext ctx = null;
    ExternalContext ectx = null;
    
    /** Creates a new instance of FoxyReportSummary */
    public FoxyReportPage() {
        try {
            this.ctx = FacesContext.getCurrentInstance();
            this.ectx = ctx.getExternalContext();
            //System.out.println(this.ectx.getRequest().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void test() {
        HttpServletResponse resp =(HttpServletResponse)this.ectx.getResponse();
        ServletOutputStream out = null;
        PdfPCell cell = null;
        
        Font font18 = new Font(Font.HELVETICA, 18);
        Font font16 = new Font(Font.HELVETICA, 16);
        Font font12 = new Font(Font.HELVETICA, 12);
        Font font10 = new Font(Font.HELVETICA, 10);
        
        Font tblHeader = new Font(Font.HELVETICA, 8);
        Font tblBody = new Font(Font.HELVETICA, 8);
        
        Document document = new Document();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        try {
            
            Image logo = Image.getInstance(new URL("http://" + this.ectx.getRequestHeaderMap().get("host").toString() + this.ectx.getRequestContextPath() + "/images/logo.png"));
            //Image img = Image.getInstance("http://" + this.ectx.getRequestHeaderMap().get("host").toString() + this.ectx.getRequestContextPath() + "/images/logo.jpg");
            //Image img = Image.getInstance(new URL("http://" + this.ectx.getRequestHeaderMap().get("host").toString() + this.ectx.getRequestContextPath() + "/app/DisplayPicture?imageid=061001"));
            Image img = Image.getInstance(new URL("http://" + this.ectx.getRequestHeaderMap().get("host").toString() + this.ectx.getRequestContextPath() + "/DisplayPictureNoAuth?imageid=061001"));
            logo.scalePercent(50f);
            img.setBorder(1);
            img.scaleAbsoluteHeight(100f);
            
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            document.open();
            //if (requ.getParameter("preview") == null)
            //    writer.addJavaScript("this.print(false);", false);
            
            
            /* Content Here */
            PdfPTable datatable = new PdfPTable(4);     // Create table with 4 columns
            PdfPTable innertable = new PdfPTable(2);
            
            PdfPTable toptable = new PdfPTable(2);
            PdfPTable headertable = new PdfPTable(2);
            
            PdfPTable detailtable = new PdfPTable(6);
            
            int colWidths[] = { 15, 35, 15, 35 };   // Column width
            
            int headerColWidths[] = { 75, 25 };   // Column width
            headertable.setWidths(headerColWidths);
            headertable.setWidthPercentage(100); // percentage
            headertable.getDefaultCell().setBorder(0);
            headertable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            headertable.getDefaultCell().setVerticalAlignment(Element.ALIGN_TOP);
            
            int topColWidths[] = { 70, 30 };   // Column width
            toptable.setWidths(topColWidths);
            toptable.setWidthPercentage(100); // percentage
            toptable.getDefaultCell().setBorder(0);
            toptable.getDefaultCell().setFixedHeight(100);
            toptable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            toptable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            
            int innerColWidths[] = { 30, 70 };   // Column width
            innertable.setWidths(innerColWidths);
            innertable.setWidthPercentage(100); // percentage
            innertable.getDefaultCell().setBorder(0);
            innertable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            innertable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            
            datatable.setWidths(colWidths);
            datatable.setWidthPercentage(100); // percentage
            datatable.getDefaultCell().setPadding(3);
            datatable.getDefaultCell().setBorderWidth(0);
            datatable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            datatable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            
            int detailColWidths[] = { 16, 16, 16, 16, 16, 20 };   // Column width
            detailtable.setWidths(detailColWidths);
            detailtable.setWidthPercentage(100); // percentage
            detailtable.getDefaultCell().setPadding(3);
            detailtable.getDefaultCell().setBorder(0);
            detailtable.getDefaultCell().setBorderWidthBottom(1);
            detailtable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            detailtable.getDefaultCell().setVerticalAlignment(Element.ALIGN_CENTER);
            
            headertable.addCell(logo);
            headertable.addCell(new Phrase("Order Entry Form", font16));
            
            // Get data from database
            Session session = (Session) HibernateUtil.currentSession();
            List order = session.createQuery("from Orders where orderid = '061001'").list();
            
            // Populate table with data
            for (int i = 0; i < order.size(); i ++ ){
                Orders ord = (Orders) order.get(i);
                
                innertable.addCell(new Phrase("Ref #", font12));
                innertable.addCell(new Phrase(ord.getOrderId(), font12));
                innertable.addCell(new Phrase("Customer", font12));
                innertable.addCell(new Phrase(ord.getCustCode(), font12));
                
                cell = new PdfPCell(innertable);
                cell.setColspan(1);
                cell.setBorder(0);
                toptable.addCell(cell);
                
                cell = new PdfPCell(img, true);
                
                cell.setColspan(1);
                cell.setBorder(0);
                toptable.addCell(cell);
                
                datatable.addCell(new Phrase("Ord Date", font12));
                datatable.addCell(new Phrase(": " + ord.getOrderDate().toString(), font12));
                
                datatable.addCell(new Phrase("Customer", font12));
                datatable.addCell(new Phrase(": " + ord.getCustCode(), font12));
                
                datatable.addCell(new Phrase("Style", font12));
                datatable.addCell(new Phrase(": " + ord.getStyleCode(), font12));
                
                datatable.addCell(new Phrase("Season", font12));
                datatable.addCell(new Phrase(": " + ord.getSeason(), font12));
                
                datatable.addCell(new Phrase("M.R", font12));
                datatable.addCell(new Phrase(": " + ord.getMerchandiser(), font12));
                
                datatable.addCell(new Phrase("Price", font12));
                datatable.addCell(new Phrase(": " + ord.getUnitPrice().toString(), font12));
                
                datatable.addCell(new Phrase("Fabrication", font12));
                datatable.addCell(new Phrase(": " + ord.getFabricMill(), font12));
                
                datatable.addCell(new Phrase("Fabric Mill", font12));
                datatable.addCell(new Phrase(": " + ord.getFabricMill(), font12));
                
                datatable.addCell(new Phrase("Fabric YY/DZ", font12));
                datatable.addCell(new Phrase(": " + ord.getFabricYyDz(), font12));
                
                datatable.addCell(new Phrase("Fabric Price", font12));
                datatable.addCell(new Phrase(": " + ord.getFabricPrice(), font12));
                
                datatable.addCell(new Phrase("CMT", font12));
                datatable.addCell(new Phrase(": " + ord.getCmt(), font12));
                
            }
            
            // Get data from database
            List orders = session.createQuery("from OrderSummary where orderid = '061001'").list();
            
            detailtable.addCell(new Phrase("Ref #", tblHeader));
            detailtable.addCell(new Phrase("Quantity", tblHeader));
            detailtable.addCell(new Phrase("Delivery", tblHeader));
            detailtable.addCell(new Phrase("Destination", tblHeader));
            detailtable.addCell(new Phrase("Quota", tblHeader));
            detailtable.addCell(new Phrase("C/O", tblHeader));
            
            datatable.setHeaderRows(1); // this is the end of the table header
            
            
            for (int i = 0; i < orders.size(); i ++ ){
                OrderSummary ords = (OrderSummary) orders.get(i);
                
                detailtable.addCell(new Phrase(ords.getOrderId(), font10));
                detailtable.addCell(new Phrase(ords.getQtyDzn().toString(), font10));
                detailtable.addCell(new Phrase(ords.getMonth(), font10));
                detailtable.addCell(new Phrase(ords.getDestination(), font10));
                detailtable.addCell(new Phrase(ords.getImportTax(), font10));
                detailtable.addCell(new Phrase(ords.getOrigin(), font10));
            }
            
            
            document.add(headertable);
            document.add(new Paragraph(" "));
            document.add(toptable);
            document.add(new Paragraph(" "));
            document.add(datatable);
            document.add(new Paragraph(" "));
            document.add(detailtable);
            document.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        resp.setContentType("application/pdf");
        
        resp.setContentLength(baos.size());
        try {
            out = resp.getOutputStream();
            baos.writeTo(out);
            out.flush();
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        this.ctx.responseComplete();
    }
    
    public void test2() {
        HttpServletResponse resp =(HttpServletResponse)this.ectx.getResponse();
        ServletOutputStream out = null;
        
        //Document document = new Document();
        Document document = new Document(PageSize.A4.rotate(), 10, 10, 10, 10);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        try {
            PdfWriter writer = PdfWriter.getInstance(document, baos);
            //HtmlWriter writer = HtmlWriter.getInstance(document, baos);
            document.open();
            
            FontFactory.getFont(FontFactory.HELVETICA, 8, Font.ITALIC, new Color(0x00, 0x00, 0xFF));
            // step4
            String[] bogusData = { "M0065920", "SL", "FR86000P", "PCGOLD",
            "119000", "96 06", "2001-08-13", "4350", "6011648299",
            "FLFLMTGP", "153", "119000.00" };
            int NumColumns = 12;
            //if (requ.getParameter("preview") == null)
            //    writer.addJavaScript("this.print(false);", false);
            /* Content Here */
            PdfPTable datatable = new PdfPTable(NumColumns);
            int headerwidths[] = { 4, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 18  }; // percentage
            datatable.setWidths(headerwidths);
            datatable.setWidthPercentage(100); // percentage
            datatable.getDefaultCell().setPadding(1);
            datatable.getDefaultCell().setBorderWidth(1);
            datatable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Font tblHeader = new Font(Font.HELVETICA, 8);
            Font tblBody = new Font(Font.HELVETICA, 8);
            
            datatable.addCell(new Phrase("Ref #", tblHeader));
            datatable.addCell(new Phrase("Ord Date", tblHeader));
            datatable.addCell(new Phrase("Customer", tblHeader));
            datatable.addCell(new Phrase("Style", tblHeader));
            datatable.addCell(new Phrase("Season", tblHeader));
            datatable.addCell(new Phrase("M.R", tblHeader));
            datatable.addCell(new Phrase("Price", tblHeader));
            datatable.addCell(new Phrase("C.O", tblHeader));
            datatable.addCell(new Phrase("ITax", tblHeader));
            datatable.addCell(new Phrase("Qty (DZN)", tblHeader));
            datatable.addCell(new Phrase("Qty (PCS)", tblHeader));
            datatable.addCell(new Phrase("Dest", tblHeader));
            
            
            datatable.setHeaderRows(1); // this is the end of the table header
            
            datatable.getDefaultCell().setBorderWidth(1);
            
            
            Session session = (Session) HibernateUtil.currentSession();
            List order = session.createQuery("from Orders where orderid = '061001'").list();
            for (int i = 0; i < order.size(); i ++ ){
                Orders ord = (Orders) order.get(i);
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderDate().toString(), tblBody));
                datatable.addCell(new Phrase(ord.getCustCode(), tblBody));
                datatable.addCell(new Phrase(ord.getStyleCode(), tblBody));
                datatable.addCell(new Phrase(ord.getSeason(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                datatable.addCell(new Phrase(ord.getOrderId(), tblBody));
                
                List ordSum = session.createQuery("from OrderSummary where orderid = '" + ord.getOrderId() +"'").list();
                for (int j = 0; j < ordSum.size(); j ++ ){
                    //FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                    OrderSummary os = (OrderSummary) ordSum.get(j);
                    datatable.getDefaultCell().setGrayFill(0.9f);
                    datatable.addCell(new Phrase(os.getMonth() + os.getLocation(), tblBody));
                    datatable.addCell(new Phrase(""));
                    datatable.addCell(new Phrase(os.getDestination(), tblBody));
                    datatable.addCell(new Phrase(os.getImportTax(), tblBody));
                    datatable.addCell(new Phrase(os.getOrigin(), tblBody));
                    datatable.addCell(new Phrase(os.getRemark(), tblBody));
                    datatable.addCell(new Phrase(os.getUnit(), tblBody));
                    datatable.addCell(new Phrase(os.getQtyDzn().toString(), tblBody));
                    datatable.addCell(new Phrase(os.getQtyPcs().toString(), tblBody));
                    datatable.addCell(new Phrase(os.getOrderId(), tblBody));
                    datatable.addCell(new Phrase(os.getOrderId(), tblBody));
                    datatable.addCell(new Phrase(os.getOrderId(), tblBody));
                    
                    
                }
            }
            
            /*for (int i = 1; i < 750; i++) {
                if (i % 2 == 1) {
                    datatable.getDefaultCell().setGrayFill(0.9f);
                }
                for (int x = 0; x < NumColumns; x++) {
                    datatable.addCell(new Phrase(bogusData[x], tblBody));
                }
                if (i % 2 == 1) {
                    datatable.getDefaultCell().setGrayFill(0.9f);
                }
            }*/
            document.add(datatable);
            document.close();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        
        resp.setContentType("application/pdf");
        //resp.setContentType("text/html");
        resp.setHeader("Content-Disposition", "attachment");
        
        resp.setContentLength(baos.size());
        try {
            out = resp.getOutputStream();
            baos.writeTo(out);
            out.flush();
        } catch (Exception e){
            e.printStackTrace();
        }
        this.ctx.responseComplete();
    }
}
