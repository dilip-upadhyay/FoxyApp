/*
 * FoxyInventoryPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.bean.FoxySessionData;
import com.foxy.data.FoxyInventoryData;
import com.foxy.data.FoxyInventoryList;
import com.foxy.data.FoxyOrderDetaiData;
import com.foxy.db.Category;
import com.foxy.db.CustBrand;
import com.foxy.db.CustDivision;
import com.foxy.db.HibernateUtil;
import com.foxy.db.InvMovement;
import com.foxy.db.Inventory;
import com.foxy.db.Supplier;
import com.foxy.db.OrderConfirm;
import com.foxy.db.OrderSummary;
import com.foxy.db.Orders;
import com.foxy.util.DataPage;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import com.foxy.util.OrderNumber;
import com.foxy.util.PagedListDataModel;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.text.SimpleDateFormat;
import javax.faces.application.FacesMessage;
import javax.faces.event.ActionEvent;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.apache.myfaces.custom.datascroller.ScrollerActionEvent;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Projections;
import javax.faces.component.UIData;

/**
 *
 * @author eric
 */
public class FoxyInventoryPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel orderDetailModel;
    private DataModel invListModel;
    private DataModel dataModel;
    private List  supplierList = null;
    private List  osList = null;
    
    private Integer refIdInv = null;
    private Integer refIdInvM = null;
    private Integer refIdS = null;
    
    private String supplier = null;
    private String invoiceNumber = null;
    private Date invoiceDate = null;
    private String code = null;
    private Double quantity = null;
    private Double inventoryValue = null;
    private String currency = null;
    private Double baseValue = null;
    private String unit = null;
    private String inventoryType = null;
    private String inventoryCode = null;
    
    private Double assignQty = null;
    private String orderId = null;
    private Integer lotId = null;
    
    private String recordStamp = null;
    private List searchTypes = new ArrayList();
    private int rowPerPage = 0;
    
    /** Creates a new instance of FoxyMainPage */
    public FoxyInventoryPage() {
        super(new String("OrderForm"));
        //getOrder(this.orderId);
        this.isAuthorize(getMENU_CODE());
        
        /* Get session data */
        if (this.foxySessionData == null) {
            this.foxySessionData = (FoxySessionData) getBean("foxySessionData");
        }
        
        /* Set default action */
        if (this.foxySessionData.getAction() == null) {
            this.foxySessionData.setAction("ADD");
            this.foxySessionData.setOrderId(null);
        }
        
        /* Retrive data from database if action is enq */
        if (this.foxySessionData.getAction().equals(ENQ)) {
            if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
                this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            }
            
            if (this.foxySessionData.getOrderId() != null) {
                this.foxySessionData.setPageParameter(this.foxySessionData.getOrderId());
            }
            this.getInventoryEnq(this.foxySessionData.getPageParameter());
        }
        
        /* Retrive data from database if action is enq */
        if (this.foxySessionData.getAction().equals(UPD)) {
            this.getInventoryUpd(this.foxySessionData.getPageParameter());
        }
/*        if (this.foxySessionData.getAction().equals(SCH)) {
            this.getSearchTypes().add(new SelectItem("1", "Ref Number", "selected"));
            this.getSearchTypes().add(new SelectItem("2", "Style Code", ""));
            this.getSearchTypes().add(new SelectItem("3", "Season", ""));
        }*/
    }
    
    private void getInventoryEnq(String invRefId) {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            List result = session.createQuery("from Inventory where invrefid = '" +
                    invRefId + "'").list();
            tx.commit();
            session.clear();
            ListData ld = (ListData)getBean("listData");
            for (int i = 0; i < result.size(); i ++) {
                Inventory inv = (Inventory) result.get(i);
                this.setRefIdInv(inv.getId());
                this.setInvoiceNumber(inv.getInvoice());
                this.foxySessionData.setOrderId(inv.getInvoice());
                this.setSupplier(inv.getSupplier());
                this.setInvoiceDate(inv.getInvoiceDate());
                this.setInventoryType(inv.getInvType());
                this.setQuantity(inv.getQuantity());
                this.setInventoryCode(inv.getInvCode());
                this.setUnit(inv.getUnit());
                this.setInventoryValue(inv.getValue());
                this.setCurrency(inv.getCurrency());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void getInventoryUpd(String invRefId) {
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            List result = session.createQuery("from Inventory where invrefid = '" +
                    invRefId + "'").list();
            tx.commit();
            session.clear();
            ListData ld = (ListData)getBean("listData");
            for (int i = 0; i < result.size(); i ++) {
                Inventory inv = (Inventory) result.get(i);
                this.setRefIdInv(inv.getId());
                this.setInvoiceNumber(inv.getInvoice());
                this.foxySessionData.setOrderId(inv.getInvoice());
                this.setSupplier(inv.getSupplier());
                this.setInvoiceDate(inv.getInvoiceDate());
                this.setInventoryType(inv.getInvType());
                this.setQuantity(inv.getQuantity());
                this.setInventoryCode(inv.getInvCode());
                this.setUnit(inv.getUnit());
                this.setInventoryValue(inv.getValue());
                this.setCurrency(inv.getCurrency());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String save() {
        Inventory inv = new Inventory();
        //System.out.println(this.getRefIdInv());
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            if (this.getRefIdInv() != null) {
                inv.setId(this.getRefIdInv());
            }
            inv.setSupplier(this.getSupplier());
            inv.setInvoice(this.getInvoiceNumber());
            inv.setInvoiceDate(this.getInvoiceDate());
            inv.setInvType(this.getInventoryType());
            inv.setInvCode(this.getInventoryCode());
            inv.setQuantity(this.getQuantity());
            inv.setUnit(this.getUnit());
            inv.setValue(this.getInventoryValue());
            inv.setCurrency(this.getCurrency());
            inv.setBaseValue(0.0);
            inv.setUnitCost(inv.getValue() / inv.getQuantity());
            
            System.out.println(inv.getId());
            
            session.saveOrUpdate(inv);
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.getInventoryEnq(this.getOrderId());
        this.foxySessionData.setPageParameter(this.getOrderId());
        this.foxySessionData.setAction(ADD);
        this.foxySessionData.setOrderId(this.getOrderId());
        return ("ADD_DETAIL");
    }
    
    public String saveAssignment() {
        InvMovement im = new InvMovement();
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            im.setInvRefId(this.getRefIdInv());
            im.setSsRefId(this.getLotId());
            im.setTtDate(new Date());
            im.setQuantity(this.getAssignQty());
            im.setUnitCost(new Double(2.00));
            
            session.saveOrUpdate(im);
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.getInventoryEnq(this.getOrderId());
        this.foxySessionData.setPageParameter(this.getOrderId());
        this.foxySessionData.setAction(ASS);
        this.foxySessionData.setOrderId(this.getOrderId());
        return ("ADD_DETAIL");
    }
    
    public DataModel getInventoryDetail() {
        Double totalDzn = new Double(0.0);
        Double totalPcs = new Double(0.0);
        ListData ld = (ListData)getBean("listData");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            
            List invMov = session.createQuery("from InvMovement where invrefid = '" +
                    this.getRefIdInv() + "' order by tdate").list();
            if (invMov.size() <= 0) {
                FoxyInventoryData invD = new FoxyInventoryData();
                this.tableList.add(invD);
            }
            for (int i = 0; i < invMov.size(); i ++ ){
                FoxyInventoryData invD = new FoxyInventoryData();
                InvMovement im = (InvMovement) invMov.get(i);
                
                invD.setQuantity(im.getQuantity());
                invD.setTtDate(im.getTtDate());
                
                List ordSum = session.createQuery("from OrderSummary where srefid = '" +
                        im.getSsRefId() + "'").list();
                
                if (ordSum.size() == 1) {
                    OrderSummary os = (OrderSummary) ordSum.get(0);
                    invD.setOrderId(os.getOrderId());
                    invD.setLot(os.getMonth());
                }
                this.tableList.add(invD);
            }
            
            if (getOrderDetailModel() == null) {
                setOrderDetailModel(new ListDataModel());
            }
            getOrderDetailModel().setWrappedData(tableList);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return getOrderDetailModel();
    }
    
    public DataModel getInventoryList() {
        //Added in to get total row count
        Number numofRec = null;
        int firstrow = this.foxyTable.getFirst();
        int pagesize = this.foxyTable.getRows();
        ListData ld = (ListData)getBean("listData");
        
        if (this.searchKey != null) {
            try {
                List result = null;
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                result = session.createQuery("select count(*) as num from Inventory as inventory where " +
                        "inventory.invoice like '%" + this.searchKey.replace('*', '%') + "%')").list();
                numofRec = Integer.parseInt(result.get(0).toString());
                tx.commit();
            } catch (HibernateException e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
            
            numofRec = numofRec == null ? 0 : numofRec.intValue();
        }
        
        
        try {
            List result = null;
            if (this.searchKey != null) {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                result = session.createQuery("from Inventory as inventory where " +
                        "inventory.invoice like '%" + this.searchKey.replace('*', '%') + "%')").list();
                tx.commit();
                for (int i = 0; i < result.size(); i ++ ){
                    Inventory inv = (Inventory) result.get(i);
                    FoxyInventoryList invl = new FoxyInventoryList();
                    invl.setRefIdInv(inv.getId());
                    invl.setInvoiceNumber(inv.getInvoice());
                    invl.setInvoiceDate(inv.getInvoiceDate());
                    invl.setSupplier(inv.getSupplier());
                    invl.setType(inv.getInvType());
                    invl.setInvtoryCode(inv.getInvCode());
                    invl.setQuantity(inv.getQuantity());
                    invl.setUnit(inv.getUnit());
                    this.tableList.add(invl);
                }
                
                if (getInvListModel() != null ) {
                    setInvListModel(null);
                }
                setInvListModel(new FoxyPagedDataModel(this.tableList, numofRec.intValue(), pagesize));
            }
        } catch (HibernateException e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        return getInvListModel();
    }

    public List getOsList() {
        System.out.println("Testing1111");
        if ( this.osList == null){
            this.osList = new ArrayList();
            System.out.println("Testing222");
            if ( this.orderId != null ) { //Items type, use it to get all relavent supplier list
                List resultList = null;
                System.out.println("Testing333 orderid = " + this.orderId );
                try {
                    
                    SQLQuery q = null;
                    Session session = (Session) HibernateUtil.currentSession();
                    Transaction tx= session.beginTransaction();
                    String qstr = "SELECT os.srefid as id, os.month as month, os.location as location, ";
                    qstr += " cat.category as category, par2.shortdesc as origin, ";
                    qstr += " par1.shortdesc as destination ";
                    qstr += " FROM ordsummary as os ";
                    qstr += " LEFT JOIN category   as cat on cat.catid = os.catid ";
                    qstr += " LEFT JOIN parameter  as par1 on par1.code  = os.destination AND par1.category = 'DEST' ";
                    qstr += " LEFT JOIN parameter  as par2 on par2.code  = os.origin AND par2.category = 'CNTY' ";
                    qstr += " WHERE orderid = :porderid ";
                    q = session.createSQLQuery(qstr);
                    //set SQL parameter
                    q.setString("porderid", this.orderId);
                    
                    //Define attribute datatype binding
                    q.addScalar("id", Hibernate.STRING);
                    q.addScalar("month", Hibernate.STRING);
                    q.addScalar("location", Hibernate.STRING);
                    q.addScalar("category", Hibernate.STRING);
                    q.addScalar("origin", Hibernate.STRING);
                    q.addScalar("destination", Hibernate.STRING);
                    
                    System.out.println( "Search lot for [" + this.orderId + "] ");
                    
                    Iterator it = q.list().iterator();
                    if ( it.hasNext() ){
                        this.osList.add(new SelectItem(new String(""), new String("Lot_____Cat_______Origin____Dest______"))); //Always add a null items, event no records
                    }else {
                        this.osList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
                    }
                    
                    String itemKey = null;
                    String itemDesc = "";
                    String tmpstr = null;
                    int tmpcount = 0;
                    while (it.hasNext()){
                        int idx = 0;
                        itemDesc = "";
                        Object[] tmpRow = (Object[])it.next();
                        itemKey  =  (String)tmpRow[idx++]; //id
                        
                        tmpstr   =  (String)tmpRow[idx++]; //month
                        if ( tmpstr != null )  itemDesc +=  tmpstr;
                        
                        tmpstr   =  (String)tmpRow[idx++]; //location
                        if ( tmpstr != null )  itemDesc +=  tmpstr;
                        
                        tmpcount = 8 - itemDesc.length();
                        for ( int j = 0; j < tmpcount; j++ ){
                            itemDesc += "_";
                        }
                        
                        tmpstr = (String)tmpRow[idx++]; //category
                        if (tmpstr == null) tmpstr = "UNKNOWN";
                        tmpcount = 10 - tmpstr.length();
                        for ( int j = 0; j < tmpcount; j++ ){
                            tmpstr += "_";
                        }
                        itemDesc += " " + tmpstr;
                        
                        itemDesc += " " + (String)tmpRow[idx++]; //origin
                        itemDesc += "-->";
                        itemDesc += (String)tmpRow[idx++]; //destination
                        
                        this.osList.add(new SelectItem(itemKey, itemDesc)); //add in current items
                    }
                    tx.commit();
                } catch (HibernateException e) {
                    //do something here with the exception
                    e.printStackTrace();
                    FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                    ctx.addMessage(null, fmsg);
                } finally {
                    HibernateUtil.closeSession();
                }
                
            }else {
                this.osList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
            }
        }
        return osList;
    }
    
    //action for ajax call
    public String onOrderIdChange() {
        //force to reset the osList list
        this.osList = null;
        return null; //Need to return null to disable page flow to take effect
    }
    
    public  List getSupplierList() {
        //System.out.println( "Search supplier for [" + this.getInventoryType() + "]");
        if ( this.supplierList == null){
            this.supplierList = new ArrayList();
            
            if ( this.getInventoryType() != null ) { //Items type, use it to get all relavent supplier list
                List resultList = null;
                try {
                    Session session = (Session) HibernateUtil.currentSession();
                    Transaction tx= session.beginTransaction();
                    Criteria crit = session.createCriteria(Supplier.class);
                    crit.add(Expression.eq("itemCode", this.getInventoryType()));
                    resultList = crit.list();
                    //System.out.println( "Search supplier for [" + this.getInventoryType() + "] found count [" + resultList.size() + "]");
                    tx.commit();
                } catch (HibernateException e) {
                    //do something here with the exception
                    e.printStackTrace();
                    FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                    ctx.addMessage(null, fmsg);
                } finally {
                    HibernateUtil.closeSession();
                }
                
                if ( resultList.size() > 0){
                    this.supplierList.add(new SelectItem(new String(""), new String("Pls select one"))); //Always add a null items, event no records
                }else {
                    this.supplierList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
                }
                
                for (int i = 0; i < resultList.size(); i ++) {
                    Supplier sup = (Supplier)resultList.get(i);
                    this.supplierList.add(new SelectItem(sup.getSupCode(), sup.getSupCode() + " - " + sup.getSupName()));
                }
            }else {
                this.supplierList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
            }
        }
        return this.supplierList;
    }
    
    //action for ajax call
    public String onItemTypeChange() {
        //force to reset the supplier list
        this.setSupplierList(null);
        return null; //Need to return null to disable page flow to take effect
    }
    
    /**
     *  Retrive data from database
     */
    public String enquire() {
        this.foxySessionData.setAction(ENQ);
        
        if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
            this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            this.foxySessionData.setOrderId(this.foxySessionData.getPageParameter());
            this.getInventoryEnq(this.foxySessionData.getPageParameter());
        }
        return ("success");
    }
    
    public String updateAssignment() {
        this.foxySessionData.setAction(ASS);
        
        if (this.ectx.getRequestParameterMap().containsKey("recordid")) {
            this.foxySessionData.setPageParameter(this.ectx.getRequestParameterMap().get("recordid").toString());
            this.foxySessionData.setOrderId(this.foxySessionData.getPageParameter());
            this.getInventoryEnq(this.foxySessionData.getPageParameter());
        }
        return ("success");
    }
    
    public String assignInventory() {
        this.foxySessionData.setAction(ASS);
        this.getInventoryEnq(this.getRefIdInv().toString());
        System.out.println("[" + this.getRefIdInv());
        return ("success");
    }
    
    /**
     *  Update database
     */
    public String update() {
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    /**
     *  Prepare for update action
     */
    public String edit() {
        this.foxySessionData.setAction(UPD);
        this.getInventoryUpd(this.getRefIdInv().toString());
        System.out.println("[" + this.getRefIdInv());
        return ("success");
    }
    
    /**
     *  Delete from database
     */
    public String delete() {
        this.foxySessionData.setAction(ENQ);
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            List child = session.createQuery("from OrderSummary where orderid = '" +
                    this.getOrderId() + "'").list();
            if (child.size() > 0) {
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, "@ Error: Child exist for Ref. Number [" + this.getOrderId() + "], delete not allowed.", "");
                ctx.addMessage(null, fmsg);
                return ("success");
            }
            
            List result = session.createQuery("from Orders where orderid = '" +
                    this.getOrderId() + "'").list();
            if (result.size() == 1) {
                Orders od = (Orders) result.get(0);
                od.setStatus("D");
                session.saveOrUpdate(od);
            }
            
            /* delete from order summary */
            int resultos = session.createQuery("delete from OrderSummary where orderid = " +
                    this.getOrderId()).executeUpdate();
            /*List resultOS = session.createQuery("from OrderSummary where orderid = '" +
                    this.getOrderId() + "'").list();
            if (resultOS.size() > 0) {
                for (int i = 0; i < resultOS.size(); i ++) {
                    OrderSummary os = (OrderSummary) resultOS.get(i);
                    int resultSP = session.createQuery("delete from OrderSummary where orderid = " +
                    this.getOrderId()).executeUpdate();
                    //os.setStatus("D");
                    //session.saveOrUpdate(os);
                }
            }*/
            List resultOC = session.createQuery("from OrderConfirm where orderid = '" +
                    this.getOrderId() + "'").list();
            if (resultOC.size() > 0) {
                for (int j = 0; j < resultOC.size(); j ++) {
                    OrderConfirm oc = (OrderConfirm) resultOC.get(j);
                        /*oc.setStatus("D");
                        session.saveOrUpdate(oc);*/
                    
                    int resultoc = session.createQuery("delete from Shipping where crefid = " +
                            oc.getId()).executeUpdate();
                    
                        /*List resultSP = session.createQuery("from Shipping where crefid = " +
                                oc.getId()).list();
                        if (resultSP.size() == 1) {
                            Shipping sp = (Shipping) resultSP.get(0);
                            sp.setStatus("D");
                            session.saveOrUpdate(sp);
                        } else {
                            continue;
                        } */
                    
                    
                }
                int resultSP = session.createQuery("delete from OrderConfirm where orderid = '" +
                        this.getOrderId() + "'").executeUpdate();
            }
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ("success");
    }
    
    /**
     *  Prepare for listing
     */
    public String search() {
        this.foxySessionData.setAction(LST);
        this.foxyTable.setFirst(0);
        return ("success");
    }
    
    public String searchs() {
        //this.foxySessionData.setAction(SCH);
        this.foxySessionData.setSearchKey(null);
        this.foxySessionData.setSearchType(null);
        this.foxySessionData.setOrderId(null);
        return ("go_schInventory");
    }
    
    public String enqInventory() {
        return ("go_enqInventory");
    }
    
    public String shortCut() {
        //this.foxySessionData.setAction(ENQ);
        //this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("go_enqInventory");
    }
    
    public boolean isCosting(){
        if (this.ectx.isUserInRole("3002")) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     *  Below are geter and seter for foxy parameter
     */
    
    //PROPERTY: orderId
    public String getOrderId(){
        return this.orderId;
    }
    public String getOrderIdD(){
        return this.getOrderId();
    }
    public void setOrderId(String newValue) {
        this.orderId = newValue;
    }
    public void setOrderIdD(String newValue){
        this.setOrderId(newValue);
    }
    
    public String getRecordStamp(){
        return this.recordStamp;
    }

    public static String getMENU_CODE() {
        return MENU_CODE;
    }
    
    public static void setMENU_CODE(String aMENU_CODE) {
        MENU_CODE = aMENU_CODE;
    }
    
    public DataModel getOrderDetailModel() {
        return orderDetailModel;
    }
    
    public void setOrderDetailModel(DataModel orderDetailModel) {
        this.orderDetailModel = orderDetailModel;
    }
    
    public DataModel getInvListModel() {
        return invListModel;
    }
    
    public void setInvListModel(DataModel invListModel) {
        this.invListModel = invListModel;
    }
    
    public DataModel getDataModel() {
        return dataModel;
    }
    
    public void setDataModel(DataModel dataModel) {
        this.dataModel = dataModel;
    }
    
    public Integer getRefIdInv() {
        return refIdInv;
    }
    
    public void setRefIdInv(Integer refIdInv) {
        this.refIdInv = refIdInv;
    }
    
    public Integer getRefIdInvM() {
        return refIdInvM;
    }
    
    public void setRefIdInvM(Integer refIdInvM) {
        this.refIdInvM = refIdInvM;
    }
    
    public Integer getRefIdS() {
        return refIdS;
    }
    
    public void setRefIdS(Integer refIdS) {
        this.refIdS = refIdS;
    }
    
    public String getSupplier() {
        return supplier;
    }
    
    public void setSupplier(String supplier) {
        this.supplier = supplier;
    }
    
    public String getInvoiceNumber() {
        return invoiceNumber;
    }
    
    public void setInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
    }
    
    public Date getInvoiceDate() {
        return invoiceDate;
    }
    
    public void setInvoiceDate(Date invoiceDate) {
        this.invoiceDate = invoiceDate;
    }
    
    public String getCode() {
        return code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }
    
    public Double getQuantity() {
        return quantity;
    }
    
    public void setQuantity(Double quantity) {
        this.quantity = quantity;
    }
    
    public Double getInventoryValue() {
        return inventoryValue;
    }
    
    public void setInventoryValue(Double inventoryValue) {
        this.inventoryValue = inventoryValue;
    }
    
    
    public String getUnit() {
        return unit;
    }
    
    public void setUnit(String unit) {
        this.unit = unit;
    }
    
    public String getInventoryType() {
        return inventoryType;
    }
    
    public void setInventoryType(String inventoryType) {
        this.inventoryType = inventoryType;
    }
    
    public String getInventoryCode() {
        return inventoryCode;
    }
    
    public void setInventoryCode(String inventoryCode) {
        this.inventoryCode = inventoryCode;
    }
    
    public void setRecordStamp(String recordStamp) {
        this.recordStamp = recordStamp;
    }
    
    public int getRowPerPage() {
        return rowPerPage;
    }
    
    public void setRowPerPage(int rowPerPage) {
        this.rowPerPage = rowPerPage;
    }
    
    public void setSupplierList(List supplierList) {
        this.supplierList = supplierList;
    }
    
    public Double getAssignQty() {
        return assignQty;
    }
    
    public void setAssignQty(Double assignQty) {
        this.assignQty = assignQty;
    }
    
    public Integer getLotId() {
        return lotId;
    }
    
    public void setLotId(Integer lotId) {
        this.lotId = lotId;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public Double getBaseValue() {
        return baseValue;
    }

    public void setBaseValue(Double baseValue) {
        this.baseValue = baseValue;
    }

    public List getSearchTypes() {
        return searchTypes;
    }

    public void setSearchTypes(List searchTypes) {
        this.searchTypes = searchTypes;
    }
}
