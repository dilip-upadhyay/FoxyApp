/*
 * FoxyShippingPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import com.foxy.data.FoxyOrderDetaiData;
import com.foxy.data.FoxyOrderList;
import com.foxy.db.Category;
import com.foxy.db.HibernateUtil;
import com.foxy.db.OrderConfirm;
import com.foxy.db.OrderSummary;
import com.foxy.db.Orders;
import com.foxy.db.Shipping;
import com.foxy.db.User;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIData;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author eric
 */
public class FoxyShippingPage extends Page {
    private static String MENU_CODE = new String("FOXY");
    
    private String orderId = null;
    private String month = null;
    private String location = null;
    private String subLocation = null;
    
    private Integer id = null;
    private Integer cRefId = null;
    private String invoice = null;
    private String lcNumber = null;
    
    //private Date etd = Calendar.getInstance(Locale.US).getTime();
    //private Date eta = Calendar.getInstance(Locale.US).getTime();
    //private Double quantity = new Double(0.0);
    
    private Date etd = null;
    private Date eta = null;
    private Double quantity = null;
    private Double qtyDzn = null;
    private Double qtyPcs = null;
    private String unitc = null;
    private Double amount = null;
    private Double ctn = null;
    private String vessel = null;
    private String voyage = null;
    private String shipStat = null;
    private String visaNo = null;
    private String coCert = null;
    private String expRegNo = null;
    private String shipMode = null;
    private Double costFreight = null;
    private Double cmtUnitPrc = null;
    private Double fobUnitPrc = null;
    private DataModel orderDetailModel;
    private DataModel orderListModel;
    private int rowPerPage = 0;
    
    /** Creates a new instance of FoxyShippingPage */
    public FoxyShippingPage() {
        super(new String(MENU_CODE));
        //getOrder(this.orderId);
        this.isAuthorize(MENU_CODE);
        
        if (this.action != null) {
            /* Action submited from jsp, perform action initialization */
            
            if (this.foxySessionData.getOrderId() != null) {
                this.foxySessionData.setPageParameter(this.foxySessionData.getOrderId());
            }
            
            if (this.foxySessionData.getPageParameter() != null) {
                this.setOrderId(this.foxySessionData.getPageParameter());
                System.out.println("Parameter: " + this.getOrderId());
            }
        }
    }
    
    private Boolean getShipping() {
        ListData ld = (ListData)getBean("listData");
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            List shipping = session.createQuery("from Shipping where crefid = '" +
                    this.cRefId + "'").list();
            if (shipping.size() > 0) {
                for (int i = 0; i < shipping.size(); i ++ ){
                    Shipping sp = (Shipping) shipping.get(i);
                    this.setId(sp.getId());
                    this.setInvoice(sp.getInvoice());
                    this.setLcNumber(sp.getLcNumber());
                    this.setEtd(sp.getEtd());
                    this.setEta(sp.getEta());
                    this.setAmount(sp.getAmount());
                    this.setCtn(sp.getCtn());
                    this.setVessel(sp.getVessel());
                    this.setVoyage(sp.getVoyage());
                    this.setUnitc(sp.getUnitc());
                    this.setQtyDzn(sp.getQtyDzn());
                    this.setQtyPcs(sp.getQtyPcs());
                    this.setShipStat(sp.getShipStat());
                    this.setVisaNo(sp.getVisaNo());
                    this.setCoCert(sp.getCoCert());
                    this.setExpRegNo(sp.getExpRegNo());
                    this.setShipMode(sp.getShipMode());
                    this.setCostFreight(sp.getCostFreight());
                    this.setCmtUnitPrc(sp.getCmtUnitPrc());
                    this.setFobUnitPrc(sp.getFobUnitPrc());
                    //save obj in session cache
                    this.setSessionObject1((Object)sp);
                    
                    if (sp.getUnitc() != null) {
                        if (sp.getUnitc().equals("DZN")) {
                            this.setQuantity(sp.getQtyDzn());
                        } else if (sp.getUnitc().equals("PCS")) {
                            this.setQuantity(sp.getQtyPcs());
                        }
                    }
                }
                return true;
            }
        }catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return false;
    }
    
    public String save() {
        Shipping sp = new Shipping();
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            sp.setId(this.getId());
            sp.setCcRefId(this.getCcRefId());
            sp.setInvoice(this.getInvoice());
            sp.setLcNumber(this.getLcNumber());
            sp.setEtd(this.getEtd());
            sp.setEta(this.getEta());
            sp.setUnitc(this.getUnitc());
            sp.setAmount(this.getAmount());
            sp.setCtn(this.getCtn());
            sp.setVessel(this.getVessel());
            sp.setVoyage(this.getVoyage());
            sp.setShipStat(this.getShipStat());
            sp.setVisaNo(this.getVisaNo());
            sp.setCoCert(this.getCoCert());
            sp.setExpRegNo(this.getExpRegNo());
            sp.setShipMode(this.getShipMode());
            sp.setCostFreight(this.getCostFreight());
            sp.setCmtUnitPrc(this.getCmtUnitPrc());
            sp.setFobUnitPrc(this.getFobUnitPrc());
            sp.setStatus(new String("A"));
            
            if (this.getUnitc().equals("DZN")) {
                sp.setQtyDzn(this.getQuantity());
                sp.setQtyPcs(this.getQuantity() * 12);
                this.setQtyDzn(sp.getQtyDzn());
                this.setQtyPcs(sp.getQtyPcs());
            } else if (this.getUnitc().equals("PCS")) {
                sp.setQtyDzn(this.getQuantity() / 12);
                sp.setQtyPcs(this.getQuantity());
                this.setQtyDzn(sp.getQtyDzn());
                this.setQtyPcs(sp.getQtyPcs());
            }
            
            if ( this.id == null){
                this.setSessionObject1((Object)null); //clear cache bean
            }else {
                Shipping tmpsp = (Shipping)this.getSessionObject1(Shipping.class);
                if ( tmpsp != null){
                    sp.setInsTime(tmpsp.getInsTime());
                    sp.setInsUsrId(tmpsp.getInsUsrId());
                }
            }
            
            session.saveOrUpdate(sp);
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            return ("success");
        }
        this.foxySessionData.setAction(ENQ);
        return ("success");
    }
    
    public String enqadd() {
        
        if(this.ectx.getRequestParameterMap().containsKey("month")) {
            System.out.println(this.ectx.getRequestParameterMap().get("month"));
            this.month = this.ectx.getRequestParameterMap().get("month").toString();
        }
        if(this.ectx.getRequestParameterMap().containsKey("location")) {
            System.out.println(this.ectx.getRequestParameterMap().get("location"));
            this.location = this.ectx.getRequestParameterMap().get("location").toString();
        }
        
        if(this.ectx.getRequestParameterMap().containsKey("subLocation")) {
            System.out.println(this.ectx.getRequestParameterMap().get("subLocation"));
            this.subLocation = this.ectx.getRequestParameterMap().get("subLocation").toString();
        }
        
        if(this.ectx.getRequestParameterMap().containsKey("refIdSp")) {
            if (this.ectx.getRequestParameterMap().get("refIdSp") != null &&
                    this.ectx.getRequestParameterMap().get("refIdSp").toString().length() > 0) {
                System.out.println(this.ectx.getRequestParameterMap().get("refIdSp"));
                this.id = Integer.parseInt(this.ectx.getRequestParameterMap().get("refIdSp").toString());
            }
        }
        
        if(this.ectx.getRequestParameterMap().containsKey("refIdC")) {
            this.cRefId = Integer.parseInt(this.ectx.getRequestParameterMap().get("refIdC").toString());
            
            if (this.getShipping()) {
                this.foxySessionData.setAction(ENQ);
            } else {
                this.foxySessionData.setAction(ADD);
            }
        }
        
        return ("success");
    }
    
    public String edit() {
        this.foxySessionData.setAction(UPD);
        System.out.println("Doing Edit" + this.foxySessionData.getOrderId());
        this.getShipping();
        return ("success");
    }
    
    public DataModel getOrderDetail() {
        Double totalDzn = new Double(0.0);
        Double totalPcs = new Double(0.0);
        ListData ld = (ListData)getBean("listData");
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            //List ordSum = session.createQuery("from OrderSummary where orderid = '" +
            //        this.orderId + "'").list();
            List ordSum = session.createQuery("from OrderSummary where orderid = '" +
                    this.orderId + "' and status != 'D' group by month order by month, location").list();
            
            if (ordSum.size() <= 0) {
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                this.tableList.add(odDs);
            }
            for (int i = 0; i < ordSum.size(); i ++ ){
                FoxyOrderDetaiData odDs = new FoxyOrderDetaiData();
                OrderSummary os = (OrderSummary) ordSum.get(i);
                
                List result = session.createQuery("from Category where catId = " + os.getCatId()).list();
                if ( result.size() > 0){
                    Category cat = (Category) result.get(0);
                    odDs.setCategory(cat.getCategory());
                }
                
                odDs.setDestName(ld.getDestinationDesc(os.getDestination(), 1));
                odDs.setDestShortName(ld.getDestinationShortDesc(os.getDestination(), 1));
                odDs.setRefIdS(os.getId());
                odDs.setMonth(os.getMonth());
                odDs.setLocation(os.getLocation());
                odDs.setRemark(os.getRemark());
                odDs.setQuantityDzn(os.getQtyDzn());
                odDs.setQuantityPcs(os.getQtyPcs());
                odDs.setUnit(os.getUnit());
                //this.tableList.add(odDs);
                
                //List ordCon = session.createQuery("from OrderConfirm where orderid = '" +
                //        this.orderId + "' and srefid = " + os.getId()).list();
                List ordCon = session.createQuery("from OrderConfirm where orderid = '" +
                        this.orderId + "' and month = '" + os.getMonth() + "' and status != 'D' order by month, location, sublocation").list();
                
                totalDzn = 0.0;
                totalPcs = 0.0;
                
                if (ordCon.size() <= 0) {
                    FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                    this.tableList.add(tot);
                }
                
                for (int j = 0; j < ordCon.size(); j ++ ){
                    FoxyOrderDetaiData odDc = new FoxyOrderDetaiData();
                    OrderConfirm oc = (OrderConfirm) ordCon.get(j);
                    
                    odDc.setRefIdC(oc.getId());
                    odDc.setMonth(oc.getMonth());
                    odDc.setPoNumber(oc.getPoNumber());
                    odDc.setPoDate(oc.getPoDate());
                    odDc.setLocation(oc.getLocation());
                    odDc.setSubLocation(oc.getSubLocation());
                    //odDc.setQuantityDzn(oc.getQtyDzn());
                    //odDc.setQuantityPcs(oc.getQtyPcs());
                    odDc.setUnit(os.getUnit());
                    odDc.setVesselDate(oc.getVesselDate());
                    odDc.setFabricDate(oc.getFabricDate());
                    
                    List shipping = session.createQuery("from Shipping where crefid = '" +
                            oc.getId() + "' and status != 'D'").list();
                    if (shipping.size() > 0) {
                        Shipping sp = (Shipping) shipping.get(0);
                        
                        odDc.setRefIdSp(sp.getId());
                        odDc.setInvoice(sp.getInvoice());
                        odDc.setLcNumber(sp.getLcNumber());
                        odDc.setQuantityDzn(sp.getQtyDzn());
                        odDc.setQuantityDzn(sp.getQtyPcs());
                        odDc.setEtd(sp.getEtd());
                        odDc.setEta(sp.getEta());
                        odDc.setCtn(sp.getCtn());
                        odDc.setAmount(sp.getAmount());
                        odDc.setVessel(sp.getVessel());
                        odDc.setVoyage(sp.getVoyage());
                    }
                    
                    this.tableList.add(odDc);
                    totalDzn += odDc.getQuantityDzn();
                    totalPcs += odDc.getQuantityPcs();
                    if (j == (ordCon.size() - 1)){
                        FoxyOrderDetaiData tot = new FoxyOrderDetaiData();
                        tot.setMonth(oc.getMonth());
                        tot.setLocation(os.getLocation());
                        tot.setQuantityDzn(totalDzn);
                        tot.setQuantityPcs(totalPcs);
                        tot.setUnit(os.getUnit());
                        this.tableList.add(tot);
                    }
                }
            }
            if (orderDetailModel == null) {
                orderDetailModel = new ListDataModel();
            }
            orderDetailModel.setWrappedData(tableList);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return orderDetailModel;
    }
    
    public String order() {
        this.foxySessionData.setAction(ENQ);
        this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("UPD_ORDER");
    }
    
    public String shortCut() {
        //this.foxySessionData.setAction(ENQ);
        //this.foxySessionData.setPageParameter(String.valueOf(this.getOrderId()));
        return ("go_enqShipping");
    }
    
    /**
     *  Delete from database
     */
    public String delete() {
        this.foxySessionData.setAction(ENQ);
        try {
            
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            int resultSP = session.createQuery("delete from Shipping where srefid = " +
                    this.getId()).executeUpdate();
            /*List resultSP = session.createQuery("from Shipping where srefid = " +
                    this.getId()).list();
            if (resultSP.size() == 1) {
                Shipping sp = (Shipping) resultSP.get(0);
                sp.setStatus("D");
                session.saveOrUpdate(sp);
            }*/
            
            tx.commit();
            session.clear();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ("success");
    }
    
    /**
     *  Action for edit
     */
    public boolean isOperation(){
        System.out.println("[" + this.getMonth() + "]");
        System.out.println("[" + this.getSubLocation() + "]");
        if (this.getMonth() != null && this.getMonth().length() > 0 &&
                this.getSubLocation() != null && this.getSubLocation().length() > 0) {
            return (true);
        } else {
            return (false);
        }
    }
    
    //PROPERTY: id
    public Integer getId(){
        return this.id;
    }
    public void setId(Integer newValue) {
        this.id = newValue;
    }
    
    //PROPERTY: cRefId
    public Integer getCcRefId(){
        return this.cRefId;
    }
    public void setCcRefId(Integer newValue) {
        this.cRefId = newValue;
    }
    
    //PROPERTY: orderId
    public String getOrderId(){
        return this.orderId;
    }
    public void setOrderId(String newValue) {
        this.orderId = newValue;
    }
    
    //PROPERTY: month
    public String getMonth(){
        return this.month;
    }
    public void setMonth(String newValue) {
        this.month = newValue;
    }
    
    //PROPERTY: location
    public String getLocation(){
        return this.location;
    }
    public void setLocation(String newValue) {
        this.location = newValue;
    }
    
    //PROPERTY: subLocation
    public String getSubLocation(){
        return this.subLocation;
    }
    public void setSubLocation(String newValue) {
        this.subLocation = newValue;
    }
    
    //PROPERTY: month + location + subLocation
    public String getSubId(){
        if (this.month != null && this.location != null && this.subLocation != null) {
            //if (Integer.parseInt(this.location) == 0) {
            //    return this.month + "-" + this.subLocation;
            //} else {
            return this.month + this.location + this.subLocation;
            //}
        } else {
            return (new String(""));
        }
    }
    
    //PROPERTY: invoice
    public String getInvoice(){
        return this.invoice;
    }
    public void setInvoice(String newValue) {
        this.invoice = newValue;
    }
    
    //PROPERTY: lcnumber
    public String getLcNumber(){
        return this.lcNumber;
    }
    public void setLcNumber(String newValue) {
        this.lcNumber = newValue;
    }
    
    //PROPERTY: etd
    public Date getEtd(){
        return this.etd;
    }
    public void setEtd(Date newValue) {
        this.etd = newValue;
    }
    
    //PROPERTY: eta
    public Date getEta(){
        return this.eta;
    }
    public void setEta(Date newValue) {
        this.eta = newValue;
    }
    //PROPERTY: quantity
    public Double getQuantity(){
        return this.quantity;
    }
    public void setQuantity(Double newValue) {
        this.quantity = newValue;
    }
    //PROPERTY: qtyDzn
    public Double getQtyDzn(){
        return this.qtyDzn;
    }
    public void setQtyDzn(Double newValue) {
        this.qtyDzn = newValue;
    }
    //PROPERTY: qtyPcs
    public Double getQtyPcs(){
        return this.qtyPcs;
    }
    public void setQtyPcs(Double newValue) {
        this.qtyPcs = newValue;
    }
    //PROPERTY: unitc
    public String getUnitc(){
        return this.unitc;
    }
    public void setUnitc(String newValue) {
        this.unitc = newValue;
    }
    
    //PROPERTY: amount
    public Double getAmount(){
        return this.amount;
    }
    public void setAmount(Double newValue) {
        this.amount = newValue;
    }
    
    //PROPERTY: ctn
    public Double getCtn(){
        return this.ctn;
    }
    public void setCtn(Double newValue) {
        this.ctn = newValue;
    }
    
    //PROPERTY: vessel
    public String getVessel(){
        return this.vessel;
    }
    public void setVessel(String newValue) {
        this.vessel = newValue;
    }
    
    //PROPERTY: voyage
    public String getVoyage(){
        return this.voyage;
    }
    public void setVoyage(String newValue) {
        this.voyage = newValue;
    }
    //PROPERTY: shipStat
    public String getShipStat(){
        return this.shipStat;
    }
    public void setShipStat(String newValue) {
        this.shipStat = newValue;
    }
    
    public String getVisaNo() {
        return visaNo;
    }
    
    public void setVisaNo(String visaNo) {
        this.visaNo = visaNo;
    }
    
    public String getCoCert() {
        return coCert;
    }
    
    public void setCoCert(String coCert) {
        this.coCert = coCert;
    }
    
    public String getExpRegNo() {
        return expRegNo;
    }
    
    public void setExpRegNo(String expRegNo) {
        this.expRegNo = expRegNo;
    }
    
    public String getShipMode() {
        return shipMode;
    }
    
    public void setShipMode(String shipMode) {
        this.shipMode = shipMode;
    }
    
    public Double getCostFreight() {
        return costFreight;
    }
    
    public void setCostFreight(Double costFreight) {
        this.costFreight = costFreight;
    }
    
    public Double getCmtUnitPrc() {
        return cmtUnitPrc;
    }
    
    public void setCmtUnitPrc(Double cmtUnitPrc) {
        this.cmtUnitPrc = cmtUnitPrc;
    }
    
    public Double getFobUnitPrc() {
        return fobUnitPrc;
    }
    
    public void setFobUnitPrc(Double fobUnitPrc) {
        this.fobUnitPrc = fobUnitPrc;
    }
    
}
