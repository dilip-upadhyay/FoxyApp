/*
 * FoxyCRptsSalesInvoicePage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.faces.application.FacesMessage;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyCRptsSalesInvoicePage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel dataListModel;
    private List quotaForCountry = null;
    private String country = null;
    private boolean federated = false;
    private String refno = null;
    
    private Date Jan01 = null;
    private SimpleDateFormat fmt1 =  new SimpleDateFormat("yyyy-MM-dd");
    private SimpleDateFormat fmt2 =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    
    public class ReportDataBean {
        private String salesInv = null;
        private Date invDate = null;
        private String chutexInv = null;
        private String customer = null;
        private String ponumber = null;
        private String style = null;
        private String refNo = null;
        private Double forexRate = null;
        private Integer ctns = null;
        private Double pcs = null;
        private Date etd = null;
        private String shipMode = null;
        private Double fobVal = null;
        private Double cmtUnitPrice = null;
        private Double cmtVal = null;
        private Double revenue = null;
        private Date paydate = null;
        
        public String getSalesInv() {
            return salesInv;
        }
        
        public void setSalesInv(String salesInv) {
            this.salesInv = salesInv;
        }
        
        public Date getInvDate() {
            return invDate;
        }
        
        public void setInvDate(Date invDate) {
            this.invDate = invDate;
        }
        
        public String getChutexInv() {
            return chutexInv;
        }
        
        public void setChutexInv(String chutexInv) {
            this.chutexInv = chutexInv;
        }
        
        public String getCustomer() {
            return customer;
        }
        
        public void setCustomer(String customer) {
            this.customer = customer;
        }
        
        public String getPonumber() {
            return ponumber;
        }
        
        public void setPonumber(String ponumber) {
            this.ponumber = ponumber;
        }
        
        public String getStyle() {
            return style;
        }
        
        public void setStyle(String style) {
            this.style = style;
        }
        
        public String getRefNo() {
            return refNo;
        }
        
        public void setRefNo(String refNo) {
            this.refNo = refNo;
        }
        
        public Double getForexRate() {
            return forexRate;
        }
        
        public void setForexRate(Double forexRate) {
            this.forexRate = forexRate;
        }
        
        public Integer getCtns() {
            return ctns;
        }
        
        public void setCtns(Integer ctns) {
            this.ctns = ctns;
        }
        
        public Double getPcs() {
            return pcs;
        }
        
        public void setPcs(Double pcs) {
            this.pcs = pcs;
        }
        
        public Date getEtd() {
            return etd;
        }
        
        public void setEtd(Date etd) {
            this.etd = etd;
        }
        
        public String getShipMode() {
            return shipMode;
        }
        
        public void setShipMode(String shipMode) {
            this.shipMode = shipMode;
        }
        
        public Double getFobVal() {
            return fobVal;
        }
        
        public void setFobVal(Double fobVal) {
            this.fobVal = fobVal;
        }
        
        public Double getCmtUnitPrice() {
            return cmtUnitPrice;
        }
        
        public void setCmtUnitPrice(Double cmtUnitPrice) {
            this.cmtUnitPrice = cmtUnitPrice;
        }
        
        public Double getCmtVal() {
            return cmtVal;
        }
        
        public void setCmtVal(Double cmtVal) {
            this.cmtVal = cmtVal;
        }
        
        public Double getRevenue() {
            return revenue;
        }
        
        public void setRevenue(Double revenue) {
            this.revenue = revenue;
        }
        
        public Date getPaydate() {
            return paydate;
        }
        
        public void setPaydate(Date paydate) {
            this.paydate = paydate;
        }
        
    }; //Inner class end
    
    
    
    
    public FoxyCRptsSalesInvoicePage() {
        super(new String("SalesInvoiceReportsForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    public String getTitle(){
        String str = " ";
        
        if ( this.searchKey != null){
            str = " [" + this.searchKey + "] As At ["  +  fmt2.format(new Date()) + "] ";
        }else{
            str +=  " (" + this.getCountryName() + ") ";
            if ( this.federated){
                str +=  " [Federated Customer] ";
            }else{
                str +=  " [Non-Federated Customer] ";
            }
            str +=  " From [" +  fmt1.format(this.getFromDate()) + "] ";
            if ( this.getToDate() != null) {
                str +=  " To [" +  fmt1.format(this.getToDate()) + "] ";
            }
            str +=  " As At [" +  fmt2.format(new Date()) + "] ";
        }
        return str;
    }
    
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public boolean isFederated() {
        return federated;
    }
    
    public void setFederated(boolean federated) {
        this.federated = federated;
    }
    
    public String getRefno() {
        return refno;
    }
    
    public void setRefno(String refno) {
        this.refno = refno;
    }
    
    
    
    
    public String getCountryName(){
        ListData ld = (ListData)getBean("listData");
        return(ld.getCountryDesc(this.getCountry(), 0));
        //return this.country;
    }
    
    public void setJan01(Date Jan01) {
        this.Jan01 = Jan01;
    }
    
    public Date getJan01() {
        return Jan01;
    }
    
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        
        if ( this.getFromDate() != null ){
            Calendar cal = Calendar.getInstance();
            // This is the right way to set the month
            cal.setTime(this.getFromDate());
            cal.set(Calendar.MONTH, Calendar.JANUARY);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMinimum(Calendar.DAY_OF_MONTH));
            
            this.Jan01 = cal.getTime();
        }
        
        return (null);
    }
    
    
    /*********************************************************************************************************************************
     **/
    
    public DataModel getReportData(){
        List<ReportDataBean>  dataList = null;
        if ( this.searchKey != null){
            try {
                //System.err.println("Search for records " +  this.country + " " + this.getFromDate() + " " + this.getToDate());
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                
                
                String qstr = " SELECT s.invno as invno, s.invdate as invdate, s.custcode as custcode, s.custbrand as custbrand, ";
                qstr += " s.destination as dest, s.stylecode as stylecode, s.refdoc as refdoc , s.forexrate as forexrate, s.shipmode as shipmode, ";
                qstr += " os.orderid as orderid, os.month as month, os.location as location, d.lotid as lotid, ";
                qstr += " d.cmtval as cmtval, d.fobval as fobval, d.revenue as revenue, d.cmtuprc as cmtuprc, d.paydate as paydate, ";
                qstr += " d.qtypcs as qtypcs, d.qtyctns as qytctns, d.ponumber as ponumber, d.etd as etd ";
                qstr += " FROM  salesinvoice s ";
                qstr += " JOIN salesinvoicedetail d ON d.saleinvid = s.saleinvid ";
                qstr += " LEFT JOIN ordsummary os ON os.srefid = d.srefid ";
                
                
                /*
                qstr = "SELECT DISTINCT os.orderid, cust.federated as federated, cust.custname as custname ";
                qstr += " FROM ordsummary as os";
                qstr += " LEFT JOIN orders od ON od.orderid = os.orderid ";
                qstr += " LEFT JOIN customer cust ON cust.custcode = od.custcode ";
                qstr += " WHERE cust.federated = :pfederated ";
                qstr += " AND os.origin = :pcountry ";
                qstr += " AND os.delivery >= :pdeliveryFrom ";
                qstr += " AND os.delivery <= :pdeliveryTo ";
                qstr += " AND srefid IN (SELECT srefid FROM invmovement) ";
                qstr += " ORDER BY orderid";
                 */
                
                SQLQuery q = session.createSQLQuery(qstr);
                
                /*
                q.setString("pcountry", this.country);
                q.setBoolean("pfederated", this.federated);
                q.setDate("pdeliveryFrom", this.getFromDate());
                q.setDate("pdeliveryTo", this.getToDate());
                 */
                
                q.addScalar("invno", Hibernate.STRING);
                q.addScalar("invdate", Hibernate.DATE);
                q.addScalar("custcode", Hibernate.STRING);
                q.addScalar("custbrand", Hibernate.STRING);
                q.addScalar("dest", Hibernate.STRING);
                q.addScalar("stylecode", Hibernate.STRING);
                q.addScalar("refdoc", Hibernate.STRING);
                q.addScalar("forexrate", Hibernate.DOUBLE);
                q.addScalar("shipmode", Hibernate.STRING);
                q.addScalar("orderid", Hibernate.STRING);
                q.addScalar("month", Hibernate.STRING);
                q.addScalar("location", Hibernate.STRING);
                q.addScalar("lotid", Hibernate.STRING);
                q.addScalar("cmtval", Hibernate.DOUBLE);
                q.addScalar("fobval", Hibernate.DOUBLE);
                q.addScalar("revenue", Hibernate.DOUBLE);
                q.addScalar("cmtuprc", Hibernate.DOUBLE);
                q.addScalar("paydate", Hibernate.DATE);
                q.addScalar("qtypcs", Hibernate.DOUBLE);
                q.addScalar("qytctns", Hibernate.INTEGER);
                q.addScalar("ponumber", Hibernate.STRING);
                q.addScalar("etd", Hibernate.DATE);
                
                Iterator it = q.list().iterator();
                tx.commit();
                
                if ( dataList == null){
                    dataList = new ArrayList();
                }
                
                String tmporderid = null;
                try { //loop of all applicable order id
                    while (it.hasNext()){
                        Object[] tmpRow = (Object[])it.next();
                        int i = 0;
                        ReportDataBean obj = new  ReportDataBean();
                        
                        obj.setSalesInv((String)tmpRow[i++]);
                        obj.setInvDate((Date)tmpRow[i++]);
                        
                        tmporderid =  (String)tmpRow[i++];//customer
                        tmporderid += "/" + (String)tmpRow[i++];//brand
                        tmporderid += "/" + (String)tmpRow[i++];//dest
                        obj.setCustomer(tmporderid);
                        
                        obj.setStyle((String)tmpRow[i++]);
                        obj.setChutexInv((String)tmpRow[i++]);
                        
                        obj.setForexRate((Double)tmpRow[i++]);
                        obj.setShipMode((String)tmpRow[i++]);
                        
                        tmporderid = (String)tmpRow[i++];//refno
                        tmporderid += (String)tmpRow[i++];//month
                        tmporderid += (String)tmpRow[i++];//location
                        tmporderid += (String)tmpRow[i++];//lotid
                        obj.setRefNo(tmporderid);
                        
                        obj.setCmtVal((Double)tmpRow[i++]);
                        obj.setFobVal((Double)tmpRow[i++]);
                        obj.setRevenue((Double)tmpRow[i++]);
                        obj.setCmtUnitPrice((Double)tmpRow[i++]);
                        obj.setPaydate((Date)tmpRow[i++]);
                        obj.setPcs((Double)tmpRow[i++]);
                        obj.setCtns((Integer)tmpRow[i++]);
                        obj.setPonumber((String)tmpRow[i++]);
                        obj.setEtd((Date)tmpRow[i++]);
                        
                        
                        
                        //tmporderid = (String)tmpRow[i++];
                        dataList.add(obj);
                    }
                } catch ( Exception e){
                    e.printStackTrace();
                }
                
                
                
                if (dataListModel == null) {
                    //System.err.println("Search for records 333");
                    dataListModel = new ListDataModel();
                }
                
                dataListModel.setWrappedData(dataList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (dataListModel == null) {
            System.err.println("No records ....!!!");
            dataListModel = new ListDataModel();
        }
        
        return dataListModel;
    }
}
