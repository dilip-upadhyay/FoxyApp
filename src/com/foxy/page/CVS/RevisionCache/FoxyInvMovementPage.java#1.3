/*
 * FoxyInvMovementPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import java.util.Calendar;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.faces.application.FacesMessage;
import com.foxy.db.Inventory;
import com.foxy.db.InvMovement;
import com.foxy.db.Supplier;
import com.foxy.data.FoxyInventoryList;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Iterator;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;
import org.hibernate.SQLQuery;


/**
 *
 * @author hcting
 */
public class FoxyInvMovementPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel ListModel;
    private Inventory inventoryBean = null;
    private InvMovement invMovementBean = null;
    private String currentMode = "VIEW";
    private List  osList = null;
    private String orderId = null;
    
    public class ListingBean {
        private Long   invmrefid = null;
        private String refNo = null;
        private String lotid = null;
        private String mlotid = null;
        private Date ttDate = null;
        private Double qty = null;
        private Double usedQty = null;
        private Double unitcost = null;
        private String desc = null;
        
        public Long getInvmrefid() {
            return invmrefid;
        }
        
        public void setInvmrefid(Long invmrefid) {
            this.invmrefid = invmrefid;
        }
        
        public String getRefNo() {
            return refNo;
        }
        
        public void setRefNo(String refNo) {
            this.refNo = refNo;
        }
        
        public String getLotid() {
            return lotid;
        }
        
        public void setLotid(String lotid) {
            this.lotid = lotid;
        }
        
        public String getMlotid() {
            return mlotid;
        }
        
        public void setMlotid(String mlotid) {
            this.mlotid = mlotid;
        }
        
        public Double getQty() {
            return qty;
        }
        
        public void setQty(Double qty) {
            this.qty = qty;
        }
        
        public Double getUsedQty() {
            return usedQty;
        }
        
        public void setUsedQty(Double usedQty) {
            this.usedQty = usedQty;
        }
        
        public void setTtDate(Date ttDate) {
            this.ttDate = ttDate;
        }
        
        public Date getTtDate() {
            return ttDate;
        }
        
        public Double getUnitcost() {
            return unitcost;
        }
        
        public void setUnitcost(Double unitcost) {
            this.unitcost = unitcost;
        }
        
        public String getDesc() {
            return desc;
        }
        
        public void setDesc(String desc) {
            this.desc = desc;
        }
    }; //end of inner class bean
    
    /** Creates a new instance of Page */
    public FoxyInvMovementPage() {
        super(new String("InventoryMovementForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    //read only (no setter)
    public Inventory getInventoryBean() {
        System.err.println("Getting Inventory4444 Movement with invRefId = " + foxySessionData.getPageParameterLong2());
        
        if ( this.inventoryBean == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria crit = session.createCriteria(Inventory.class);
                //System.err.println("Id = " + foxySessionData.getPageParameterLong());
                crit.add(Expression.eq("id", foxySessionData.getPageParameterLong()));
                List result = crit.list();
                //System.err.println("Result size = " + result.size());
                if ( result.size() > 0 ) {
                    this.inventoryBean = (Inventory)result.get(0);
                } else {
                    System.err.println("No Inventory with invRefId = " + foxySessionData.getPageParameterLong());
                }
                tx.commit();
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }
        return inventoryBean;
    }
    
    public InvMovement getInvMovementBean() {
        System.err.println("Getting Inventory 222Movement with invRefId = " + foxySessionData.getPageParameterLong2());
        if ( this.invMovementBean == null){
            this.invMovementBean = new InvMovement();
            System.err.println("Getting Inventory 33222Movement with invRefId = " + foxySessionData.getPageParameterLong2());
        }
        return invMovementBean;
    }
    
    public void setInvMovementBean(InvMovement invMovementBean) {
        this.invMovementBean = invMovementBean;
    }
    
    
    public String saveAdd() {
        //System.out.println("Save Add");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            inventoryBean.setUnitCost(inventoryBean.getBaseValue() / inventoryBean.getQuantity());
            session.save(inventoryBean);
            
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            e.printStackTrace();
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        
        return ("success");
    }
    
    public String editInventoryMov(){
        return ("editinventoryMov");
    }
    
    
    public String updateAssignment(){
        this.currentMode = "UPDASSIGNMENT";
        
        System.err.println("Getting Inventory 888Movement with invRefId = " + foxySessionData.getPageParameterLong2());
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            Criteria crit = session.createCriteria(InvMovement.class);
            //System.err.println("Id = " + foxySessionData.getPageParameterLong());
            crit.add(Expression.eq("id", foxySessionData.getPageParameterLong2()));
            List result = crit.list();
            //System.err.println("Result size = " + result.size());
            if ( result.size() > 0 ) {
                this.invMovementBean = (InvMovement)result.get(0);
            } else {
                System.err.println("No Inventory Movement with invRefId = " + foxySessionData.getPageParameterLong2());
            }
            tx.commit();
        } catch (HibernateException e) {
            //do something here with the exception
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
        } finally {
            HibernateUtil.closeSession();
        }
        return "success";
    }
    
    public boolean isUpdateAssignment(){
        if ( "UPDASSIGNMENT".equals(this.currentMode)){
            return true;
        }else{
            return false;
        }
    }
    
    
    public String AddAssignment(){
        this.invMovementBean = null; //reset to null so getInvMovementBean will recreate a new bean
        this.currentMode = "ADDASSIGNMENT";
        return null;
    }
    
    public boolean isAddAssignment(){
        if ( "ADDASSIGNMENT".equals(this.currentMode)){
            return true;
        }else{
            return false;
        }
    }
    
    
    public String saveEdit() {
        //System.out.println("Save Edit");
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            session.update(inventoryBean);
            tx.commit();
            HibernateUtil.closeSession();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return null;
        }finally {
            HibernateUtil.closeSession();
        }
        return ("success");
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        foxyTable.setFirst(0);
        return (null);
    }
    
    
    public DataModel getInventoryDetail() {
        Long invMovId = foxySessionData.getPageParameterLong();
        
        System.err.println("Query list for [" + foxySessionData.getPageParameterLong() + "]");
        
        if ( invMovId == null){
            System.err.println("Cur invMovId is null !!!!!");
            return null;
        }
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            
            String qstr =  "SELECT a.invmrefid as invmrefid, os.orderid as refno, CONCAT(os.month, os.location) as lot, ";
            qstr += " a.tdate as tdate, a.quantity as qty, a.unitcost as unitcost, a.srefiddesc as mlotid, a.usedqty as uqty, ";
            qstr += " a.itemdesc as itemdesc ";
            qstr += " FROM  invmovement as a ";
            qstr += " LEFT JOIN ordsummary as os ON os.srefid = a.srefid ";
            qstr += " WHERE a.invrefid  = :pinvrefid ";
            qstr += " ORDER BY a.tdate ";
            
            SQLQuery q = session.createSQLQuery(qstr);
            
            q.setLong("pinvrefid",  invMovId);
            
            q.addScalar("invmrefid", Hibernate.LONG);
            q.addScalar("refno", Hibernate.STRING);
            q.addScalar("lot", Hibernate.STRING);
            q.addScalar("tdate", Hibernate.DATE);
            q.addScalar("qty", Hibernate.DOUBLE);
            q.addScalar("unitcost", Hibernate.DOUBLE);
            q.addScalar("mlotid", Hibernate.STRING);
            q.addScalar("uqty", Hibernate.DOUBLE);
            q.addScalar("itemdesc", Hibernate.STRING);
            
            
            //custOderList = q.list();
            Iterator it = q.list().iterator();
            
            while (it.hasNext()){
                Object[] tmpRow = (Object[])it.next();
                int i = 0;
                ListingBean obj = new  ListingBean();
                try {
                    obj.setInvmrefid((Long)tmpRow[i++]);
                    obj.setRefNo((String)tmpRow[i++]);
                    obj.setLotid((String)tmpRow[i++]);
                    obj.setTtDate((Date)tmpRow[i++]);
                    obj.setQty((Double)tmpRow[i++]);
                    obj.setUnitcost((Double)tmpRow[i++]);
                    obj.setMlotid((String)tmpRow[i++]);
                    obj.setUsedQty((Double)tmpRow[i++]);
                    obj.setDesc((String)tmpRow[i++]);
                } catch (Exception e){
                    e.printStackTrace();
                }finally {
                    this.tableList.add(obj);
                }
            }
            
            tx.commit();
            
            if ( this.tableList.size() <= 0){
                ListingBean tmpobj = new ListingBean();
                this.tableList.add(tmpobj);
            }
            
            ListModel = null;
            ListModel = new ListDataModel();
            
            ListModel.setWrappedData(this.tableList);
            //ListModel = (DataModel)new FoxyPagedDataModel(this.tableList);
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return ListModel;
    }
    
    
    public List getOsList() {
        if ( this.osList == null){
            this.osList = new ArrayList();
            if ( this.orderId != null ) { //Items type, use it to get all relavent supplier list
                List resultList = null;
                try {
                    
                    SQLQuery q = null;
                    Session session = (Session) HibernateUtil.currentSession();
                    Transaction tx= session.beginTransaction();
                    String qstr = "SELECT os.srefid as id, os.month as month, os.location as location, ";
                    qstr += " cat.category as category, par2.shortdesc as origin, ";
                    qstr += " par1.shortdesc as destination ";
                    qstr += " FROM ordsummary as os ";
                    qstr += " LEFT JOIN category   as cat on cat.catid = os.catid ";
                    qstr += " LEFT JOIN parameter  as par1 on par1.code  = os.destination AND par1.category = 'DEST' ";
                    qstr += " LEFT JOIN parameter  as par2 on par2.code  = os.origin AND par2.category = 'CNTY' ";
                    qstr += " WHERE orderid = :porderid ";
                    q = session.createSQLQuery(qstr);
                    //set SQL parameter
                    q.setString("porderid", this.orderId);
                    
                    //Define attribute datatype binding
                    q.addScalar("id", Hibernate.STRING);
                    q.addScalar("month", Hibernate.STRING);
                    q.addScalar("location", Hibernate.STRING);
                    q.addScalar("category", Hibernate.STRING);
                    q.addScalar("origin", Hibernate.STRING);
                    q.addScalar("destination", Hibernate.STRING);
                    
                    Iterator it = q.list().iterator();
                    if ( it.hasNext() ){
                        this.osList.add(new SelectItem(new String(""), new String("Lot_____Cat_______Origin____Dest______"))); //Always add a null items, event no records
                    }else {
                        this.osList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
                    }
                    
                    String itemKey = null;
                    String itemDesc = "";
                    String tmpstr = null;
                    int tmpcount = 0;
                    while (it.hasNext()){
                        int idx = 0;
                        itemDesc = "";
                        Object[] tmpRow = (Object[])it.next();
                        itemKey  =  (String)tmpRow[idx++]; //id
                        
                        tmpstr   =  (String)tmpRow[idx++]; //month
                        if ( tmpstr != null )  itemDesc +=  tmpstr;
                        
                        tmpstr   =  (String)tmpRow[idx++]; //location
                        if ( tmpstr != null )  itemDesc +=  tmpstr;
                        
                        tmpcount = 8 - itemDesc.length();
                        for ( int j = 0; j < tmpcount; j++ ){
                            itemDesc += "_";
                        }
                        
                        tmpstr = (String)tmpRow[idx++]; //category
                        if (tmpstr == null) tmpstr = "UNKNOWN";
                        tmpcount = 10 - tmpstr.length();
                        for ( int j = 0; j < tmpcount; j++ ){
                            tmpstr += "_";
                        }
                        itemDesc += " " + tmpstr;
                        
                        itemDesc += " " + (String)tmpRow[idx++]; //origin
                        itemDesc += "-->";
                        itemDesc += (String)tmpRow[idx++]; //destination
                        
                        this.osList.add(new SelectItem(itemKey, itemDesc)); //add in current items
                    }
                    tx.commit();
                } catch (HibernateException e) {
                    //do something here with the exception
                    e.printStackTrace();
                    FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                    ctx.addMessage(null, fmsg);
                } finally {
                    HibernateUtil.closeSession();
                }
                
            }else {
                this.osList.add(new SelectItem(new String(""), new String("Empty"))); //Always add a null items, event no records
            }
        }
        return osList;
    }
    
    public String delete(){
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Transaction tx= session.beginTransaction();
            String  qstr  = new String("DELETE Inventory t ");
            qstr = qstr.concat("WHERE t.invRefId = :pinvRefId ");
            Query q = session.createQuery(qstr);
            q.setLong("pinvRefId", foxySessionData.getPageParameterLong());
            q.executeUpdate();
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
            ctx.addMessage(null, fmsg);
            return (null);
        } finally {
            HibernateUtil.closeSession();
        }
        
        return null;
    }
    
}
