/*
 * FoxyQuotaEntryPage.java
 *
 * Created on June 20, 2006, 6:18 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.page;

import javax.faces.application.FacesMessage;
import com.foxy.db.QuotaEntry;
import com.foxy.db.QuotaMast;
import com.foxy.db.OrderSummary;
import com.foxy.db.HibernateUtil;
import com.foxy.bean.FoxySessionData;
import com.foxy.util.FoxyPagedDataModel;
import com.foxy.util.ListData;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
//import javax.servlet.ServletOutputStream;
//import javax.servlet.http.HttpServletResponse;
//import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Criteria;
import org.hibernate.criterion.Expression;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.Query;


/**
 *
 * @author hcting
 */
public class FoxyQuotaReportsPage extends Page implements Serializable{
    private static String MENU_CODE = new String("FOXY");
    
    private DataModel quotaOutstandingListModel;
    //private QuotaEntry qtaEntryBean = null;
    //private QuotaEntry sessQuotaEntryBean = null;
    //private List qTypeList = null;
    private List quotaForCountry = null;
    private String country = null;
    private String quota = null;
    private Date fromDate = null;
    private Date toDate = null;
    
    
    public class ReportDataBean {
        private String orderId = null;
        private String month = null;
        private String location = null;
        private String quota = null;
        private Double qty = null;
        private Double multiplier = null;
        private Double qused = null;
        private Date  delivery = null;
        
        public String getOrderId() {
            return orderId;
        }
        
        public void setOrderId(String orderId) {
            this.orderId = orderId;
        }
        
        public String getMonth() {
            return month;
        }
        
        public void setMonth(String month) {
            this.month = month;
        }
        
        public String getLocation() {
            return location;
        }
        
        public void setLocation(String location) {
            this.location = location;
        }
        
        public String getQuota() {
            return quota;
        }
        
        public void setQuota(String quota) {
            this.quota = quota;
        }
        
        public Double getMultiplier() {
            return multiplier;
        }
        
        public void setMultiplier(Double multiplier) {
            this.multiplier = multiplier;
        }
        
        public Double getQty() {
            return qty;
        }
        
        public void setQty(Double qty) {
            this.qty = qty;
        }
        
        public Date getDelivery() {
            return delivery;
        }
        
        public void setDelivery(Date delivery) {
            this.delivery = delivery;
        }
        
        public Double getQused() {
            return qused;
        }
        
        public void setQused(Double qused) {
            this.qused = qused;
        }
        
    }; //Inner class end
    
    /** Creates a new instance of FoxyQuotaEntryPage */
    public FoxyQuotaReportsPage() {
        super(new String("QuotaReportsForm"));
        
        try {
            this.isAuthorize(MENU_CODE);
            //System.out.println(ctx.getApplication().getViewHandler().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String country) {
        this.country = country;
    }
    
    public String getQuota() {
        return quota;
    }
    
    public void setQuota(String quota) {
        this.quota = quota;
    }
    
    public Date getFromDate() {
        return fromDate;
    }
    
    public void setFromDate(Date fromDate) {
        this.fromDate = fromDate;
    }
    
    public Date getToDate() {
        return toDate;
    }
    
    public void setToDate(Date toDate) {
        this.toDate = toDate;
    }
    
    //Ajax used to get latest Quota list based on country submitted
    public List getQtaByCountryList(){
        System.out.println("Get quota list for country " + this.country);
        if (quotaForCountry == null )
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria criteria = session.createCriteria(QuotaMast.class);
                criteria.add(Expression.eq("country", this.country));
                criteria.addOrder(Order.asc("quota"));
                List resultlist = criteria.list();
                tx.commit();
                HibernateUtil.closeSession();
                
                //Use LinkedHashMap to supress duplicate entry, bcoz list can have duplicate if join table used!!!! and hibernate do return duplicate
                Map resultMap = new LinkedHashMap();
                QuotaMast qtam = null;
                for ( int i = 0; i < resultlist.size(); i++ ){
                    qtam = (QuotaMast)resultlist.get(i);
                    resultMap.put(qtam.getQtaId(), qtam);
                }
                //System.err.println("result size = " +  resultMap.size());
                
                quotaForCountry = new ArrayList();
                quotaForCountry.add(new SelectItem(new String(""),
                        new String((resultMap.size() == 0)?"No Quota Applicable":"Please Select One")));
                
                QuotaMast qm = null;
                Set st = resultMap.entrySet();
                Iterator it = st.iterator();
                while( it.hasNext()){
                    Map.Entry me = (Map.Entry)it.next();
                    qm = (QuotaMast)me.getValue();
                    quotaForCountry.add(new SelectItem(qm.getQuota(), qm.getListDisplayString()));
                    //System.err.println("=====>>>" + qm.getQtaId() + " - " + qm.getListDisplayString());
                }
            } catch (Exception e) {
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
                return null;
            } finally {
                HibernateUtil.closeSession();
            }
            return (quotaForCountry);
    }
    
    
    public String search() {
        this.foxySessionData.setAction(LST);
        return (null);
    }
    
    public DataModel getQuotaOutstandingReport(){
        if ( this.country != null){
            try {
                System.err.println("Search for records " +  this.country + "  " + this.quota + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                Criteria criteria = session.createCriteria(OrderSummary.class);
                criteria.add(Expression.eq("origin", this.country));
                criteria.add(Expression.eq("quota", this.quota));
                criteria.add(Expression.eq("status", "A"));
                criteria.add(Expression.ge("delivery", this.fromDate));
                criteria.add(Expression.le("delivery", this.toDate));
                criteria.addOrder(Order.asc("orderId"));
                tableList = criteria.list();
                System.err.println("Search for records 111");
                
                if (tableList.size() == 0) {
                    System.err.println("Search for records 2222");
                    OrderSummary os = new OrderSummary();
                    this.tableList.add(os);
                }
                if (quotaOutstandingListModel == null) {
                    System.err.println("Search for records 333");
                    quotaOutstandingListModel = new ListDataModel();
                }
                System.err.println("Search for records 444");
                quotaOutstandingListModel.setWrappedData(tableList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (quotaOutstandingListModel == null) {
            System.err.println("No records ....!!!");
            quotaOutstandingListModel = new ListDataModel();
        }
        
        return quotaOutstandingListModel;
    }
    
    
    ////////////////////////////////////////////////////////
    public DataModel getQuotaUsagesReport(){
        List<ReportDataBean>  quotaUsagesList = null;
        if ( this.country != null){
            try {
                System.err.println("Search for records " +  this.country + "  " + this.quota + " " + this.fromDate + " " + this.toDate);
                Session session = (Session) HibernateUtil.currentSession();
                Transaction tx= session.beginTransaction();
                String qstr = "SELECT os.orderId, os.month, os.location, os.quota, ";
                qstr = qstr + "os.qtyPcs, os.multiplier, ";
                qstr = qstr + "(SELECT SUM(sp.qtyPcs) FROM Shipping AS sp WHERE sp.ccRefId IN (SELECT oc.id FROM OrderConfirm oc WHERE oc.ssRefId = os.id)) as quotaused, ";
                qstr = qstr + "os.delivery ";
                qstr = qstr + "FROM  OrderSummary as os  ";
                qstr = qstr + "WHERE os.origin = :porigin AND os.quota = :pquota AND ";
                qstr = qstr + "os.delivery >= :pdeliveryStart AND os.delivery <= :pdeliveryEnd ";
                qstr = qstr + "AND os.status = :pstatus ORDER BY orderId";
                Query q = session.createQuery(qstr);
                q.setString("porigin", this.country);
                q.setString("pquota", this.quota);
                q.setString("pstatus", "A");
                q.setDate("pdeliveryStart", this.fromDate);
                q.setDate("pdeliveryEnd",this.toDate);
                
                //quotaUsagesList = q.list();
                Iterator it = q.list().iterator();
                if ( quotaUsagesList == null){
                    quotaUsagesList = new ArrayList();
                }
                while (it.hasNext()){
                    Object[] tmpRow = (Object[])it.next();
                    ReportDataBean obj = new  ReportDataBean();
                    obj.setOrderId((String)tmpRow[0]);
                    obj.setMonth((String)tmpRow[1]);
                    obj.setLocation((String)tmpRow[2]);
                    obj.setQuota((String)tmpRow[3]);
                    obj.setQty((Double)tmpRow[4]);
                    obj.setMultiplier((Double)tmpRow[5]);
                    obj.setQused((Double)tmpRow[6]);
                    obj.setDelivery((Date)tmpRow[7]);
                    quotaUsagesList.add(obj);
                    
                }
                System.err.println("Search for records 111, size = " + quotaUsagesList.size());
                try {
                    for ( int i = 0; i < quotaUsagesList.size(); i++){
                        System.err.println("geting - " + i);
                        ReportDataBean rb = (ReportDataBean)quotaUsagesList.get(i);
                        System.err.println("OrderID - " +  rb.getOrderId());
                    }
                }catch (Exception e){
                    e.printStackTrace();
                }
                
                if (quotaUsagesList.size() == 0) {
                    System.err.println("Search for records 2222");
                    ReportDataBean os = new ReportDataBean();
                    quotaUsagesList.add(os);
                }
                if (quotaOutstandingListModel == null) {
                    System.err.println("Search for records 333");
                    quotaOutstandingListModel = new ListDataModel();
                }
                System.err.println("Search for records 444");
                quotaOutstandingListModel.setWrappedData(quotaUsagesList);
                
            } catch (HibernateException e) {
                //do something here with the exception
                e.printStackTrace();
                FacesMessage fmsg  = new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getCause().toString(), e.getMessage());
                ctx.addMessage(null, fmsg);
            } finally {
                HibernateUtil.closeSession();
            }
        }else {
            System.err.println("No records ....!!! Search key is null");
        }
        //Avoid null pointer exception
        if (quotaOutstandingListModel == null) {
            System.err.println("No records ....!!!");
            quotaOutstandingListModel = new ListDataModel();
        }
        return quotaOutstandingListModel;
    }
}
