/*
 * ListData.java
 *
 * Created on July 4, 2006, 5:10 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.util;

import com.foxy.db.Category;
import com.foxy.db.Customer;
import com.foxy.db.HibernateUtil;
import com.foxy.db.Parameter;
import com.foxy.db.User;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.faces.model.SelectItem;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.Query;

/**
 *
 * @author eric
 */
public class ListData {
    private Date dNow = null;
    private SimpleDateFormat fmt = new SimpleDateFormat("yyyy");
    private List orderIdYear = null;
    private List shipStat = null;
    private List paramCatList = null;
    private List customer = null;
    private List merchandiser = null;
    private List category = null;
    private List parameterList = null;
    
    private List country = null;
    private List type = null;
    private List season = null;
    private List destination = null;
    private List shipType = null;
    private List lot = null;
    private List statList = null;
    private List userGroupList = null;
    private List unitList = null;
    private List taxList = null;
    private List ordMethod = null;
    private List priceTerm = null;
    
    /** Creates a new instance of ListData */
    public ListData() {
        if ( paramCatList == null){
            paramCatList = new ArrayList();
            paramCatList.add(new SelectItem(new String(""), new String("  ")));
            paramCatList.add(new SelectItem(new String("CNTY"), new String("Countries of Origin")));
            paramCatList.add(new SelectItem(new String("TYPE"), new String("Type")));
            paramCatList.add(new SelectItem(new String("SEA"),  new String("Seasons")));
            paramCatList.add(new SelectItem(new String("DEST"), new String("Destination Country")));
            paramCatList.add(new SelectItem(new String("SHIP"), new String("Shipment type")));
            paramCatList.add(new SelectItem(new String("LOT"),  new String("Preconfigured Lot list")));
            paramCatList.add(new SelectItem(new String("STAT"), new String("Status code")));
            paramCatList.add(new SelectItem(new String("UGRP"), new String("User groups code")));
            paramCatList.add(new SelectItem(new String("UNIT"), new String("Unit for quantity")));
            paramCatList.add(new SelectItem(new String("ITAX"), new String("Importer Tax Type")));
            paramCatList.add(new SelectItem(new String("ORDMD"), new String("Order Method")));
            paramCatList.add(new SelectItem(new String("PTERM"), new String("Price Term")));
        }
    }
    
    
    public void resetParamList(String pcode){
        boolean bFound = false;
        if ( pcode.equals("CNTY"))  { this.country = null; bFound = true; }
        if ( pcode.equals("TYPE"))  { this.type = null;    bFound = true; }
        if ( pcode.equals("SEA"))   { this.season = null;  bFound = true; }
        if ( pcode.equals("DEST"))  { this.destination = null; bFound = true; }
        if ( pcode.equals("SHIP"))  { this.shipType = null; bFound = true; }
        if ( pcode.equals("LOT"))   { this.lot = null; bFound = true; }
        if ( pcode.equals("STAT"))  { this.statList = null; bFound = true; }
        if ( pcode.equals("UGRP"))  { this.userGroupList = null; bFound = true; }
        if ( pcode.equals("UNIT"))  { this.unitList = null; bFound = true; }
        if ( pcode.equals("ITAX"))  { this.taxList = null; bFound = true; }
        if ( pcode.equals("ORDMD"))  { this.ordMethod = null; bFound = true; }
        if ( pcode.equals("PTERM"))  { this.priceTerm = null; bFound = true; }
        
        if ( bFound == false) {
            System.err.println("Calling to reset an unknown type of parameter [" + pcode + "]");
        }
        return;
    }
    
    
    //For parameter maintanance screen combo box (list constructed by this class constructor)
    public List getParamCatList() {
        return paramCatList;
    }
    
    
    /***** Start section for all method returning a list of items ****/
    
    // CategoryList method
    //Used by category admin screen to force reload list
    public void resetCategory(){
        //System.err.println("Calling to reset category");
        this.category = null;
    }
    
    public List getCategoryList() {
        List paramList = new ArrayList();
        parameterList = null;
        if (this.category == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                this.category = session.createQuery("from Category order by country, category").list();
            } catch (Exception e) {
                //HibernateUtil.closeSession();
                e.printStackTrace();
            }finally {
                HibernateUtil.closeSession();
            }
        }
        for (int i = 0; i < this.category.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Category cat = (Category) this.category.get(i);
            paramList.add(new SelectItem(cat.getCatId().toString(), cat.getCategory() + " - " + cat.getDesc()));
        }
        return paramList;
    }
    
    
    // Order Year
    public List getOrderIdYear() {
        if (this.orderIdYear == null) {
            this.orderIdYear = new ArrayList();
            dNow = new Date();
            
            int curYear = Integer.parseInt(fmt.format(dNow));
            int nextYear = curYear + 1;
            
            this.orderIdYear.add(new SelectItem(String.valueOf(curYear), String.valueOf(curYear)));
            this.orderIdYear.add(new SelectItem(String.valueOf(nextYear), String.valueOf(nextYear)));
        }
        return(this.orderIdYear);
    }

    // Ship Status
    public List getShipStatus() {
        if (this.shipStat == null) {
            this.shipStat = new ArrayList();
            this.shipStat.add(new SelectItem(new String("Yes"), new String("Yes")));
            this.shipStat.add(new SelectItem(new String("No"), new String("No")));
        }
        return(this.shipStat);
    }    
    
    //Used by customer admin screen to force reload list
    public void resetCustomer(){
        //System.err.println("Calling to reset customer");
        this.customer = null;
    }
    /** Returns a List with SelectItem instances for the Customer */
    public List getCustomerList() {
        List paramList = new ArrayList();
        parameterList = null;
        
        if (this.customer == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                this.customer = session.createQuery("from Customer order by custname").list();
            } catch (Exception e) {
                //HibernateUtil.closeSession();
                e.printStackTrace();
            }finally {
                HibernateUtil.closeSession();
            }
        }
        for (int i = 0; i < this.customer.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Customer param = (Customer) customer.get(i);
            paramList.add(new SelectItem(param.getCustCode(), param.getCustName()));
        }
        return paramList;
    }
    
    
    //Used by user admin screen to force reload list
    public void resetMerchandiser(){
        //System.err.println("Calling to reset MR");
        this.merchandiser = null;
    }
    /** Returns a List with SelectItem instances for the Merchandiser */
    public List getMerchandiserList() {
        List paramList = new ArrayList();
        parameterList = null;
        if (this.merchandiser == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                this.merchandiser = session.createQuery("from User as user where " +
                        "user.userGroup ='MC' order by fullname").list();
            } catch (Exception e) {
                //HibernateUtil.closeSession();
                e.printStackTrace();
            }finally {
                HibernateUtil.closeSession();
            }
        }
        for (int i = 0; i < this.merchandiser.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            User usr = (User) this.merchandiser.get(i);
            paramList.add(new SelectItem(usr.getUserId(), usr.getFullName()));
        }
        return paramList;
    }
    
    // StatList
    public List getStatList() {
        if (this.statList == null) {
            this.statList = this.getParameterExList(new String("STAT"), new String("code"));
        }
        return (this.statList);
    }
    
    // UserGroupList
    public List getUserGroupList() {
        if (this.userGroupList == null) {
            this.userGroupList = this.getParameterExList(new String("UGRP"), new String("code"));
        }
        return (this.userGroupList);
    }
    
    
    // TypeList
    public List getTypeList() {
        if (this.type == null) {
            this.type = this.getParameterList(new String("TYPE"), new String("description"));
        }
        return(this.type);
    }
    
    // SeasonList
    public List getSeasonList() {
        if (this.season == null) {
            this.season = this.getParameterList(new String("SEA"), new String("description"));
        }
        return(this.season);
    }
    
    // CountryList
    public List getCountryList() {
        if (this.country == null) {
            this.country = this.getParameterExList(new String("CNTY"), new String("code"));
        }
        return (this.country);
    }
    
    // DestinationList
    public List getDestinationList() {
        if (this.destination == null) {
            this.destination = this.getParameterExList(new String("DEST"), new String("description"));
        }
        return(this.destination);
    }
    
    // ShipTypeList
    public List getShipTypeList() {
        if (this.shipType == null) {
            this.shipType = this.getParameterList(new String("SHIP"), new String("description"));
        }
        return(this.shipType);
    }
    
    // LotList
    public List getLotList() {
        if (this.lot == null) {
            this.lot = this.getParameterList(new String("LOT"), new String("code"));
        }
        return (this.lot);
    }
    
    // UnitList
    public List getUnitList() {
        if (this.unitList == null) {
            this.unitList = this.getParameterExList(new String("UNIT"), new String("sequence"));
        }
        return (this.unitList);
    }
    
    // Tax List
    public List getTaxList() {
        if (this.taxList == null) {
            this.taxList = this.getParameterExList(new String("ITAX"), new String("sequence"));
        }
        return (this.taxList);
    }
    
    // Order Method List
    public List getOrdMethodList() {
        if (this.ordMethod == null) {
            this.ordMethod = this.getParameterExList(new String("ORDMD"), new String("sequence"));
        }
        return (this.ordMethod);
    }
    
    // Order Method List
    public List getPriceTermList() {
        if (this.priceTerm == null) {
            this.priceTerm = this.getParameterExList(new String("PTERM"), new String("sequence"));
        }
        return (this.priceTerm);
    }
    
    // ParameterList compilation common method
    private List getParameterList(String paramGroup, String orderBy) {
        List paramList = new ArrayList();
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Query qry = session.createQuery("from Parameter as param where param.category = :pGroup order by " + orderBy);
            qry.setString("pGroup", paramGroup);
            
            this.parameterList = qry.list();
        } catch (Exception e) {
            //HibernateUtil.closeSession();
            e.printStackTrace();
        }finally {
            HibernateUtil.closeSession();
        }
        
        
        for (int i = 0; i < this.parameterList.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Parameter param = (Parameter) this.parameterList.get(i);
            paramList.add(new SelectItem(param.getCode(), param.getDescription()));
        }
        return paramList;
    }
    
    private List getParameterExList(String paramGroup, String orderBy) {
        List paramList = new ArrayList();
        
        try {
            Session session = (Session) HibernateUtil.currentSession();
            Query qry = session.createQuery("from Parameter as param where param.category = :pGroup order by " + orderBy);
            qry.setString("pGroup", paramGroup);            
            
            this.parameterList = qry.list();
        } catch (Exception e) {
            e.printStackTrace();
            //HibernateUtil.closeSession();
        }finally {
            HibernateUtil.closeSession();
        }
        
        for (int i = 0; i < this.parameterList.size(); i ++) {
            System.out.println(i);
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String(" ")));
            }
            Parameter param = (Parameter) this.parameterList.get(i);
            paramList.add(new SelectItem(param.getCode(), param.getCode() + " - " + param.getDescription()));
        }
        return paramList;
    }
    
    /* Translation */
    
    public Customer getCustomer(String code) {
        List result = new ArrayList();
        if (code != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Query qry = session.createQuery("from Customer as c where c.custCode = :pcode");
                qry.setString("pcode", code);
                
                result = qry.list();
            } catch (Exception e) {
                e.printStackTrace();
                //HibernateUtil.closeSession();
            }finally {
                HibernateUtil.closeSession();
            }
        }
        
        if (result.size() > 0) {
            Customer cust = (Customer) result.get(0);
            return cust;
        } else {
            return null;
        }
    }
    
    public User getMerchandiser(String userId) {
        List result = new ArrayList();
        if (userId != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Query qry = session.createQuery("from User as user where user.userId = :puserId");
                qry.setString("puserId", userId);
                
                result = qry.list();
            } catch (Exception e) {
                //HibernateUtil.closeSession();
                e.printStackTrace();
            }finally {
                HibernateUtil.closeSession();
            }
        }
        
        if (result.size() > 0) {
            User usr = (User) result.get(0);
            return usr;
        } else {
            return null;
        }
    }
    
    public String getSeasonDesc(String code) {
        if (code != null) {
            return(this.getParameterDesc(new String("SEA"), code, new String("desc"), 0));
        }
        return null;
    }
    
    public String getCountryDesc(String code, int close) {
        if (code != null) {
            return(this.getParameterDesc(new String("CNTY"), code, new String("desc"), close));
        }
        return null;
    }
    
    public String getDestinationDesc(String code, int close) {
        if (code != null) {
            return(getParameterDesc(new String("DEST"), code, new String("desc"), close));
        }
        return null;
    }
    
    public String getDestinationShortDesc(String code, int close) {
        if (code != null) {
            return(getParameterDesc(new String("DEST"), code, new String("short"), close));
        }
        return null;
    }
    
    public String getParameterDesc(String category, String code, String type, int close) {
        List result = new ArrayList();
        if (code != null && category != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                Query qry = session.createQuery("from Parameter as p where p.category = :pcat and p.code = :pcode");
                qry.setString("pcat", category);
                qry.setString("pcode", code);
                
                result = qry.list();
                if (close == 0) {
                    HibernateUtil.closeSession();
                }
            } catch (Exception e) {
                e.printStackTrace();
                HibernateUtil.closeSession();
            }finally {
                
            }
        }
        
        if (result.size() > 0) {
            Parameter param = (Parameter) result.get(0);
            if (type.equals("desc")) {
                return param.getDescription();
            } else {
                return param.getShortDesc();
            }
        } else {
            return null;
        }
    }
    
    public Category getCategory(String catId, int close) {
        List result = new ArrayList();
        if (catId != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                
                Query qry = session.createQuery("from Category as c where c.catId = :pcatId");
                qry.setString("pcatId", catId);
                
                result = qry.list();
                
                if (close == 0) {
                    HibernateUtil.closeSession();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }finally {
                //HibernateUtil.closeSession();
            }
        }
        if (result.size() > 0) {
            Category cat = (Category) result.get(0);
            return cat;
        } else {
            return null;
        }
    }
}
