/*
 * ListData.java
 *
 * Created on July 4, 2006, 5:10 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.foxy.util;

import com.foxy.db.Category;
import com.foxy.db.Customer;
import com.foxy.db.HibernateUtil;
import com.foxy.db.Parameter;
import com.foxy.db.User;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.faces.model.SelectItem;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author eric
 */
public class ListData {
    private List customer = null;
    private List country = null;
    private List type = null;
    private List season = null;
    private List destination = null;
    private List shipType = null;
    private List category = null;
    private List lot = null;
    private List merchandiser = null;
    private List parameterList = null;
    private List statList = null;
    private List userGroupList = null;
    private List unitList = null;
    private List taxList = null;
    
    /** Creates a new instance of ListData */
    public ListData() {
    }
    
    
    public void resetCustomer(){
        customer = null;
    }
    
    public void resetCountry(){
        country = null;
    }
    
    public void resetType(){
        type = null;
    }
    
    public void resetSeason(){
        season = null;
    }
    
    public void resetDestination(){
        destination = null;
    }
    
    public void resetShipType(){
        shipType = null;
    }
    
    public void resetCategory(){
        category = null;
    }
    
    public void resetLot(){
        lot = null;
    }
    public void resetMerchandiser(){
        merchandiser = null;
    }
    
    public void resetParameterList(){
        parameterList = null;
    }
    
    public void resetStatList(){
        statList = null;
    }
    
    public void resetUserGroupList(){
        userGroupList = null;
    }
    
    public void resetUnitList(){
        unitList = null;
    }
    
    public void resetTaxList(){
        taxList = null;
    }
    
    
    
    
    /** Returns a List with SelectItem instances for the Customer */
    public List getCustomerList() {
        List paramList = new ArrayList();
        parameterList = null;
        
        if (this.customer == null) {
            Session session = (Session) HibernateUtil.currentSession();
            this.customer = session.createQuery("from Customer order by custname").list();
            HibernateUtil.closeSession();
        }
        for (int i = 0; i < this.customer.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Customer param = (Customer) customer.get(i);
            paramList.add(new SelectItem(param.getCustCode(), param.getCustName()));
        }
        return paramList;
    }
    
    /** Returns a List with SelectItem instances for the Merchandiser */
    public List getMerchandiserList() {
        List paramList = new ArrayList();
        parameterList = null;
        if (this.merchandiser == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                this.merchandiser = session.createQuery("from User as user where " +
                        "user.userGroup ='MC' order by fullname").list();
                HibernateUtil.closeSession();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < this.merchandiser.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            User usr = (User) this.merchandiser.get(i);
            paramList.add(new SelectItem(usr.getUserId(), usr.getFullName()));
        }
        return paramList;
    }
    
    // StatList
    public List getStatList() {
        if (this.statList == null) {
            this.statList = this.getParameterExList(new String("STAT"), new String("code"));
        }
        return (this.statList);
    }
    
    // UserGroupList
    public List getUserGroupList() {
        if (this.userGroupList == null) {
            this.userGroupList = this.getParameterExList(new String("UGRP"), new String("code"));
        }
        return (this.userGroupList);
    }
    
    // CategoryList
    public List getCategoryList() {
        List paramList = new ArrayList();
        parameterList = null;
        if (this.category == null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                this.category = session.createQuery("from Category order by country, category").list();
                HibernateUtil.closeSession();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < this.category.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Category cat = (Category) this.category.get(i);
            paramList.add(new SelectItem(cat.getCatId().toString(), cat.getCategory() + " - " + cat.getDesc()));
        }
        return paramList;
    }
    
    // TypeList
    public List getTypeList() {
        if (this.type == null) {
            this.type = this.getParameterList(new String("TYPE"), new String("description"));
        }
        return(this.type);
    }
    
    // SeasonList
    public List getSeasonList() {
        if (this.season == null) {
            this.season = this.getParameterList(new String("SEA"), new String("description"));
        }
        return(this.season);
    }
    
    // CountryList
    public List getCountryList() {
        if (this.country == null) {
            this.country = this.getParameterExList(new String("CNTY"), new String("code"));
        }
        return (this.country);
    }
    
    // DestinationList
    public List getDestinationList() {
        if (this.destination == null) {
            this.destination = this.getParameterExList(new String("DEST"), new String("description"));
        }
        return(this.destination);
    }
    
    // ShipTypeList
    public List getShipTypeList() {
        if (this.shipType == null) {
            this.shipType = this.getParameterList(new String("SHIP"), new String("description"));
        }
        return(this.shipType);
    }
    
    // LotList
    public List getLotList() {
        if (this.lot == null) {
            this.lot = this.getParameterList(new String("LOT"), new String("code"));
        }
        return (this.lot);
    }
    
    // UnitList
    public List getUnitList() {
        if (this.unitList == null) {
            this.unitList = this.getParameterExList(new String("UNIT"), new String("code"));
        }
        return (this.unitList);
    }
    
    // Tax List
    public List getTaxList() {
        if (this.taxList == null) {
            this.taxList = this.getParameterExList(new String("ITAX"), new String("sequence"));
        }
        return (this.taxList);
    }
    
    
    // ParameterList
    private List getParameterList(String paramGroup, String orderBy) {
        List paramList = new ArrayList();
        
        Session session = (Session) HibernateUtil.currentSession();
        this.parameterList = session.createQuery("from Parameter as param where " +
                "param.category ='"+ paramGroup + "' order by " + orderBy).list();
        HibernateUtil.closeSession();
        
        for (int i = 0; i < this.parameterList.size(); i ++) {
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String("  ")));
            }
            Parameter param = (Parameter) this.parameterList.get(i);
            paramList.add(new SelectItem(param.getCode(), param.getDescription()));
        }
        return paramList;
    }
    
    private List getParameterExList(String paramGroup, String orderBy) {
        List paramList = new ArrayList();
        
        
        Session session = (Session) HibernateUtil.currentSession();
        this.parameterList = session.createQuery("from Parameter as param where " +
                "param.category ='"+ paramGroup + "' order by " + orderBy).list();
        HibernateUtil.closeSession();
        
        for (int i = 0; i < this.parameterList.size(); i ++) {
            System.out.println(i);
            if ( i == 0) {
                paramList.add(new SelectItem(new String(""), new String(" ")));
            }
            Parameter param = (Parameter) this.parameterList.get(i);
            paramList.add(new SelectItem(param.getCode(), param.getCode() + " - " + param.getDescription()));
        }
        return paramList;
    }
    
    /* Translation */
    
    public Customer getCustomer(String code) {
        List result = new ArrayList();
        if (code != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                result = session.createQuery("from Customer where custcode = '" + code + "'").list();
                HibernateUtil.closeSession();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (result.size() > 0) {
            Customer cust = (Customer) result.get(0);
            return cust;
        } else {
            return null;
        }
    }
    
    public User getMerchandiser(String userId) {
        List result = new ArrayList();
        if (userId != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                result = session.createQuery("from User as user where " +
                        "user.userId ='" + userId + "'").list();
                HibernateUtil.closeSession();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (result.size() > 0) {
            User usr = (User) result.get(0);
            return usr;
        } else {
            return null;
        }
    }
    
    public String getSeasonDesc(String code) {
        if (code != null) {
            return(this.getParameterDesc(new String("SEA"), code, new String("desc"), 0));
        }
        return null;
    }
    
    public String getCountryDesc(String code) {
        if (code != null) {
            return(this.getParameterDesc(new String("CNTY"), code, new String("desc"), 0));
        }
        return null;
    }
    
    public String getDestinationDesc(String code, int close) {
        if (code != null) {
            return(getParameterDesc(new String("DEST"), code, new String("desc"), close));
        }
        return null;
    }
    
    public String getDestinationShortDesc(String code, int close) {
        if (code != null) {
            return(getParameterDesc(new String("DEST"), code, new String("short"), close));
        }
        return null;
    }
    
    public String getParameterDesc(String category, String code, String type, int close) {
        List result = new ArrayList();
        if (code != null && category != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                result = session.createQuery("from Parameter where category = '" + category +
                        "' and code = '" + code + "'").list();
                if (close == 0) {
                    HibernateUtil.closeSession();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (result.size() > 0) {
            Parameter param = (Parameter) result.get(0);
            if (type.equals("desc")) {
                return param.getDescription();
            } else {
                return param.getShortDesc();
            }
        } else {
            return null;
        }
    }
    
    public Category getCategory(String catId) {
        List result = new ArrayList();
        if (catId != null) {
            try {
                Session session = (Session) HibernateUtil.currentSession();
                result = session.createQuery("from Category where catId = '" + catId +"'").list();
                HibernateUtil.closeSession();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (result.size() > 0) {
            Category cat = (Category) result.get(0);
            return cat;
        } else {
            return null;
        }
    }
}
